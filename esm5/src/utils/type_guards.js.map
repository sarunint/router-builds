{"version":3,"file":"type_guards.js","sourceRoot":"","sources":["../../../../../../packages/router/src/utils/type_guards.ts"],"names":[],"mappings":";;;;;;;;;;;AASA,OAAO,EAAC,OAAO,EAAC,MAAM,aAAa,CAAC;;;;;;;;;;;;;;;;;AAepC,MAAM,UAAU,UAAU,CAAI,CAAM;IAClC,OAAO,OAAO,CAAC,KAAK,UAAU,CAAC;CAChC;;;;;AAED,MAAM,UAAU,SAAS,CAAC,CAAM;IAC9B,OAAO,OAAO,CAAC,KAAK,SAAS,CAAC;CAC/B;;;;;AAED,MAAM,UAAU,SAAS,CAAC,CAAM;IAC9B,OAAO,CAAC,YAAY,OAAO,CAAC;CAC7B;;;;;AAED,MAAM,UAAU,SAAS,CAAC,KAAU;IAClC,OAAO,KAAK,IAAI,UAAU,CAAU,KAAK,CAAC,OAAO,CAAC,CAAC;CACpD;;;;;AAED,MAAM,UAAU,aAAa,CAAC,KAAU;IACtC,OAAO,KAAK,IAAI,UAAU,CAAc,KAAK,CAAC,WAAW,CAAC,CAAC;CAC5D;;;;;AAED,MAAM,UAAU,kBAAkB,CAAC,KAAU;IAC3C,OAAO,KAAK,IAAI,UAAU,CAAmB,KAAK,CAAC,gBAAgB,CAAC,CAAC;CACtE;;;;;;AAED,MAAM,UAAU,eAAe,CAAI,KAAU;IAC3C,OAAO,KAAK,IAAI,UAAU,CAAmB,KAAK,CAAC,aAAa,CAAC,CAAC;CACnE","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CanActivate, CanActivateChild, CanDeactivate, CanLoad} from '../interfaces';\nimport {UrlTree} from '../url_tree';\n\n/**\n * Simple function check, but generic so type inference will flow. Example:\n *\n * function product(a: number, b: number) {\n *   return a * b;\n * }\n *\n * if (isFunction<product>(fn)) {\n *   return fn(1, 2);\n * } else {\n *   throw \"Must provide the `product` function\";\n * }\n */\nexport function isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n\nexport function isBoolean(v: any): v is boolean {\n  return typeof v === 'boolean';\n}\n\nexport function isUrlTree(v: any): v is UrlTree {\n  return v instanceof UrlTree;\n}\n\nexport function isCanLoad(guard: any): guard is CanLoad {\n  return guard && isFunction<CanLoad>(guard.canLoad);\n}\n\nexport function isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nexport function isCanActivateChild(guard: any): guard is CanActivateChild {\n  return guard && isFunction<CanActivateChild>(guard.canActivateChild);\n}\n\nexport function isCanDeactivate<T>(guard: any): guard is CanDeactivate<T> {\n  return guard && isFunction<CanDeactivate<T>>(guard.canDeactivate);\n}\n"]}