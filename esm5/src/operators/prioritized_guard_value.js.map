{"version":3,"file":"prioritized_guard_value.js","sourceRoot":"","sources":["../../../../../../packages/router/src/operators/prioritized_guard_value.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAA+B,aAAa,EAAC,MAAM,MAAM,CAAC;AACjE,OAAO,EAAC,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,IAAI,EAAC,MAAM,gBAAgB,CAAC;AAG7E,OAAO,EAAC,SAAS,EAAC,MAAM,sBAAsB,CAAC;;AAE/C,IAAM,aAAa,GAAG,MAAM,CAAC,eAAe,CAAC,CAAC;;;;AAG9C,MAAM,UAAU,qBAAqB;IAEnC,OAAO,SAAS,CAAC,UAAA,GAAG;QAClB,yBAAO,aAAa,eACN,GAAG,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,SAAS,mBAAC,aAA+B,EAAC,CAAC,EAA3D,CAA2D,CAAC,EAClF,IAAI,CACD,IAAI,CACA,UAAC,GAAmB,EAAE,IAAsB;;YAC1C,IAAI,SAAS,GAAG,KAAK,CAAC;YACtB,OAAO,IAAI,CAAC,MAAM,CAAC,UAAC,QAAQ,EAAE,GAAG,EAAE,CAAS;gBAC1C,IAAI,QAAQ,KAAK,aAAa;oBAAE,OAAO,QAAQ,CAAC;;gBAGhD,IAAI,GAAG,KAAK,aAAa;oBAAE,SAAS,GAAG,IAAI,CAAC;;;;;gBAM5C,IAAI,CAAC,SAAS,EAAE;;;oBAGd,IAAI,GAAG,KAAK,KAAK;wBAAE,OAAO,GAAG,CAAC;oBAE9B,IAAI,CAAC,KAAK,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,SAAS,CAAC,GAAG,CAAC,EAAE;wBAC3C,OAAO,GAAG,CAAC;qBACZ;iBACF;gBAED,OAAO,QAAQ,CAAC;aACjB,EAAE,GAAG,CAAC,CAAC;SACT,EACD,aAAa,CAAC,EAClB,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,KAAK,aAAa,EAAtB,CAAsB,CAAC,EACtC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,KAAK,IAAI,EAAtC,CAAsC,CAAC,EAAG,EAAE;;QACxD,IAAI,CAAC,CAAC,CAAC,CAAgC,EAAC;KACjD,CAAC,CAAC;CACJ","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, OperatorFunction, combineLatest} from 'rxjs';\nimport {filter, map, scan, startWith, switchMap, take} from 'rxjs/operators';\n\nimport {UrlTree} from '../url_tree';\nimport {isUrlTree} from '../utils/type_guards';\n\nconst INITIAL_VALUE = Symbol('INITIAL_VALUE');\ndeclare type INTERIM_VALUES = typeof INITIAL_VALUE | boolean | UrlTree;\n\nexport function prioritizedGuardValue():\n    OperatorFunction<Observable<boolean|UrlTree>[], boolean|UrlTree> {\n  return switchMap(obs => {\n    return combineLatest(\n               ...obs.map(o => o.pipe(take(1), startWith(INITIAL_VALUE as INTERIM_VALUES))))\n        .pipe(\n            scan(\n                (acc: INTERIM_VALUES, list: INTERIM_VALUES[]) => {\n                  let isPending = false;\n                  return list.reduce((innerAcc, val, i: number) => {\n                    if (innerAcc !== INITIAL_VALUE) return innerAcc;\n\n                    // Toggle pending flag if any values haven't been set yet\n                    if (val === INITIAL_VALUE) isPending = true;\n\n                    // Any other return values are only valid if we haven't yet hit a pending call.\n                    // This guarantees that in the case of a guard at the bottom of the tree that\n                    // returns a redirect, we will wait for the higher priority guard at the top to\n                    // finish before performing the redirect.\n                    if (!isPending) {\n                      // Early return when we hit a `false` value as that should always cancel\n                      // navigation\n                      if (val === false) return val;\n\n                      if (i === list.length - 1 || isUrlTree(val)) {\n                        return val;\n                      }\n                    }\n\n                    return innerAcc;\n                  }, acc);\n                },\n                INITIAL_VALUE),\n            filter(item => item !== INITIAL_VALUE),\n            map(item => isUrlTree(item) ? item : item === true),  //\n            take(1)) as Observable<boolean|UrlTree>;\n  });\n}\n"]}