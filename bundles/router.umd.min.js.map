{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","../../../packages/router/esm5/src/events.js","../../../packages/router/esm5/src/components/empty_outlet.js","../../../packages/router/esm5/src/shared.js","../../../packages/router/esm5/src/config.js","../../../packages/router/esm5/src/utils/collection.js","../../../packages/router/esm5/src/url_tree.js","../../../packages/router/esm5/src/utils/tree.js","../../../packages/router/esm5/src/router_state.js","../../../packages/router/esm5/src/create_router_state.js","../../../packages/router/esm5/src/create_url_tree.js","../../../packages/router/esm5/src/operators/activate_routes.js","../../../packages/router/esm5/src/apply_redirects.js","../../../packages/router/esm5/src/operators/apply_redirects.js","../../../packages/router/esm5/src/utils/preactivation.js","../../../packages/router/esm5/src/operators/prioritized_guard_value.js","../../../packages/router/esm5/src/operators/check_guards.js","../../../packages/router/esm5/src/recognize.js","../../../packages/router/esm5/src/operators/recognize.js","../../../packages/router/esm5/src/operators/resolve_data.js","../../../packages/router/esm5/src/operators/switch_tap.js","../../../packages/router/esm5/src/route_reuse_strategy.js","../../../packages/router/esm5/src/router_config_loader.js","../../../packages/router/esm5/src/url_handling_strategy.js","../../../packages/router/esm5/src/router.js","../../../packages/router/esm5/src/directives/router_link.js","../../../packages/router/esm5/src/directives/router_link_active.js","../../../packages/router/esm5/src/router_outlet_context.js","../../../packages/router/esm5/src/directives/router_outlet.js","../../../packages/router/esm5/src/router_preloader.js","../../../packages/router/esm5/src/router_scroller.js","../../../packages/router/esm5/src/router_module.js"],"names":["exports","module","factory","require","extendStatics","d","b","__proto__","Array","p","hasOwnProperty","__","this","constructor","Object","create","prototype","assign","t","s","i","n","arguments","length","call","RouterEvent","id","url","NavigationStart","_super","navigationTrigger","restoredState","__extends","toString","NavigationEnd","NavigationCancel","NavigationError","RoutesRecognized","urlAfterRedirects","state","GuardsCheckStart","_this","GuardsCheckEnd","shouldActivate","ResolveStart","ResolveEnd","route","RouteConfigLoadStart","RouteConfigLoadEnd","snapshot","Scroll","anchor","EmptyOutletComponent","name","params","get","has","getAll","v","isArray","defineProperty","ParamsAsMap","keys","NAVIGATION_CANCELING_ERROR","navigationCancelingError","message","defaultUrlMatcher","segments","segmentGroup","parts","split","hasChildren","part","index","segment","posParams","substring","path","LoadedRouterConfig","routes","validateConfig","config","parentPath","validateNode","fullPath","Error","component","children","loadChildren","outlet","PRIMARY_OUTLET","redirectTo","matcher","charAt","pathMatch","getFullPath","currentRoute","standardizeConfig","r","map","c","__assign","shallowEqual","a","k1","k2","key","forEach","map$$1","callback","prop","_angular_core","ɵisPromise","value","containsTree","container","containee","exact","equalQueryParams","queryParams","equalSegmentGroups","equalPath","numberOfChildren","containeePaths","current","slice","containsSegmentGroup","next","UrlTree","root","fragment","_queryParamMap","convertToParamMap","UrlSegmentGroup","UrlSegment","parameters","_parameterMap","fn","res","child","childOutlet","concat","DefaultUrlSerializer","parse","serialize","serializePaths","primary","serializeSegment","children_1","k","push","join","mapChildrenIntoArray","tree","encodeUriQuery","DEFAULT_SERIALIZER","encodeUriString","encodeURIComponent","SEGMENT_RE","QUERY_PARAM_RE","QUERY_PARAM_VALUE_RE","remaining","parseRootSegment","consumeOptional","peekStartsWith","parseChildren","parseQueryParams","parseFragment","decodeURIComponent","parseSegment","capture","parseParens","matchSegments","decode","parseMatrixParams","valueMatch","str","match","matchUrlQueryParamValue","decodedKey","decodeQuery","currentVal","decodedVal","outletName","indexOf","substr","allowPrimary","startsWith","Tree","parent","firstChild","siblings","findPath","_root","pathFromRoot","node","_i","_a","node_1","findNode","unshift","TreeNode","nodeChildrenAsMap","RouterState","emptyQueryParams","rxjs","BehaviorSubject","ActivatedRoute","data","futureSnapshot","enumerable","_routerState","_paramMap","pipe","rxjs_operators","configurable","inheritedParamsDataResolve","paramsInheritanceStrategy","inheritingStartingFrom","parent_1","routeConfig","tslib_1.__assign","curr","ActivatedRouteSnapshot","urlSegment","lastPathIndex","resolve","_lastPathIndex","RouterStateSnapshot","advanceActivatedRoute","currentSnapshot","nextSnapshot","_futureSnapshot","shallowEqualArrays","equalParamsAndUrlSegments","equalUrlParams","createNode","routeReuseStrategy","prevState","shouldReuseRoute","detachedRouteHandle","retrieve","setFutureSnapshotsOfActivatedRoutes","result","createUrlTree","urlTree","commands","nav","Navigation","numberOfDoubleDots","reduce","cmd","cmdIdx","outlets","outlets_1","segmentPath","partIndex","urlPart","isAbsolute","computeNavigation","startingPosition","Position","_urlSegment","g","group","ci","dd","findStartingPosition","oldSegmentGroup","newSegmentGroup","qp","oldSegment","newSegment","replaceSegment","last","toRoot","processChildren","getPath","command","updateSegmentGroup","startIndex","updateSegmentGroupChildren","m","currentCommandIndex","noMatch","pathIndex","commandIndex","currentPathIndex","undefined","compare","prefixedWith","slicedCommands","createNewSegmentGroup","_b","getOutlets","outlets_2","paths","isMatrixParams","stringify","ActivateRoutes","futureState","currState","forwardEvent","parentContexts","futureRoot","futureNode","currNode","contexts","futureChild","childOutletName","deactivateRoutes","parentContext","future","context","getContext","deactivateChildRoutes","deactivateRouteAndItsChildren","shouldDetach","detachAndStoreRouteSubtree","componentRef","detach","deactivateRouteAndOutlet","contexts_1","deactivate","activateRoutes","ActivationEnd","getOrCreateContext","activateChildRoutes","shouldAttach","stored","attachRef","_loadedConfig","parentLoadedConfig","resolver","cmpFactoryResolver","activateWith","NoMatch","AbsoluteRedirect","ApplyRedirects","moduleInjector","configLoader","urlSerializer","ngModule","NgModuleRef","catchError","e","allowRedirects","rootSegmentGroup","noMatchError","rootCandidate","obj","of","waitHead","waitTail","mapped","expandSegmentAgainstRoute","concatAll","first","_","EmptyError","noLeftoversInUrl","getOutlet","matchSegmentAgainstRoute","absoluteRedirect","newTree","lineralizeSegments","mergeMap","newSegments","matched","consumedSegments","lastChild","positionalParamSegments","applyRedirectCommands","rawSegmentGroup","load","injector","cfg","rawSlicedSegments","getChildConfig","routerConfig","childConfig","slicedSegments","containsEmptyPathRedirectsWithNamedOutlets","primarySegmentGroup","routes_2","mergeTrivialChildren","containsEmptyPathRedirects","routes_1","isEmptyPathRedirect","expandChildren","childModule","expandSegment","canLoad","from","injectionToken","guardVal","guard","isCanLoad","isFunction","shouldLoad","createQueryParams","redirectToParams","actualParams","sourceName","updatedSegments","createSegments","redirectToUrlSegment","findOrReturn","actualSegments","actualSegments_1","splice","idx","applyRedirects$$1","apply","CanActivate","CanDeactivate","getToken","token","checks","canActivateChecks","prevChildren","mode","shouldRun","futurePath","getChildRouteGuards","canDeactivateChecks","getRouteGuards","childName","isActivated","INITIAL_VALUE","switchMap","obs","combineLatest","o","take","startWith","scan","acc","list","isPending","innerAcc","val","isUrlTree","filter","source","guards","guardsResult","canDeactivate","canDeactivateObservables","currARS","isCanDeactivate","observable","wrapIntoObservable","currRSS","futureRSS","concatMap","check","fireActivationStart","reverse","guardsMapped","isCanActivateChild","canActivateChild","futureARS","runCanActivateChild","canActivate","defer","isCanActivate","runCanActivateChecks","Recognizer","rootComponentType","relativeLinkResolution","freeze","rootNode","routeState","Observable","inheritParamsAndData","routeNode","routeWithSameOutletName","names","nodes","sort","config_1","processSegmentAgainstRoute","NoMatch$1","last$1","getData","getSourceSegmentGroup","rawSegment","getPathIndexShift","getResolve","split$1","_segmentIndexShift","_sourceSegment","containsEmptyPathMatchesWithNamedOutlets","s_1","primarySegment","getOutlet$1","createChildrenForEmptyPaths","containsEmptyPathMatches","s_2","emptyPathMatch","recognize$$1","serializer","recognize","key_1","getResolver","resolveNode","_resolve","resolvedData","nextResult","DefaultRouteReuseStrategy","store","detachedTree","InjectionToken","RouterConfigLoader","loader","compiler","onLoadStartListener","onLoadEndListener","loadModuleFactory","NgModuleFactory","compileModuleAsync","DefaultUrlHandlingStrategy","merge","Router","rootContexts","location","Subject","malformedUriErrorHandler","defaultMalformedUriErrorHandler","afterPreactivation","defaultRouterHook","console","ɵConsole","ngZone","NgZone","isNgZoneEnabled","resetConfig","currentUrlTree","rawUrlTree","routerState","createEmptyState","transitions","currentRawUrl","extractedUrl","urlHandlingStrategy","extract","rawUrl","extras","reject","promise","Promise","targetSnapshot","currentRouterState","targetRouterState","setupNavigations","completed","errored","urlTransition","navigated","onSameUrlNavigation","shouldProcessUrl","tap","urlUpdateStrategy","skipLocationChange","setBrowserUrl","replaceUrl","EMPTY","transition","getValue","eventsSubject","serializeUrl","routesRecognized","navStart","navigationId","appliedUrlTree","hooks","beforePreactivation","guardsStart","triggerEvent","checkGuards","evt","error","guardsEnd","resetUrlToCurrentUrlTree","navCancel","resolveStart","resolveData","resolveEnd","activate","redirecting","resetStateAndUrl","navigateByUrl","navError","errorHandler","ee","setTransition","initialNavigation","setUpLocationChangeListener","locationSubscription","parseUrl","change","dispose","navigationExtras","relativeTo","preserveQueryParams","queryParamsHandling","preserveFragment","warn","q","removeEmptyProps","processNavigations","navigations","subscribe","lastSuccessfulId","lastNavigation","getTransition","rej","isCurrentPathEqualTo","replaceState","storedState","storedUrl","RouterLink","router","tabIndex","renderer","el","set","isDevMode","onClick","attrBoolValue","preserve","decorators","type","Directive","args","selector","ctorParameters","ElementRef","String","Input","Attribute","propDecorators","HostListener","routerLink","RouterLinkWithHref","locationStrategy","subscription","events","updateTargetUrlAndHref","button","ctrlKey","metaKey","shiftKey","target","_angular_common","HostBinding","href","RouterLinkActive","element","cdr","isActive","routerLinkActiveOptions","ngAfterContentInit","links","changes","update","classes","linksWithHrefs","then","hasActiveLinks","addClass","nativeElement","removeClass","isLinkActive","some","exportAs","ContentChildren","Renderer2","ChangeDetectorRef","descendants","ChildrenOutletContexts","onOutletDeactivated","RouterOutlet","changeDetector","activated","_activatedRoute","onChildOutletCreated","attach","instance","insert","ref","hostView","destroy","activatedRoute","resolveComponentFactory","OutletInjector","childContexts","createComponent","markForCheck","ViewContainerRef","ComponentFactoryResolver","Output","activateEvents","deactivateEvents","notFoundValue","PreloadAllModules","preload","NoPreloading","RouterPreloader","moduleLoader","preloadingStrategy","setUpPreloading","processRoutes","preloadConfig","Injectable","NgModuleFactoryLoader","Compiler","RouterScroller","viewportScroller","options","lastId","lastSource","restoredId","anchorScrolling","scrollPositionRestoration","scrollEventsSubscription","consumeScrollEvents","createScrollEvents","getScrollPosition","scrollToPosition","position","scrollToAnchor","scheduleScrollEvent","routerEvent","ngOnDestroy","routerEventsSubscription","unsubscribe","ROUTER_FORROOT_GUARD","Location","ApplicationRef","setupRouter","deps","UrlSerializer","Injector","ROUTES","ROUTER_CONFIGURATION","UrlHandlingStrategy","Optional","SystemJsNgModuleLoader","provide","useFactory","rootRoute","useClass","useValue","enableTracing","RouterModule","LocationStrategy","SkipSelf","PlatformLocation","provideLocationStrategy","Inject","APP_BASE_HREF","createRouterScroller","ViewportScroller","PreloadingStrategy","useExisting","forChild","providers","provideRoutes","NgModule","ROUTER_DIRECTIVES","entryComponents","provideForRootGuard","opts","flatten","dom_1","_angular_platformBrowser","ɵgetDOM","logGroup","log","logGroupEnd","resultOfPreactivationDone","LOCATION_INITIALIZED","isLegacyDisabled","isLegacyEnabled","initNavigation","routerScroller","bootstrappedComponentRef","components","preloader","ROUTER_INITIALIZER","APP_INITIALIZER","multi","APP_BOOTSTRAP_LISTENER","getAppInitializer","RouterInitializer"],"mappings":"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","file":"/mnt/c/Users/Sarun/dev/angular/dist/packages-dist/router/bundles/router.umd.min.js.map","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\n/** @typedef {?} */\nvar NavigationTrigger;\nexport { NavigationTrigger };\n/**\n * \\@description\n *\n * Base for events the Router goes through, as opposed to events tied to a specific\n * Route. `RouterEvent`s will only be fired one time for any given navigation.\n *\n * Example:\n *\n * ```\n * class MyService {\n *   constructor(public router: Router, logger: Logger) {\n *     router.events.filter(e => e instanceof RouterEvent).subscribe(e => {\n *       logger.log(e.id, e.url);\n *     });\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nvar /**\n * \\@description\n *\n * Base for events the Router goes through, as opposed to events tied to a specific\n * Route. `RouterEvent`s will only be fired one time for any given navigation.\n *\n * Example:\n *\n * ```\n * class MyService {\n *   constructor(public router: Router, logger: Logger) {\n *     router.events.filter(e => e instanceof RouterEvent).subscribe(e => {\n *       logger.log(e.id, e.url);\n *     });\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nRouterEvent = /** @class */ (function () {\n    function RouterEvent(id, url) {\n        this.id = id;\n        this.url = url;\n    }\n    return RouterEvent;\n}());\n/**\n * \\@description\n *\n * Base for events the Router goes through, as opposed to events tied to a specific\n * Route. `RouterEvent`s will only be fired one time for any given navigation.\n *\n * Example:\n *\n * ```\n * class MyService {\n *   constructor(public router: Router, logger: Logger) {\n *     router.events.filter(e => e instanceof RouterEvent).subscribe(e => {\n *       logger.log(e.id, e.url);\n *     });\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nexport { RouterEvent };\nif (false) {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    RouterEvent.prototype.id;\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    RouterEvent.prototype.url;\n}\n/**\n * \\@description\n *\n * Represents an event triggered when a navigation starts.\n *\n * \\@publicApi\n */\nvar /**\n * \\@description\n *\n * Represents an event triggered when a navigation starts.\n *\n * \\@publicApi\n */\nNavigationStart = /** @class */ (function (_super) {\n    tslib_1.__extends(NavigationStart, _super);\n    function NavigationStart(/** @docsNotRequired */\n    id, /** @docsNotRequired */\n    url, /** @docsNotRequired */\n    navigationTrigger, /** @docsNotRequired */\n    restoredState) {\n        if (navigationTrigger === void 0) { navigationTrigger = 'imperative'; }\n        if (restoredState === void 0) { restoredState = null; }\n        var _this = _super.call(this, id, url) || this;\n        _this.navigationTrigger = navigationTrigger;\n        _this.restoredState = restoredState;\n        return _this;\n    }\n    /** @docsNotRequired */\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    NavigationStart.prototype.toString = /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    function () { return \"NavigationStart(id: \" + this.id + \", url: '\" + this.url + \"')\"; };\n    return NavigationStart;\n}(RouterEvent));\n/**\n * \\@description\n *\n * Represents an event triggered when a navigation starts.\n *\n * \\@publicApi\n */\nexport { NavigationStart };\nif (false) {\n    /**\n     * Identifies the trigger of the navigation.\n     *\n     * * 'imperative'--triggered by `router.navigateByUrl` or `router.navigate`.\n     * * 'popstate'--triggered by a popstate event\n     * * 'hashchange'--triggered by a hashchange event\n     * @type {?}\n     */\n    NavigationStart.prototype.navigationTrigger;\n    /**\n     * This contains the navigation id that pushed the history record that the router navigates\n     * back to. This is not null only when the navigation is triggered by a popstate event.\n     *\n     * The router assigns a navigationId to every router transition/navigation. Even when the user\n     * clicks on the back button in the browser, a new navigation id will be created. So from\n     * the perspective of the router, the router never \"goes back\". By using the `restoredState`\n     * and its navigationId, you can implement behavior that differentiates between creating new\n     * states\n     * and popstate events. In the latter case you can restore some remembered state (e.g., scroll\n     * position).\n     * @type {?}\n     */\n    NavigationStart.prototype.restoredState;\n}\n/**\n * \\@description\n *\n * Represents an event triggered when a navigation ends successfully.\n *\n * \\@publicApi\n */\nvar /**\n * \\@description\n *\n * Represents an event triggered when a navigation ends successfully.\n *\n * \\@publicApi\n */\nNavigationEnd = /** @class */ (function (_super) {\n    tslib_1.__extends(NavigationEnd, _super);\n    function NavigationEnd(/** @docsNotRequired */\n    id, /** @docsNotRequired */\n    url, urlAfterRedirects) {\n        var _this = _super.call(this, id, url) || this;\n        _this.urlAfterRedirects = urlAfterRedirects;\n        return _this;\n    }\n    /** @docsNotRequired */\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    NavigationEnd.prototype.toString = /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    function () {\n        return \"NavigationEnd(id: \" + this.id + \", url: '\" + this.url + \"', urlAfterRedirects: '\" + this.urlAfterRedirects + \"')\";\n    };\n    return NavigationEnd;\n}(RouterEvent));\n/**\n * \\@description\n *\n * Represents an event triggered when a navigation ends successfully.\n *\n * \\@publicApi\n */\nexport { NavigationEnd };\nif (false) {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    NavigationEnd.prototype.urlAfterRedirects;\n}\n/**\n * \\@description\n *\n * Represents an event triggered when a navigation is canceled.\n *\n * \\@publicApi\n */\nvar /**\n * \\@description\n *\n * Represents an event triggered when a navigation is canceled.\n *\n * \\@publicApi\n */\nNavigationCancel = /** @class */ (function (_super) {\n    tslib_1.__extends(NavigationCancel, _super);\n    function NavigationCancel(/** @docsNotRequired */\n    id, /** @docsNotRequired */\n    url, reason) {\n        var _this = _super.call(this, id, url) || this;\n        _this.reason = reason;\n        return _this;\n    }\n    /** @docsNotRequired */\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    NavigationCancel.prototype.toString = /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    function () { return \"NavigationCancel(id: \" + this.id + \", url: '\" + this.url + \"')\"; };\n    return NavigationCancel;\n}(RouterEvent));\n/**\n * \\@description\n *\n * Represents an event triggered when a navigation is canceled.\n *\n * \\@publicApi\n */\nexport { NavigationCancel };\nif (false) {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    NavigationCancel.prototype.reason;\n}\n/**\n * \\@description\n *\n * Represents an event triggered when a navigation fails due to an unexpected error.\n *\n * \\@publicApi\n */\nvar /**\n * \\@description\n *\n * Represents an event triggered when a navigation fails due to an unexpected error.\n *\n * \\@publicApi\n */\nNavigationError = /** @class */ (function (_super) {\n    tslib_1.__extends(NavigationError, _super);\n    function NavigationError(/** @docsNotRequired */\n    id, /** @docsNotRequired */\n    url, error) {\n        var _this = _super.call(this, id, url) || this;\n        _this.error = error;\n        return _this;\n    }\n    /** @docsNotRequired */\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    NavigationError.prototype.toString = /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    function () {\n        return \"NavigationError(id: \" + this.id + \", url: '\" + this.url + \"', error: \" + this.error + \")\";\n    };\n    return NavigationError;\n}(RouterEvent));\n/**\n * \\@description\n *\n * Represents an event triggered when a navigation fails due to an unexpected error.\n *\n * \\@publicApi\n */\nexport { NavigationError };\nif (false) {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    NavigationError.prototype.error;\n}\n/**\n * \\@description\n *\n * Represents an event triggered when routes are recognized.\n *\n * \\@publicApi\n */\nvar /**\n * \\@description\n *\n * Represents an event triggered when routes are recognized.\n *\n * \\@publicApi\n */\nRoutesRecognized = /** @class */ (function (_super) {\n    tslib_1.__extends(RoutesRecognized, _super);\n    function RoutesRecognized(/** @docsNotRequired */\n    id, /** @docsNotRequired */\n    url, urlAfterRedirects, state) {\n        var _this = _super.call(this, id, url) || this;\n        _this.urlAfterRedirects = urlAfterRedirects;\n        _this.state = state;\n        return _this;\n    }\n    /** @docsNotRequired */\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    RoutesRecognized.prototype.toString = /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    function () {\n        return \"RoutesRecognized(id: \" + this.id + \", url: '\" + this.url + \"', urlAfterRedirects: '\" + this.urlAfterRedirects + \"', state: \" + this.state + \")\";\n    };\n    return RoutesRecognized;\n}(RouterEvent));\n/**\n * \\@description\n *\n * Represents an event triggered when routes are recognized.\n *\n * \\@publicApi\n */\nexport { RoutesRecognized };\nif (false) {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    RoutesRecognized.prototype.urlAfterRedirects;\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    RoutesRecognized.prototype.state;\n}\n/**\n * \\@description\n *\n * Represents the start of the Guard phase of routing.\n *\n * \\@publicApi\n */\nvar /**\n * \\@description\n *\n * Represents the start of the Guard phase of routing.\n *\n * \\@publicApi\n */\nGuardsCheckStart = /** @class */ (function (_super) {\n    tslib_1.__extends(GuardsCheckStart, _super);\n    function GuardsCheckStart(/** @docsNotRequired */\n    id, /** @docsNotRequired */\n    url, urlAfterRedirects, state) {\n        var _this = _super.call(this, id, url) || this;\n        _this.urlAfterRedirects = urlAfterRedirects;\n        _this.state = state;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    GuardsCheckStart.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        return \"GuardsCheckStart(id: \" + this.id + \", url: '\" + this.url + \"', urlAfterRedirects: '\" + this.urlAfterRedirects + \"', state: \" + this.state + \")\";\n    };\n    return GuardsCheckStart;\n}(RouterEvent));\n/**\n * \\@description\n *\n * Represents the start of the Guard phase of routing.\n *\n * \\@publicApi\n */\nexport { GuardsCheckStart };\nif (false) {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    GuardsCheckStart.prototype.urlAfterRedirects;\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    GuardsCheckStart.prototype.state;\n}\n/**\n * \\@description\n *\n * Represents the end of the Guard phase of routing.\n *\n * \\@publicApi\n */\nvar /**\n * \\@description\n *\n * Represents the end of the Guard phase of routing.\n *\n * \\@publicApi\n */\nGuardsCheckEnd = /** @class */ (function (_super) {\n    tslib_1.__extends(GuardsCheckEnd, _super);\n    function GuardsCheckEnd(/** @docsNotRequired */\n    id, /** @docsNotRequired */\n    url, urlAfterRedirects, state, shouldActivate) {\n        var _this = _super.call(this, id, url) || this;\n        _this.urlAfterRedirects = urlAfterRedirects;\n        _this.state = state;\n        _this.shouldActivate = shouldActivate;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    GuardsCheckEnd.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        return \"GuardsCheckEnd(id: \" + this.id + \", url: '\" + this.url + \"', urlAfterRedirects: '\" + this.urlAfterRedirects + \"', state: \" + this.state + \", shouldActivate: \" + this.shouldActivate + \")\";\n    };\n    return GuardsCheckEnd;\n}(RouterEvent));\n/**\n * \\@description\n *\n * Represents the end of the Guard phase of routing.\n *\n * \\@publicApi\n */\nexport { GuardsCheckEnd };\nif (false) {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    GuardsCheckEnd.prototype.urlAfterRedirects;\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    GuardsCheckEnd.prototype.state;\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    GuardsCheckEnd.prototype.shouldActivate;\n}\n/**\n * \\@description\n *\n * Represents the start of the Resolve phase of routing. The timing of this\n * event may change, thus it's experimental. In the current iteration it will run\n * in the \"resolve\" phase whether there's things to resolve or not. In the future this\n * behavior may change to only run when there are things to be resolved.\n *\n * \\@publicApi\n */\nvar /**\n * \\@description\n *\n * Represents the start of the Resolve phase of routing. The timing of this\n * event may change, thus it's experimental. In the current iteration it will run\n * in the \"resolve\" phase whether there's things to resolve or not. In the future this\n * behavior may change to only run when there are things to be resolved.\n *\n * \\@publicApi\n */\nResolveStart = /** @class */ (function (_super) {\n    tslib_1.__extends(ResolveStart, _super);\n    function ResolveStart(/** @docsNotRequired */\n    id, /** @docsNotRequired */\n    url, urlAfterRedirects, state) {\n        var _this = _super.call(this, id, url) || this;\n        _this.urlAfterRedirects = urlAfterRedirects;\n        _this.state = state;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    ResolveStart.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        return \"ResolveStart(id: \" + this.id + \", url: '\" + this.url + \"', urlAfterRedirects: '\" + this.urlAfterRedirects + \"', state: \" + this.state + \")\";\n    };\n    return ResolveStart;\n}(RouterEvent));\n/**\n * \\@description\n *\n * Represents the start of the Resolve phase of routing. The timing of this\n * event may change, thus it's experimental. In the current iteration it will run\n * in the \"resolve\" phase whether there's things to resolve or not. In the future this\n * behavior may change to only run when there are things to be resolved.\n *\n * \\@publicApi\n */\nexport { ResolveStart };\nif (false) {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    ResolveStart.prototype.urlAfterRedirects;\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    ResolveStart.prototype.state;\n}\n/**\n * \\@description\n *\n * Represents the end of the Resolve phase of routing. See note on\n * `ResolveStart` for use of this experimental API.\n *\n * \\@publicApi\n */\nvar /**\n * \\@description\n *\n * Represents the end of the Resolve phase of routing. See note on\n * `ResolveStart` for use of this experimental API.\n *\n * \\@publicApi\n */\nResolveEnd = /** @class */ (function (_super) {\n    tslib_1.__extends(ResolveEnd, _super);\n    function ResolveEnd(/** @docsNotRequired */\n    id, /** @docsNotRequired */\n    url, urlAfterRedirects, state) {\n        var _this = _super.call(this, id, url) || this;\n        _this.urlAfterRedirects = urlAfterRedirects;\n        _this.state = state;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    ResolveEnd.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        return \"ResolveEnd(id: \" + this.id + \", url: '\" + this.url + \"', urlAfterRedirects: '\" + this.urlAfterRedirects + \"', state: \" + this.state + \")\";\n    };\n    return ResolveEnd;\n}(RouterEvent));\n/**\n * \\@description\n *\n * Represents the end of the Resolve phase of routing. See note on\n * `ResolveStart` for use of this experimental API.\n *\n * \\@publicApi\n */\nexport { ResolveEnd };\nif (false) {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    ResolveEnd.prototype.urlAfterRedirects;\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    ResolveEnd.prototype.state;\n}\n/**\n * \\@description\n *\n * Represents an event triggered before lazy loading a route config.\n *\n * \\@publicApi\n */\nvar /**\n * \\@description\n *\n * Represents an event triggered before lazy loading a route config.\n *\n * \\@publicApi\n */\nRouteConfigLoadStart = /** @class */ (function () {\n    function RouteConfigLoadStart(route) {\n        this.route = route;\n    }\n    /**\n     * @return {?}\n     */\n    RouteConfigLoadStart.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return \"RouteConfigLoadStart(path: \" + this.route.path + \")\"; };\n    return RouteConfigLoadStart;\n}());\n/**\n * \\@description\n *\n * Represents an event triggered before lazy loading a route config.\n *\n * \\@publicApi\n */\nexport { RouteConfigLoadStart };\nif (false) {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    RouteConfigLoadStart.prototype.route;\n}\n/**\n * \\@description\n *\n * Represents an event triggered when a route has been lazy loaded.\n *\n * \\@publicApi\n */\nvar /**\n * \\@description\n *\n * Represents an event triggered when a route has been lazy loaded.\n *\n * \\@publicApi\n */\nRouteConfigLoadEnd = /** @class */ (function () {\n    function RouteConfigLoadEnd(route) {\n        this.route = route;\n    }\n    /**\n     * @return {?}\n     */\n    RouteConfigLoadEnd.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return \"RouteConfigLoadEnd(path: \" + this.route.path + \")\"; };\n    return RouteConfigLoadEnd;\n}());\n/**\n * \\@description\n *\n * Represents an event triggered when a route has been lazy loaded.\n *\n * \\@publicApi\n */\nexport { RouteConfigLoadEnd };\nif (false) {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    RouteConfigLoadEnd.prototype.route;\n}\n/**\n * \\@description\n *\n * Represents the start of end of the Resolve phase of routing. See note on\n * `ChildActivationEnd` for use of this experimental API.\n *\n * \\@publicApi\n */\nvar /**\n * \\@description\n *\n * Represents the start of end of the Resolve phase of routing. See note on\n * `ChildActivationEnd` for use of this experimental API.\n *\n * \\@publicApi\n */\nChildActivationStart = /** @class */ (function () {\n    function ChildActivationStart(snapshot) {\n        this.snapshot = snapshot;\n    }\n    /**\n     * @return {?}\n     */\n    ChildActivationStart.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n        return \"ChildActivationStart(path: '\" + path + \"')\";\n    };\n    return ChildActivationStart;\n}());\n/**\n * \\@description\n *\n * Represents the start of end of the Resolve phase of routing. See note on\n * `ChildActivationEnd` for use of this experimental API.\n *\n * \\@publicApi\n */\nexport { ChildActivationStart };\nif (false) {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    ChildActivationStart.prototype.snapshot;\n}\n/**\n * \\@description\n *\n * Represents the start of end of the Resolve phase of routing. See note on\n * `ChildActivationStart` for use of this experimental API.\n *\n * \\@publicApi\n */\nvar /**\n * \\@description\n *\n * Represents the start of end of the Resolve phase of routing. See note on\n * `ChildActivationStart` for use of this experimental API.\n *\n * \\@publicApi\n */\nChildActivationEnd = /** @class */ (function () {\n    function ChildActivationEnd(snapshot) {\n        this.snapshot = snapshot;\n    }\n    /**\n     * @return {?}\n     */\n    ChildActivationEnd.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n        return \"ChildActivationEnd(path: '\" + path + \"')\";\n    };\n    return ChildActivationEnd;\n}());\n/**\n * \\@description\n *\n * Represents the start of end of the Resolve phase of routing. See note on\n * `ChildActivationStart` for use of this experimental API.\n *\n * \\@publicApi\n */\nexport { ChildActivationEnd };\nif (false) {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    ChildActivationEnd.prototype.snapshot;\n}\n/**\n * \\@description\n *\n * Represents the start of end of the Resolve phase of routing. See note on\n * `ActivationEnd` for use of this experimental API.\n *\n * \\@publicApi\n */\nvar /**\n * \\@description\n *\n * Represents the start of end of the Resolve phase of routing. See note on\n * `ActivationEnd` for use of this experimental API.\n *\n * \\@publicApi\n */\nActivationStart = /** @class */ (function () {\n    function ActivationStart(snapshot) {\n        this.snapshot = snapshot;\n    }\n    /**\n     * @return {?}\n     */\n    ActivationStart.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n        return \"ActivationStart(path: '\" + path + \"')\";\n    };\n    return ActivationStart;\n}());\n/**\n * \\@description\n *\n * Represents the start of end of the Resolve phase of routing. See note on\n * `ActivationEnd` for use of this experimental API.\n *\n * \\@publicApi\n */\nexport { ActivationStart };\nif (false) {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    ActivationStart.prototype.snapshot;\n}\n/**\n * \\@description\n *\n * Represents the start of end of the Resolve phase of routing. See note on\n * `ActivationStart` for use of this experimental API.\n *\n * \\@publicApi\n */\nvar /**\n * \\@description\n *\n * Represents the start of end of the Resolve phase of routing. See note on\n * `ActivationStart` for use of this experimental API.\n *\n * \\@publicApi\n */\nActivationEnd = /** @class */ (function () {\n    function ActivationEnd(snapshot) {\n        this.snapshot = snapshot;\n    }\n    /**\n     * @return {?}\n     */\n    ActivationEnd.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n        return \"ActivationEnd(path: '\" + path + \"')\";\n    };\n    return ActivationEnd;\n}());\n/**\n * \\@description\n *\n * Represents the start of end of the Resolve phase of routing. See note on\n * `ActivationStart` for use of this experimental API.\n *\n * \\@publicApi\n */\nexport { ActivationEnd };\nif (false) {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    ActivationEnd.prototype.snapshot;\n}\n/**\n * \\@description\n *\n * Represents a scrolling event.\n *\n * \\@publicApi\n */\nvar /**\n * \\@description\n *\n * Represents a scrolling event.\n *\n * \\@publicApi\n */\nScroll = /** @class */ (function () {\n    function Scroll(/** @docsNotRequired */\n    routerEvent, /** @docsNotRequired */\n    position, /** @docsNotRequired */\n    anchor) {\n        this.routerEvent = routerEvent;\n        this.position = position;\n        this.anchor = anchor;\n    }\n    /**\n     * @return {?}\n     */\n    Scroll.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var pos = this.position ? this.position[0] + \", \" + this.position[1] : null;\n        return \"Scroll(anchor: '\" + this.anchor + \"', position: '\" + pos + \"')\";\n    };\n    return Scroll;\n}());\n/**\n * \\@description\n *\n * Represents a scrolling event.\n *\n * \\@publicApi\n */\nexport { Scroll };\nif (false) {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    Scroll.prototype.routerEvent;\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    Scroll.prototype.position;\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    Scroll.prototype.anchor;\n}\n/** @typedef {?} */\nvar Event;\nexport { Event };\n//# sourceMappingURL=events.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Component } from '@angular/core';\n/**\n * This component is used internally within the router to be a placeholder when an empty\n * router-outlet is needed. For example, with a config such as:\n *\n * `{path: 'parent', outlet: 'nav', children: [...]}`\n *\n * In order to render, there needs to be a component on this config, which will default\n * to this `EmptyOutletComponent`.\n */\nvar EmptyOutletComponent = /** @class */ (function () {\n    function EmptyOutletComponent() {\n    }\n    EmptyOutletComponent.decorators = [\n        { type: Component, args: [{ template: \"<router-outlet></router-outlet>\" },] },\n    ];\n    return EmptyOutletComponent;\n}());\nexport { EmptyOutletComponent };\n//# sourceMappingURL=empty_outlet.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** *\n * \\@description\n *\n * Name of the primary outlet.\n *\n * \\@publicApi\n  @type {?} */\nexport var PRIMARY_OUTLET = 'primary';\n/** @typedef {?} */\nvar Params;\nexport { Params };\n/**\n * Matrix and Query parameters.\n *\n * `ParamMap` makes it easier to work with parameters as they could have either a single value or\n * multiple value. Because this should be known by the user, calling `get` or `getAll` returns the\n * correct type (either `string` or `string[]`).\n *\n * The API is inspired by the URLSearchParams interface.\n * see https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\n *\n * \\@publicApi\n * @record\n */\nexport function ParamMap() { }\n/** @type {?} */\nParamMap.prototype.has;\n/**\n * Return a single value for the given parameter name:\n * - the value when the parameter has a single value,\n * - the first value if the parameter has multiple values,\n * - `null` when there is no such parameter.\n * @type {?}\n */\nParamMap.prototype.get;\n/**\n * Return an array of values for the given parameter name.\n *\n * If there is no such parameter, an empty array is returned.\n * @type {?}\n */\nParamMap.prototype.getAll;\n/**\n * Name of the parameters\n * @type {?}\n */\nParamMap.prototype.keys;\nvar ParamsAsMap = /** @class */ (function () {\n    function ParamsAsMap(params) {\n        this.params = params || {};\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    ParamsAsMap.prototype.has = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return this.params.hasOwnProperty(name); };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    ParamsAsMap.prototype.get = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        if (this.has(name)) {\n            /** @type {?} */\n            var v = this.params[name];\n            return Array.isArray(v) ? v[0] : v;\n        }\n        return null;\n    };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    ParamsAsMap.prototype.getAll = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        if (this.has(name)) {\n            /** @type {?} */\n            var v = this.params[name];\n            return Array.isArray(v) ? v : [v];\n        }\n        return [];\n    };\n    Object.defineProperty(ParamsAsMap.prototype, \"keys\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return Object.keys(this.params); },\n        enumerable: true,\n        configurable: true\n    });\n    return ParamsAsMap;\n}());\nif (false) {\n    /** @type {?} */\n    ParamsAsMap.prototype.params;\n}\n/**\n * Convert a `Params` instance to a `ParamMap`.\n *\n * \\@publicApi\n * @param {?} params\n * @return {?}\n */\nexport function convertToParamMap(params) {\n    return new ParamsAsMap(params);\n}\n/** @type {?} */\nvar NAVIGATION_CANCELING_ERROR = 'ngNavigationCancelingError';\n/**\n * @param {?} message\n * @return {?}\n */\nexport function navigationCancelingError(message) {\n    /** @type {?} */\n    var error = Error('NavigationCancelingError: ' + message);\n    (/** @type {?} */ (error))[NAVIGATION_CANCELING_ERROR] = true;\n    return error;\n}\n/**\n * @param {?} error\n * @return {?}\n */\nexport function isNavigationCancelingError(error) {\n    return error && (/** @type {?} */ (error))[NAVIGATION_CANCELING_ERROR];\n}\n/**\n * @param {?} segments\n * @param {?} segmentGroup\n * @param {?} route\n * @return {?}\n */\nexport function defaultUrlMatcher(segments, segmentGroup, route) {\n    /** @type {?} */\n    var parts = /** @type {?} */ ((route.path)).split('/');\n    if (parts.length > segments.length) {\n        // The actual URL is shorter than the config, no match\n        return null;\n    }\n    if (route.pathMatch === 'full' &&\n        (segmentGroup.hasChildren() || parts.length < segments.length)) {\n        // The config is longer than the actual URL but we are looking for a full match, return null\n        return null;\n    }\n    /** @type {?} */\n    var posParams = {};\n    // Check each config part against the actual URL\n    for (var index = 0; index < parts.length; index++) {\n        /** @type {?} */\n        var part = parts[index];\n        /** @type {?} */\n        var segment = segments[index];\n        /** @type {?} */\n        var isParameter = part.startsWith(':');\n        if (isParameter) {\n            posParams[part.substring(1)] = segment;\n        }\n        else if (part !== segment.path) {\n            // The actual URL part does not match the config, no match\n            return null;\n        }\n    }\n    return { consumed: segments.slice(0, parts.length), posParams: posParams };\n}\n//# sourceMappingURL=shared.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { EmptyOutletComponent } from './components/empty_outlet';\nimport { PRIMARY_OUTLET } from './shared';\n/** @typedef {?} */\nvar Routes;\nexport { Routes };\n/** @typedef {?} */\nvar UrlMatchResult;\nexport { UrlMatchResult };\n/** @typedef {?} */\nvar UrlMatcher;\nexport { UrlMatcher };\n/** @typedef {?} */\nvar Data;\nexport { Data };\n/** @typedef {?} */\nvar ResolveData;\nexport { ResolveData };\n/** @typedef {?} */\nvar LoadChildrenCallback;\nexport { LoadChildrenCallback };\n/** @typedef {?} */\nvar LoadChildren;\nexport { LoadChildren };\n/** @typedef {?} */\nvar QueryParamsHandling;\nexport { QueryParamsHandling };\n/** @typedef {?} */\nvar RunGuardsAndResolvers;\nexport { RunGuardsAndResolvers };\n/**\n * See `Routes` for more details.\n *\n * \\@publicApi\n * @record\n */\nexport function Route() { }\n/** @type {?|undefined} */\nRoute.prototype.path;\n/** @type {?|undefined} */\nRoute.prototype.pathMatch;\n/** @type {?|undefined} */\nRoute.prototype.matcher;\n/** @type {?|undefined} */\nRoute.prototype.component;\n/** @type {?|undefined} */\nRoute.prototype.redirectTo;\n/** @type {?|undefined} */\nRoute.prototype.outlet;\n/** @type {?|undefined} */\nRoute.prototype.canActivate;\n/** @type {?|undefined} */\nRoute.prototype.canActivateChild;\n/** @type {?|undefined} */\nRoute.prototype.canDeactivate;\n/** @type {?|undefined} */\nRoute.prototype.canLoad;\n/** @type {?|undefined} */\nRoute.prototype.data;\n/** @type {?|undefined} */\nRoute.prototype.resolve;\n/** @type {?|undefined} */\nRoute.prototype.children;\n/** @type {?|undefined} */\nRoute.prototype.loadChildren;\n/** @type {?|undefined} */\nRoute.prototype.runGuardsAndResolvers;\n/**\n * Filled for routes with `loadChildren` once the module has been loaded\n * \\@internal\n * @type {?|undefined}\n */\nRoute.prototype._loadedConfig;\nvar LoadedRouterConfig = /** @class */ (function () {\n    function LoadedRouterConfig(routes, module) {\n        this.routes = routes;\n        this.module = module;\n    }\n    return LoadedRouterConfig;\n}());\nexport { LoadedRouterConfig };\nif (false) {\n    /** @type {?} */\n    LoadedRouterConfig.prototype.routes;\n    /** @type {?} */\n    LoadedRouterConfig.prototype.module;\n}\n/**\n * @param {?} config\n * @param {?=} parentPath\n * @return {?}\n */\nexport function validateConfig(config, parentPath) {\n    if (parentPath === void 0) { parentPath = ''; }\n    // forEach doesn't iterate undefined values\n    for (var i = 0; i < config.length; i++) {\n        /** @type {?} */\n        var route = config[i];\n        /** @type {?} */\n        var fullPath = getFullPath(parentPath, route);\n        validateNode(route, fullPath);\n    }\n}\n/**\n * @param {?} route\n * @param {?} fullPath\n * @return {?}\n */\nfunction validateNode(route, fullPath) {\n    if (!route) {\n        throw new Error(\"\\n      Invalid configuration of route '\" + fullPath + \"': Encountered undefined route.\\n      The reason might be an extra comma.\\n\\n      Example:\\n      const routes: Routes = [\\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\\n        { path: 'detail/:id', component: HeroDetailComponent }\\n      ];\\n    \");\n    }\n    if (Array.isArray(route)) {\n        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': Array cannot be specified\");\n    }\n    if (!route.component && !route.children && !route.loadChildren &&\n        (route.outlet && route.outlet !== PRIMARY_OUTLET)) {\n        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': a componentless route without children or loadChildren cannot have a named outlet set\");\n    }\n    if (route.redirectTo && route.children) {\n        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': redirectTo and children cannot be used together\");\n    }\n    if (route.redirectTo && route.loadChildren) {\n        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': redirectTo and loadChildren cannot be used together\");\n    }\n    if (route.children && route.loadChildren) {\n        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': children and loadChildren cannot be used together\");\n    }\n    if (route.redirectTo && route.component) {\n        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': redirectTo and component cannot be used together\");\n    }\n    if (route.path && route.matcher) {\n        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': path and matcher cannot be used together\");\n    }\n    if (route.redirectTo === void 0 && !route.component && !route.children && !route.loadChildren) {\n        throw new Error(\"Invalid configuration of route '\" + fullPath + \"'. One of the following must be provided: component, redirectTo, children or loadChildren\");\n    }\n    if (route.path === void 0 && route.matcher === void 0) {\n        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': routes must have either a path or a matcher specified\");\n    }\n    if (typeof route.path === 'string' && route.path.charAt(0) === '/') {\n        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': path cannot start with a slash\");\n    }\n    if (route.path === '' && route.redirectTo !== void 0 && route.pathMatch === void 0) {\n        /** @type {?} */\n        var exp = \"The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.\";\n        throw new Error(\"Invalid configuration of route '{path: \\\"\" + fullPath + \"\\\", redirectTo: \\\"\" + route.redirectTo + \"\\\"}': please provide 'pathMatch'. \" + exp);\n    }\n    if (route.pathMatch !== void 0 && route.pathMatch !== 'full' && route.pathMatch !== 'prefix') {\n        throw new Error(\"Invalid configuration of route '\" + fullPath + \"': pathMatch can only be set to 'prefix' or 'full'\");\n    }\n    if (route.children) {\n        validateConfig(route.children, fullPath);\n    }\n}\n/**\n * @param {?} parentPath\n * @param {?} currentRoute\n * @return {?}\n */\nfunction getFullPath(parentPath, currentRoute) {\n    if (!currentRoute) {\n        return parentPath;\n    }\n    if (!parentPath && !currentRoute.path) {\n        return '';\n    }\n    else if (parentPath && !currentRoute.path) {\n        return parentPath + \"/\";\n    }\n    else if (!parentPath && currentRoute.path) {\n        return currentRoute.path;\n    }\n    else {\n        return parentPath + \"/\" + currentRoute.path;\n    }\n}\n/**\n * Makes a copy of the config and adds any default required properties.\n * @param {?} r\n * @return {?}\n */\nexport function standardizeConfig(r) {\n    /** @type {?} */\n    var children = r.children && r.children.map(standardizeConfig);\n    /** @type {?} */\n    var c = children ? tslib_1.__assign({}, r, { children: children }) : tslib_1.__assign({}, r);\n    if (!c.component && (children || c.loadChildren) && (c.outlet && c.outlet !== PRIMARY_OUTLET)) {\n        c.component = EmptyOutletComponent;\n    }\n    return c;\n}\n//# sourceMappingURL=config.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ɵisObservable as isObservable, ɵisPromise as isPromise } from '@angular/core';\nimport { from, of } from 'rxjs';\nimport { concatAll, last as lastValue, map } from 'rxjs/operators';\nimport { PRIMARY_OUTLET } from '../shared';\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function shallowEqualArrays(a, b) {\n    if (a.length !== b.length)\n        return false;\n    for (var i = 0; i < a.length; ++i) {\n        if (!shallowEqual(a[i], b[i]))\n            return false;\n    }\n    return true;\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function shallowEqual(a, b) {\n    /** @type {?} */\n    var k1 = Object.keys(a);\n    /** @type {?} */\n    var k2 = Object.keys(b);\n    if (k1.length != k2.length) {\n        return false;\n    }\n    /** @type {?} */\n    var key;\n    for (var i = 0; i < k1.length; i++) {\n        key = k1[i];\n        if (a[key] !== b[key]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Flattens single-level nested arrays.\n * @template T\n * @param {?} arr\n * @return {?}\n */\nexport function flatten(arr) {\n    return Array.prototype.concat.apply([], arr);\n}\n/**\n * Return the last element of an array.\n * @template T\n * @param {?} a\n * @return {?}\n */\nexport function last(a) {\n    return a.length > 0 ? a[a.length - 1] : null;\n}\n/**\n * Verifys all booleans in an array are `true`.\n * @param {?} bools\n * @return {?}\n */\nexport function and(bools) {\n    return !bools.some(function (v) { return !v; });\n}\n/**\n * @template K, V\n * @param {?} map\n * @param {?} callback\n * @return {?}\n */\nexport function forEach(map, callback) {\n    for (var prop in map) {\n        if (map.hasOwnProperty(prop)) {\n            callback(map[prop], prop);\n        }\n    }\n}\n/**\n * @template A, B\n * @param {?} obj\n * @param {?} fn\n * @return {?}\n */\nexport function waitForMap(obj, fn) {\n    if (Object.keys(obj).length === 0) {\n        return of({});\n    }\n    /** @type {?} */\n    var waitHead = [];\n    /** @type {?} */\n    var waitTail = [];\n    /** @type {?} */\n    var res = {};\n    forEach(obj, function (a, k) {\n        /** @type {?} */\n        var mapped = fn(k, a).pipe(map(function (r) { return res[k] = r; }));\n        if (k === PRIMARY_OUTLET) {\n            waitHead.push(mapped);\n        }\n        else {\n            waitTail.push(mapped);\n        }\n    });\n    // Closure compiler has problem with using spread operator here. So just using Array.concat.\n    return of.apply(null, waitHead.concat(waitTail)).pipe(concatAll(), lastValue(), map(function () { return res; }));\n}\n/**\n * @template T\n * @param {?} value\n * @return {?}\n */\nexport function wrapIntoObservable(value) {\n    if (isObservable(value)) {\n        return value;\n    }\n    if (isPromise(value)) {\n        // Use `Promise.resolve()` to wrap promise-like instances.\n        // Required ie when a Resolver returns a AngularJS `$q` promise to correctly trigger the\n        // change detection.\n        return from(Promise.resolve(value));\n    }\n    return of(value);\n}\n//# sourceMappingURL=collection.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { PRIMARY_OUTLET, convertToParamMap } from './shared';\nimport { forEach, shallowEqual } from './utils/collection';\n/**\n * @return {?}\n */\nexport function createEmptyUrlTree() {\n    return new UrlTree(new UrlSegmentGroup([], {}), {}, null);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @param {?} exact\n * @return {?}\n */\nexport function containsTree(container, containee, exact) {\n    if (exact) {\n        return equalQueryParams(container.queryParams, containee.queryParams) &&\n            equalSegmentGroups(container.root, containee.root);\n    }\n    return containsQueryParams(container.queryParams, containee.queryParams) &&\n        containsSegmentGroup(container.root, containee.root);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction equalQueryParams(container, containee) {\n    // TODO: This does not handle array params correctly.\n    return shallowEqual(container, containee);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction equalSegmentGroups(container, containee) {\n    if (!equalPath(container.segments, containee.segments))\n        return false;\n    if (container.numberOfChildren !== containee.numberOfChildren)\n        return false;\n    for (var c in containee.children) {\n        if (!container.children[c])\n            return false;\n        if (!equalSegmentGroups(container.children[c], containee.children[c]))\n            return false;\n    }\n    return true;\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction containsQueryParams(container, containee) {\n    // TODO: This does not handle array params correctly.\n    return Object.keys(containee).length <= Object.keys(container).length &&\n        Object.keys(containee).every(function (key) { return containee[key] === container[key]; });\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction containsSegmentGroup(container, containee) {\n    return containsSegmentGroupHelper(container, containee, containee.segments);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @param {?} containeePaths\n * @return {?}\n */\nfunction containsSegmentGroupHelper(container, containee, containeePaths) {\n    if (container.segments.length > containeePaths.length) {\n        /** @type {?} */\n        var current = container.segments.slice(0, containeePaths.length);\n        if (!equalPath(current, containeePaths))\n            return false;\n        if (containee.hasChildren())\n            return false;\n        return true;\n    }\n    else if (container.segments.length === containeePaths.length) {\n        if (!equalPath(container.segments, containeePaths))\n            return false;\n        for (var c in containee.children) {\n            if (!container.children[c])\n                return false;\n            if (!containsSegmentGroup(container.children[c], containee.children[c]))\n                return false;\n        }\n        return true;\n    }\n    else {\n        /** @type {?} */\n        var current = containeePaths.slice(0, container.segments.length);\n        /** @type {?} */\n        var next = containeePaths.slice(container.segments.length);\n        if (!equalPath(container.segments, current))\n            return false;\n        if (!container.children[PRIMARY_OUTLET])\n            return false;\n        return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next);\n    }\n}\n/**\n * \\@description\n *\n * Represents the parsed URL.\n *\n * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a\n * serialized tree.\n * UrlTree is a data structure that provides a lot of affordances in dealing with URLs\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree =\n *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');\n *     const f = tree.fragment; // return 'fragment'\n *     const q = tree.queryParams; // returns {debug: 'true'}\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'\n *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'\n *     g.children['support'].segments; // return 1 segment 'help'\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nvar /**\n * \\@description\n *\n * Represents the parsed URL.\n *\n * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a\n * serialized tree.\n * UrlTree is a data structure that provides a lot of affordances in dealing with URLs\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree =\n *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');\n *     const f = tree.fragment; // return 'fragment'\n *     const q = tree.queryParams; // returns {debug: 'true'}\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'\n *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'\n *     g.children['support'].segments; // return 1 segment 'help'\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nUrlTree = /** @class */ (function () {\n    /** @internal */\n    function UrlTree(root, queryParams, fragment) {\n        this.root = root;\n        this.queryParams = queryParams;\n        this.fragment = fragment;\n    }\n    Object.defineProperty(UrlTree.prototype, \"queryParamMap\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            if (!this._queryParamMap) {\n                this._queryParamMap = convertToParamMap(this.queryParams);\n            }\n            return this._queryParamMap;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @docsNotRequired */\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    UrlTree.prototype.toString = /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    function () { return DEFAULT_SERIALIZER.serialize(this); };\n    return UrlTree;\n}());\n/**\n * \\@description\n *\n * Represents the parsed URL.\n *\n * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a\n * serialized tree.\n * UrlTree is a data structure that provides a lot of affordances in dealing with URLs\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree =\n *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');\n *     const f = tree.fragment; // return 'fragment'\n *     const q = tree.queryParams; // returns {debug: 'true'}\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'\n *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'\n *     g.children['support'].segments; // return 1 segment 'help'\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nexport { UrlTree };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    UrlTree.prototype._queryParamMap;\n    /**\n     * The root segment group of the URL tree\n     * @type {?}\n     */\n    UrlTree.prototype.root;\n    /**\n     * The query params of the URL\n     * @type {?}\n     */\n    UrlTree.prototype.queryParams;\n    /**\n     * The fragment of the URL\n     * @type {?}\n     */\n    UrlTree.prototype.fragment;\n}\n/**\n * \\@description\n *\n * Represents the parsed URL segment group.\n *\n * See `UrlTree` for more information.\n *\n * \\@publicApi\n */\nvar /**\n * \\@description\n *\n * Represents the parsed URL segment group.\n *\n * See `UrlTree` for more information.\n *\n * \\@publicApi\n */\nUrlSegmentGroup = /** @class */ (function () {\n    function UrlSegmentGroup(segments, children) {\n        var _this = this;\n        this.segments = segments;\n        this.children = children;\n        /**\n         * The parent node in the url tree\n         */\n        this.parent = null;\n        forEach(children, function (v, k) { return v.parent = _this; });\n    }\n    /** Whether the segment has child segments */\n    /**\n     * Whether the segment has child segments\n     * @return {?}\n     */\n    UrlSegmentGroup.prototype.hasChildren = /**\n     * Whether the segment has child segments\n     * @return {?}\n     */\n    function () { return this.numberOfChildren > 0; };\n    Object.defineProperty(UrlSegmentGroup.prototype, \"numberOfChildren\", {\n        /** Number of child segments */\n        get: /**\n         * Number of child segments\n         * @return {?}\n         */\n        function () { return Object.keys(this.children).length; },\n        enumerable: true,\n        configurable: true\n    });\n    /** @docsNotRequired */\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    UrlSegmentGroup.prototype.toString = /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    function () { return serializePaths(this); };\n    return UrlSegmentGroup;\n}());\n/**\n * \\@description\n *\n * Represents the parsed URL segment group.\n *\n * See `UrlTree` for more information.\n *\n * \\@publicApi\n */\nexport { UrlSegmentGroup };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    UrlSegmentGroup.prototype._sourceSegment;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    UrlSegmentGroup.prototype._segmentIndexShift;\n    /**\n     * The parent node in the url tree\n     * @type {?}\n     */\n    UrlSegmentGroup.prototype.parent;\n    /**\n     * The URL segments of this group. See `UrlSegment` for more information\n     * @type {?}\n     */\n    UrlSegmentGroup.prototype.segments;\n    /**\n     * The list of children of this group\n     * @type {?}\n     */\n    UrlSegmentGroup.prototype.children;\n}\n/**\n * \\@description\n *\n * Represents a single URL segment.\n *\n * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix\n * parameters associated with the segment.\n *\n * \\@usageNotes\n *  ### Example\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree = router.parseUrl('/team;id=33');\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments;\n *     s[0].path; // returns 'team'\n *     s[0].parameters; // returns {id: 33}\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nvar /**\n * \\@description\n *\n * Represents a single URL segment.\n *\n * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix\n * parameters associated with the segment.\n *\n * \\@usageNotes\n *  ### Example\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree = router.parseUrl('/team;id=33');\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments;\n *     s[0].path; // returns 'team'\n *     s[0].parameters; // returns {id: 33}\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nUrlSegment = /** @class */ (function () {\n    function UrlSegment(path, parameters) {\n        this.path = path;\n        this.parameters = parameters;\n    }\n    Object.defineProperty(UrlSegment.prototype, \"parameterMap\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            if (!this._parameterMap) {\n                this._parameterMap = convertToParamMap(this.parameters);\n            }\n            return this._parameterMap;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @docsNotRequired */\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    UrlSegment.prototype.toString = /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    function () { return serializePath(this); };\n    return UrlSegment;\n}());\n/**\n * \\@description\n *\n * Represents a single URL segment.\n *\n * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix\n * parameters associated with the segment.\n *\n * \\@usageNotes\n *  ### Example\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree = router.parseUrl('/team;id=33');\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments;\n *     s[0].path; // returns 'team'\n *     s[0].parameters; // returns {id: 33}\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nexport { UrlSegment };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    UrlSegment.prototype._parameterMap;\n    /**\n     * The path part of a URL segment\n     * @type {?}\n     */\n    UrlSegment.prototype.path;\n    /**\n     * The matrix parameters associated with a segment\n     * @type {?}\n     */\n    UrlSegment.prototype.parameters;\n}\n/**\n * @param {?} as\n * @param {?} bs\n * @return {?}\n */\nexport function equalSegments(as, bs) {\n    return equalPath(as, bs) && as.every(function (a, i) { return shallowEqual(a.parameters, bs[i].parameters); });\n}\n/**\n * @param {?} as\n * @param {?} bs\n * @return {?}\n */\nexport function equalPath(as, bs) {\n    if (as.length !== bs.length)\n        return false;\n    return as.every(function (a, i) { return a.path === bs[i].path; });\n}\n/**\n * @template T\n * @param {?} segment\n * @param {?} fn\n * @return {?}\n */\nexport function mapChildrenIntoArray(segment, fn) {\n    /** @type {?} */\n    var res = [];\n    forEach(segment.children, function (child, childOutlet) {\n        if (childOutlet === PRIMARY_OUTLET) {\n            res = res.concat(fn(child, childOutlet));\n        }\n    });\n    forEach(segment.children, function (child, childOutlet) {\n        if (childOutlet !== PRIMARY_OUTLET) {\n            res = res.concat(fn(child, childOutlet));\n        }\n    });\n    return res;\n}\n/**\n * \\@description\n *\n * Serializes and deserializes a URL string into a URL tree.\n *\n * The url serialization strategy is customizable. You can\n * make all URLs case insensitive by providing a custom UrlSerializer.\n *\n * See `DefaultUrlSerializer` for an example of a URL serializer.\n *\n * \\@publicApi\n * @abstract\n */\nvar /**\n * \\@description\n *\n * Serializes and deserializes a URL string into a URL tree.\n *\n * The url serialization strategy is customizable. You can\n * make all URLs case insensitive by providing a custom UrlSerializer.\n *\n * See `DefaultUrlSerializer` for an example of a URL serializer.\n *\n * \\@publicApi\n * @abstract\n */\nUrlSerializer = /** @class */ (function () {\n    function UrlSerializer() {\n    }\n    return UrlSerializer;\n}());\n/**\n * \\@description\n *\n * Serializes and deserializes a URL string into a URL tree.\n *\n * The url serialization strategy is customizable. You can\n * make all URLs case insensitive by providing a custom UrlSerializer.\n *\n * See `DefaultUrlSerializer` for an example of a URL serializer.\n *\n * \\@publicApi\n * @abstract\n */\nexport { UrlSerializer };\nif (false) {\n    /**\n     * Parse a url into a `UrlTree`\n     * @abstract\n     * @param {?} url\n     * @return {?}\n     */\n    UrlSerializer.prototype.parse = function (url) { };\n    /**\n     * Converts a `UrlTree` into a url\n     * @abstract\n     * @param {?} tree\n     * @return {?}\n     */\n    UrlSerializer.prototype.serialize = function (tree) { };\n}\n/**\n * \\@description\n *\n * A default implementation of the `UrlSerializer`.\n *\n * Example URLs:\n *\n * ```\n * /inbox/33(popup:compose)\n * /inbox/33;open=true/messages/44\n * ```\n *\n * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the\n * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to\n * specify route specific parameters.\n *\n * \\@publicApi\n */\nvar /**\n * \\@description\n *\n * A default implementation of the `UrlSerializer`.\n *\n * Example URLs:\n *\n * ```\n * /inbox/33(popup:compose)\n * /inbox/33;open=true/messages/44\n * ```\n *\n * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the\n * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to\n * specify route specific parameters.\n *\n * \\@publicApi\n */\nDefaultUrlSerializer = /** @class */ (function () {\n    function DefaultUrlSerializer() {\n    }\n    /** Parses a url into a `UrlTree` */\n    /**\n     * Parses a url into a `UrlTree`\n     * @param {?} url\n     * @return {?}\n     */\n    DefaultUrlSerializer.prototype.parse = /**\n     * Parses a url into a `UrlTree`\n     * @param {?} url\n     * @return {?}\n     */\n    function (url) {\n        /** @type {?} */\n        var p = new UrlParser(url);\n        return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());\n    };\n    /** Converts a `UrlTree` into a url */\n    /**\n     * Converts a `UrlTree` into a url\n     * @param {?} tree\n     * @return {?}\n     */\n    DefaultUrlSerializer.prototype.serialize = /**\n     * Converts a `UrlTree` into a url\n     * @param {?} tree\n     * @return {?}\n     */\n    function (tree) {\n        /** @type {?} */\n        var segment = \"/\" + serializeSegment(tree.root, true);\n        /** @type {?} */\n        var query = serializeQueryParams(tree.queryParams);\n        /** @type {?} */\n        var fragment = typeof tree.fragment === \"string\" ? \"#\" + encodeUriFragment((/** @type {?} */ ((tree.fragment)))) : '';\n        return \"\" + segment + query + fragment;\n    };\n    return DefaultUrlSerializer;\n}());\n/**\n * \\@description\n *\n * A default implementation of the `UrlSerializer`.\n *\n * Example URLs:\n *\n * ```\n * /inbox/33(popup:compose)\n * /inbox/33;open=true/messages/44\n * ```\n *\n * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the\n * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to\n * specify route specific parameters.\n *\n * \\@publicApi\n */\nexport { DefaultUrlSerializer };\n/** @type {?} */\nvar DEFAULT_SERIALIZER = new DefaultUrlSerializer();\n/**\n * @param {?} segment\n * @return {?}\n */\nexport function serializePaths(segment) {\n    return segment.segments.map(function (p) { return serializePath(p); }).join('/');\n}\n/**\n * @param {?} segment\n * @param {?} root\n * @return {?}\n */\nfunction serializeSegment(segment, root) {\n    if (!segment.hasChildren()) {\n        return serializePaths(segment);\n    }\n    if (root) {\n        /** @type {?} */\n        var primary = segment.children[PRIMARY_OUTLET] ?\n            serializeSegment(segment.children[PRIMARY_OUTLET], false) :\n            '';\n        /** @type {?} */\n        var children_1 = [];\n        forEach(segment.children, function (v, k) {\n            if (k !== PRIMARY_OUTLET) {\n                children_1.push(k + \":\" + serializeSegment(v, false));\n            }\n        });\n        return children_1.length > 0 ? primary + \"(\" + children_1.join('//') + \")\" : primary;\n    }\n    else {\n        /** @type {?} */\n        var children = mapChildrenIntoArray(segment, function (v, k) {\n            if (k === PRIMARY_OUTLET) {\n                return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];\n            }\n            return [k + \":\" + serializeSegment(v, false)];\n        });\n        return serializePaths(segment) + \"/(\" + children.join('//') + \")\";\n    }\n}\n/**\n * Encodes a URI string with the default encoding. This function will only ever be called from\n * `encodeUriQuery` or `encodeUriSegment` as it's the base set of encodings to be used. We need\n * a custom encoding because encodeURIComponent is too aggressive and encodes stuff that doesn't\n * have to be encoded per https://url.spec.whatwg.org.\n * @param {?} s\n * @return {?}\n */\nfunction encodeUriString(s) {\n    return encodeURIComponent(s)\n        .replace(/%40/g, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/g, '$')\n        .replace(/%2C/gi, ',');\n}\n/**\n * This function should be used to encode both keys and values in a query string key/value. In\n * the following URL, you need to call encodeUriQuery on \"k\" and \"v\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n * @param {?} s\n * @return {?}\n */\nexport function encodeUriQuery(s) {\n    return encodeUriString(s).replace(/%3B/gi, ';');\n}\n/**\n * This function should be used to encode a URL fragment. In the following URL, you need to call\n * encodeUriFragment on \"f\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n * @param {?} s\n * @return {?}\n */\nexport function encodeUriFragment(s) {\n    return encodeURI(s);\n}\n/**\n * This function should be run on any URI segment as well as the key and value in a key/value\n * pair for matrix params. In the following URL, you need to call encodeUriSegment on \"html\",\n * \"mk\", and \"mv\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n * @param {?} s\n * @return {?}\n */\nexport function encodeUriSegment(s) {\n    return encodeUriString(s).replace(/\\(/g, '%28').replace(/\\)/g, '%29').replace(/%26/gi, '&');\n}\n/**\n * @param {?} s\n * @return {?}\n */\nexport function decode(s) {\n    return decodeURIComponent(s);\n}\n/**\n * @param {?} s\n * @return {?}\n */\nexport function decodeQuery(s) {\n    return decode(s.replace(/\\+/g, '%20'));\n}\n/**\n * @param {?} path\n * @return {?}\n */\nexport function serializePath(path) {\n    return \"\" + encodeUriSegment(path.path) + serializeMatrixParams(path.parameters);\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction serializeMatrixParams(params) {\n    return Object.keys(params)\n        .map(function (key) { return \";\" + encodeUriSegment(key) + \"=\" + encodeUriSegment(params[key]); })\n        .join('');\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction serializeQueryParams(params) {\n    /** @type {?} */\n    var strParams = Object.keys(params).map(function (name) {\n        /** @type {?} */\n        var value = params[name];\n        return Array.isArray(value) ?\n            value.map(function (v) { return encodeUriQuery(name) + \"=\" + encodeUriQuery(v); }).join('&') :\n            encodeUriQuery(name) + \"=\" + encodeUriQuery(value);\n    });\n    return strParams.length ? \"?\" + strParams.join(\"&\") : '';\n}\n/** @type {?} */\nvar SEGMENT_RE = /^[^\\/()?;=#]+/;\n/**\n * @param {?} str\n * @return {?}\n */\nfunction matchSegments(str) {\n    /** @type {?} */\n    var match = str.match(SEGMENT_RE);\n    return match ? match[0] : '';\n}\n/** @type {?} */\nvar QUERY_PARAM_RE = /^[^=?&#]+/;\n/**\n * @param {?} str\n * @return {?}\n */\nfunction matchQueryParams(str) {\n    /** @type {?} */\n    var match = str.match(QUERY_PARAM_RE);\n    return match ? match[0] : '';\n}\n/** @type {?} */\nvar QUERY_PARAM_VALUE_RE = /^[^?&#]+/;\n/**\n * @param {?} str\n * @return {?}\n */\nfunction matchUrlQueryParamValue(str) {\n    /** @type {?} */\n    var match = str.match(QUERY_PARAM_VALUE_RE);\n    return match ? match[0] : '';\n}\nvar UrlParser = /** @class */ (function () {\n    function UrlParser(url) {\n        this.url = url;\n        this.remaining = url;\n    }\n    /**\n     * @return {?}\n     */\n    UrlParser.prototype.parseRootSegment = /**\n     * @return {?}\n     */\n    function () {\n        this.consumeOptional('/');\n        if (this.remaining === '' || this.peekStartsWith('?') || this.peekStartsWith('#')) {\n            return new UrlSegmentGroup([], {});\n        }\n        // The root segment group never has segments\n        return new UrlSegmentGroup([], this.parseChildren());\n    };\n    /**\n     * @return {?}\n     */\n    UrlParser.prototype.parseQueryParams = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var params = {};\n        if (this.consumeOptional('?')) {\n            do {\n                this.parseQueryParam(params);\n            } while (this.consumeOptional('&'));\n        }\n        return params;\n    };\n    /**\n     * @return {?}\n     */\n    UrlParser.prototype.parseFragment = /**\n     * @return {?}\n     */\n    function () {\n        return this.consumeOptional('#') ? decodeURIComponent(this.remaining) : null;\n    };\n    /**\n     * @return {?}\n     */\n    UrlParser.prototype.parseChildren = /**\n     * @return {?}\n     */\n    function () {\n        if (this.remaining === '') {\n            return {};\n        }\n        this.consumeOptional('/');\n        /** @type {?} */\n        var segments = [];\n        if (!this.peekStartsWith('(')) {\n            segments.push(this.parseSegment());\n        }\n        while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {\n            this.capture('/');\n            segments.push(this.parseSegment());\n        }\n        /** @type {?} */\n        var children = {};\n        if (this.peekStartsWith('/(')) {\n            this.capture('/');\n            children = this.parseParens(true);\n        }\n        /** @type {?} */\n        var res = {};\n        if (this.peekStartsWith('(')) {\n            res = this.parseParens(false);\n        }\n        if (segments.length > 0 || Object.keys(children).length > 0) {\n            res[PRIMARY_OUTLET] = new UrlSegmentGroup(segments, children);\n        }\n        return res;\n    };\n    /**\n     * @return {?}\n     */\n    UrlParser.prototype.parseSegment = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var path = matchSegments(this.remaining);\n        if (path === '' && this.peekStartsWith(';')) {\n            throw new Error(\"Empty path url segment cannot have parameters: '\" + this.remaining + \"'.\");\n        }\n        this.capture(path);\n        return new UrlSegment(decode(path), this.parseMatrixParams());\n    };\n    /**\n     * @return {?}\n     */\n    UrlParser.prototype.parseMatrixParams = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var params = {};\n        while (this.consumeOptional(';')) {\n            this.parseParam(params);\n        }\n        return params;\n    };\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n    UrlParser.prototype.parseParam = /**\n     * @param {?} params\n     * @return {?}\n     */\n    function (params) {\n        /** @type {?} */\n        var key = matchSegments(this.remaining);\n        if (!key) {\n            return;\n        }\n        this.capture(key);\n        /** @type {?} */\n        var value = '';\n        if (this.consumeOptional('=')) {\n            /** @type {?} */\n            var valueMatch = matchSegments(this.remaining);\n            if (valueMatch) {\n                value = valueMatch;\n                this.capture(value);\n            }\n        }\n        params[decode(key)] = decode(value);\n    };\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n    UrlParser.prototype.parseQueryParam = /**\n     * @param {?} params\n     * @return {?}\n     */\n    function (params) {\n        /** @type {?} */\n        var key = matchQueryParams(this.remaining);\n        if (!key) {\n            return;\n        }\n        this.capture(key);\n        /** @type {?} */\n        var value = '';\n        if (this.consumeOptional('=')) {\n            /** @type {?} */\n            var valueMatch = matchUrlQueryParamValue(this.remaining);\n            if (valueMatch) {\n                value = valueMatch;\n                this.capture(value);\n            }\n        }\n        /** @type {?} */\n        var decodedKey = decodeQuery(key);\n        /** @type {?} */\n        var decodedVal = decodeQuery(value);\n        if (params.hasOwnProperty(decodedKey)) {\n            /** @type {?} */\n            var currentVal = params[decodedKey];\n            if (!Array.isArray(currentVal)) {\n                currentVal = [currentVal];\n                params[decodedKey] = currentVal;\n            }\n            currentVal.push(decodedVal);\n        }\n        else {\n            // Create a new value\n            params[decodedKey] = decodedVal;\n        }\n    };\n    /**\n     * @param {?} allowPrimary\n     * @return {?}\n     */\n    UrlParser.prototype.parseParens = /**\n     * @param {?} allowPrimary\n     * @return {?}\n     */\n    function (allowPrimary) {\n        /** @type {?} */\n        var segments = {};\n        this.capture('(');\n        while (!this.consumeOptional(')') && this.remaining.length > 0) {\n            /** @type {?} */\n            var path = matchSegments(this.remaining);\n            /** @type {?} */\n            var next = this.remaining[path.length];\n            // if is is not one of these characters, then the segment was unescaped\n            // or the group was not closed\n            if (next !== '/' && next !== ')' && next !== ';') {\n                throw new Error(\"Cannot parse url '\" + this.url + \"'\");\n            }\n            /** @type {?} */\n            var outletName = /** @type {?} */ ((undefined));\n            if (path.indexOf(':') > -1) {\n                outletName = path.substr(0, path.indexOf(':'));\n                this.capture(outletName);\n                this.capture(':');\n            }\n            else if (allowPrimary) {\n                outletName = PRIMARY_OUTLET;\n            }\n            /** @type {?} */\n            var children = this.parseChildren();\n            segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] :\n                new UrlSegmentGroup([], children);\n            this.consumeOptional('//');\n        }\n        return segments;\n    };\n    /**\n     * @param {?} str\n     * @return {?}\n     */\n    UrlParser.prototype.peekStartsWith = /**\n     * @param {?} str\n     * @return {?}\n     */\n    function (str) { return this.remaining.startsWith(str); };\n    /**\n     * @param {?} str\n     * @return {?}\n     */\n    UrlParser.prototype.consumeOptional = /**\n     * @param {?} str\n     * @return {?}\n     */\n    function (str) {\n        if (this.peekStartsWith(str)) {\n            this.remaining = this.remaining.substring(str.length);\n            return true;\n        }\n        return false;\n    };\n    /**\n     * @param {?} str\n     * @return {?}\n     */\n    UrlParser.prototype.capture = /**\n     * @param {?} str\n     * @return {?}\n     */\n    function (str) {\n        if (!this.consumeOptional(str)) {\n            throw new Error(\"Expected \\\"\" + str + \"\\\".\");\n        }\n    };\n    return UrlParser;\n}());\nif (false) {\n    /** @type {?} */\n    UrlParser.prototype.remaining;\n    /** @type {?} */\n    UrlParser.prototype.url;\n}\n//# sourceMappingURL=url_tree.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @template T\n */\nvar /**\n * @template T\n */\nTree = /** @class */ (function () {\n    function Tree(root) {\n        this._root = root;\n    }\n    Object.defineProperty(Tree.prototype, \"root\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._root.value; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @param {?} t\n     * @return {?}\n     */\n    Tree.prototype.parent = /**\n     * \\@internal\n     * @param {?} t\n     * @return {?}\n     */\n    function (t) {\n        /** @type {?} */\n        var p = this.pathFromRoot(t);\n        return p.length > 1 ? p[p.length - 2] : null;\n    };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @param {?} t\n     * @return {?}\n     */\n    Tree.prototype.children = /**\n     * \\@internal\n     * @param {?} t\n     * @return {?}\n     */\n    function (t) {\n        /** @type {?} */\n        var n = findNode(t, this._root);\n        return n ? n.children.map(function (t) { return t.value; }) : [];\n    };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @param {?} t\n     * @return {?}\n     */\n    Tree.prototype.firstChild = /**\n     * \\@internal\n     * @param {?} t\n     * @return {?}\n     */\n    function (t) {\n        /** @type {?} */\n        var n = findNode(t, this._root);\n        return n && n.children.length > 0 ? n.children[0].value : null;\n    };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @param {?} t\n     * @return {?}\n     */\n    Tree.prototype.siblings = /**\n     * \\@internal\n     * @param {?} t\n     * @return {?}\n     */\n    function (t) {\n        /** @type {?} */\n        var p = findPath(t, this._root);\n        if (p.length < 2)\n            return [];\n        /** @type {?} */\n        var c = p[p.length - 2].children.map(function (c) { return c.value; });\n        return c.filter(function (cc) { return cc !== t; });\n    };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @param {?} t\n     * @return {?}\n     */\n    Tree.prototype.pathFromRoot = /**\n     * \\@internal\n     * @param {?} t\n     * @return {?}\n     */\n    function (t) { return findPath(t, this._root).map(function (s) { return s.value; }); };\n    return Tree;\n}());\n/**\n * @template T\n */\nexport { Tree };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    Tree.prototype._root;\n}\n/**\n * @template T\n * @param {?} value\n * @param {?} node\n * @return {?}\n */\nfunction findNode(value, node) {\n    if (value === node.value)\n        return node;\n    for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n        var child = _a[_i];\n        /** @type {?} */\n        var node_1 = findNode(value, child);\n        if (node_1)\n            return node_1;\n    }\n    return null;\n}\n/**\n * @template T\n * @param {?} value\n * @param {?} node\n * @return {?}\n */\nfunction findPath(value, node) {\n    if (value === node.value)\n        return [node];\n    for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n        var child = _a[_i];\n        /** @type {?} */\n        var path = findPath(value, child);\n        if (path.length) {\n            path.unshift(node);\n            return path;\n        }\n    }\n    return [];\n}\n/**\n * @template T\n */\nvar /**\n * @template T\n */\nTreeNode = /** @class */ (function () {\n    function TreeNode(value, children) {\n        this.value = value;\n        this.children = children;\n    }\n    /**\n     * @return {?}\n     */\n    TreeNode.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return \"TreeNode(\" + this.value + \")\"; };\n    return TreeNode;\n}());\n/**\n * @template T\n */\nexport { TreeNode };\nif (false) {\n    /** @type {?} */\n    TreeNode.prototype.value;\n    /** @type {?} */\n    TreeNode.prototype.children;\n}\n/**\n * @template T\n * @param {?} node\n * @return {?}\n */\nexport function nodeChildrenAsMap(node) {\n    /** @type {?} */\n    var map = {};\n    if (node) {\n        node.children.forEach(function (child) { return map[child.value.outlet] = child; });\n    }\n    return map;\n}\n//# sourceMappingURL=tree.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PRIMARY_OUTLET, convertToParamMap } from './shared';\nimport { UrlSegment, equalSegments } from './url_tree';\nimport { shallowEqual, shallowEqualArrays } from './utils/collection';\nimport { Tree, TreeNode } from './utils/tree';\n/**\n * \\@description\n *\n * Represents the state of the router.\n *\n * RouterState is a tree of activated routes. Every node in this tree knows about the \"consumed\" URL\n * segments, the extracted parameters, and the resolved data.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const root: ActivatedRoute = state.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * See `ActivatedRoute` for more information.\n *\n * \\@publicApi\n */\nvar /**\n * \\@description\n *\n * Represents the state of the router.\n *\n * RouterState is a tree of activated routes. Every node in this tree knows about the \"consumed\" URL\n * segments, the extracted parameters, and the resolved data.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const root: ActivatedRoute = state.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * See `ActivatedRoute` for more information.\n *\n * \\@publicApi\n */\nRouterState = /** @class */ (function (_super) {\n    tslib_1.__extends(RouterState, _super);\n    /** @internal */\n    function RouterState(root, snapshot) {\n        var _this = _super.call(this, root) || this;\n        _this.snapshot = snapshot;\n        setRouterState(/** @type {?} */ (_this), root);\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    RouterState.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return this.snapshot.toString(); };\n    return RouterState;\n}(Tree));\n/**\n * \\@description\n *\n * Represents the state of the router.\n *\n * RouterState is a tree of activated routes. Every node in this tree knows about the \"consumed\" URL\n * segments, the extracted parameters, and the resolved data.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const root: ActivatedRoute = state.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * See `ActivatedRoute` for more information.\n *\n * \\@publicApi\n */\nexport { RouterState };\nif (false) {\n    /**\n     * The current snapshot of the router state\n     * @type {?}\n     */\n    RouterState.prototype.snapshot;\n}\n/**\n * @param {?} urlTree\n * @param {?} rootComponent\n * @return {?}\n */\nexport function createEmptyState(urlTree, rootComponent) {\n    /** @type {?} */\n    var snapshot = createEmptyStateSnapshot(urlTree, rootComponent);\n    /** @type {?} */\n    var emptyUrl = new BehaviorSubject([new UrlSegment('', {})]);\n    /** @type {?} */\n    var emptyParams = new BehaviorSubject({});\n    /** @type {?} */\n    var emptyData = new BehaviorSubject({});\n    /** @type {?} */\n    var emptyQueryParams = new BehaviorSubject({});\n    /** @type {?} */\n    var fragment = new BehaviorSubject('');\n    /** @type {?} */\n    var activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);\n    activated.snapshot = snapshot.root;\n    return new RouterState(new TreeNode(activated, []), snapshot);\n}\n/**\n * @param {?} urlTree\n * @param {?} rootComponent\n * @return {?}\n */\nexport function createEmptyStateSnapshot(urlTree, rootComponent) {\n    /** @type {?} */\n    var emptyParams = {};\n    /** @type {?} */\n    var emptyData = {};\n    /** @type {?} */\n    var emptyQueryParams = {};\n    /** @type {?} */\n    var fragment = '';\n    /** @type {?} */\n    var activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, urlTree.root, -1, {});\n    return new RouterStateSnapshot('', new TreeNode(activated, []));\n}\n/**\n * \\@description\n *\n * Contains the information about a route associated with a component loaded in an\n * outlet.  An `ActivatedRoute` can also be used to traverse the router state tree.\n *\n * ```\n * \\@Component({...})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: Observable<string> = route.params.map(p => p.id);\n *     const url: Observable<string> = route.url.map(segments => segments.join(''));\n *     // route.data includes both `data` and `resolve`\n *     const user = route.data.map(d => d.user);\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nvar /**\n * \\@description\n *\n * Contains the information about a route associated with a component loaded in an\n * outlet.  An `ActivatedRoute` can also be used to traverse the router state tree.\n *\n * ```\n * \\@Component({...})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: Observable<string> = route.params.map(p => p.id);\n *     const url: Observable<string> = route.url.map(segments => segments.join(''));\n *     // route.data includes both `data` and `resolve`\n *     const user = route.data.map(d => d.user);\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nActivatedRoute = /** @class */ (function () {\n    /** @internal */\n    function ActivatedRoute(url, params, queryParams, fragment, data, outlet, component, futureSnapshot) {\n        this.url = url;\n        this.params = params;\n        this.queryParams = queryParams;\n        this.fragment = fragment;\n        this.data = data;\n        this.outlet = outlet;\n        this.component = component;\n        this._futureSnapshot = futureSnapshot;\n    }\n    Object.defineProperty(ActivatedRoute.prototype, \"routeConfig\", {\n        /** The configuration used to match this route */\n        get: /**\n         * The configuration used to match this route\n         * @return {?}\n         */\n        function () { return this._futureSnapshot.routeConfig; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRoute.prototype, \"root\", {\n        /** The root of the router state */\n        get: /**\n         * The root of the router state\n         * @return {?}\n         */\n        function () { return this._routerState.root; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRoute.prototype, \"parent\", {\n        /** The parent of this route in the router state tree */\n        get: /**\n         * The parent of this route in the router state tree\n         * @return {?}\n         */\n        function () { return this._routerState.parent(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRoute.prototype, \"firstChild\", {\n        /** The first child of this route in the router state tree */\n        get: /**\n         * The first child of this route in the router state tree\n         * @return {?}\n         */\n        function () { return this._routerState.firstChild(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRoute.prototype, \"children\", {\n        /** The children of this route in the router state tree */\n        get: /**\n         * The children of this route in the router state tree\n         * @return {?}\n         */\n        function () { return this._routerState.children(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRoute.prototype, \"pathFromRoot\", {\n        /** The path from the root of the router state tree to this route */\n        get: /**\n         * The path from the root of the router state tree to this route\n         * @return {?}\n         */\n        function () { return this._routerState.pathFromRoot(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRoute.prototype, \"paramMap\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            if (!this._paramMap) {\n                this._paramMap = this.params.pipe(map(function (p) { return convertToParamMap(p); }));\n            }\n            return this._paramMap;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRoute.prototype, \"queryParamMap\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            if (!this._queryParamMap) {\n                this._queryParamMap =\n                    this.queryParams.pipe(map(function (p) { return convertToParamMap(p); }));\n            }\n            return this._queryParamMap;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ActivatedRoute.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        return this.snapshot ? this.snapshot.toString() : \"Future(\" + this._futureSnapshot + \")\";\n    };\n    return ActivatedRoute;\n}());\n/**\n * \\@description\n *\n * Contains the information about a route associated with a component loaded in an\n * outlet.  An `ActivatedRoute` can also be used to traverse the router state tree.\n *\n * ```\n * \\@Component({...})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: Observable<string> = route.params.map(p => p.id);\n *     const url: Observable<string> = route.url.map(segments => segments.join(''));\n *     // route.data includes both `data` and `resolve`\n *     const user = route.data.map(d => d.user);\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nexport { ActivatedRoute };\nif (false) {\n    /**\n     * The current snapshot of this route\n     * @type {?}\n     */\n    ActivatedRoute.prototype.snapshot;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ActivatedRoute.prototype._futureSnapshot;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ActivatedRoute.prototype._routerState;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ActivatedRoute.prototype._paramMap;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ActivatedRoute.prototype._queryParamMap;\n    /**\n     * An observable of the URL segments matched by this route\n     * @type {?}\n     */\n    ActivatedRoute.prototype.url;\n    /**\n     * An observable of the matrix parameters scoped to this route\n     * @type {?}\n     */\n    ActivatedRoute.prototype.params;\n    /**\n     * An observable of the query parameters shared by all the routes\n     * @type {?}\n     */\n    ActivatedRoute.prototype.queryParams;\n    /**\n     * An observable of the URL fragment shared by all the routes\n     * @type {?}\n     */\n    ActivatedRoute.prototype.fragment;\n    /**\n     * An observable of the static and resolved data of this route.\n     * @type {?}\n     */\n    ActivatedRoute.prototype.data;\n    /**\n     * The outlet name of the route. It's a constant\n     * @type {?}\n     */\n    ActivatedRoute.prototype.outlet;\n    /**\n     * The component of the route. It's a constant\n     * @type {?}\n     */\n    ActivatedRoute.prototype.component;\n}\n/** @typedef {?} */\nvar ParamsInheritanceStrategy;\nexport { ParamsInheritanceStrategy };\n/** @typedef {?} */\nvar Inherited;\nexport { Inherited };\n/**\n * Returns the inherited params, data, and resolve for a given route.\n * By default, this only inherits values up to the nearest path-less or component-less route.\n * \\@internal\n * @param {?} route\n * @param {?=} paramsInheritanceStrategy\n * @return {?}\n */\nexport function inheritedParamsDataResolve(route, paramsInheritanceStrategy) {\n    if (paramsInheritanceStrategy === void 0) { paramsInheritanceStrategy = 'emptyOnly'; }\n    /** @type {?} */\n    var pathFromRoot = route.pathFromRoot;\n    /** @type {?} */\n    var inheritingStartingFrom = 0;\n    if (paramsInheritanceStrategy !== 'always') {\n        inheritingStartingFrom = pathFromRoot.length - 1;\n        while (inheritingStartingFrom >= 1) {\n            /** @type {?} */\n            var current = pathFromRoot[inheritingStartingFrom];\n            /** @type {?} */\n            var parent_1 = pathFromRoot[inheritingStartingFrom - 1];\n            // current route is an empty path => inherits its parent's params and data\n            if (current.routeConfig && current.routeConfig.path === '') {\n                inheritingStartingFrom--;\n                // parent is componentless => current route should inherit its params and data\n            }\n            else if (!parent_1.component) {\n                inheritingStartingFrom--;\n            }\n            else {\n                break;\n            }\n        }\n    }\n    return flattenInherited(pathFromRoot.slice(inheritingStartingFrom));\n}\n/**\n * \\@internal\n * @param {?} pathFromRoot\n * @return {?}\n */\nfunction flattenInherited(pathFromRoot) {\n    return pathFromRoot.reduce(function (res, curr) {\n        /** @type {?} */\n        var params = tslib_1.__assign({}, res.params, curr.params);\n        /** @type {?} */\n        var data = tslib_1.__assign({}, res.data, curr.data);\n        /** @type {?} */\n        var resolve = tslib_1.__assign({}, res.resolve, curr._resolvedData);\n        return { params: params, data: data, resolve: resolve };\n    }, /** @type {?} */ ({ params: {}, data: {}, resolve: {} }));\n}\n/**\n * \\@description\n *\n * Contains the information about a route associated with a component loaded in an\n * outlet at a particular moment in time. ActivatedRouteSnapshot can also be used to\n * traverse the router state tree.\n *\n * ```\n * \\@Component({templateUrl:'./my-component.html'})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: string = route.snapshot.params.id;\n *     const url: string = route.snapshot.url.join('');\n *     const user = route.snapshot.data.user;\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nvar /**\n * \\@description\n *\n * Contains the information about a route associated with a component loaded in an\n * outlet at a particular moment in time. ActivatedRouteSnapshot can also be used to\n * traverse the router state tree.\n *\n * ```\n * \\@Component({templateUrl:'./my-component.html'})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: string = route.snapshot.params.id;\n *     const url: string = route.snapshot.url.join('');\n *     const user = route.snapshot.data.user;\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nActivatedRouteSnapshot = /** @class */ (function () {\n    /** @internal */\n    function ActivatedRouteSnapshot(url, params, queryParams, fragment, data, outlet, component, routeConfig, urlSegment, lastPathIndex, resolve) {\n        this.url = url;\n        this.params = params;\n        this.queryParams = queryParams;\n        this.fragment = fragment;\n        this.data = data;\n        this.outlet = outlet;\n        this.component = component;\n        this.routeConfig = routeConfig;\n        this._urlSegment = urlSegment;\n        this._lastPathIndex = lastPathIndex;\n        this._resolve = resolve;\n    }\n    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"root\", {\n        /** The root of the router state */\n        get: /**\n         * The root of the router state\n         * @return {?}\n         */\n        function () { return this._routerState.root; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"parent\", {\n        /** The parent of this route in the router state tree */\n        get: /**\n         * The parent of this route in the router state tree\n         * @return {?}\n         */\n        function () { return this._routerState.parent(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"firstChild\", {\n        /** The first child of this route in the router state tree */\n        get: /**\n         * The first child of this route in the router state tree\n         * @return {?}\n         */\n        function () { return this._routerState.firstChild(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"children\", {\n        /** The children of this route in the router state tree */\n        get: /**\n         * The children of this route in the router state tree\n         * @return {?}\n         */\n        function () { return this._routerState.children(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"pathFromRoot\", {\n        /** The path from the root of the router state tree to this route */\n        get: /**\n         * The path from the root of the router state tree to this route\n         * @return {?}\n         */\n        function () { return this._routerState.pathFromRoot(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"paramMap\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            if (!this._paramMap) {\n                this._paramMap = convertToParamMap(this.params);\n            }\n            return this._paramMap;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivatedRouteSnapshot.prototype, \"queryParamMap\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            if (!this._queryParamMap) {\n                this._queryParamMap = convertToParamMap(this.queryParams);\n            }\n            return this._queryParamMap;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ActivatedRouteSnapshot.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var url = this.url.map(function (segment) { return segment.toString(); }).join('/');\n        /** @type {?} */\n        var matched = this.routeConfig ? this.routeConfig.path : '';\n        return \"Route(url:'\" + url + \"', path:'\" + matched + \"')\";\n    };\n    return ActivatedRouteSnapshot;\n}());\n/**\n * \\@description\n *\n * Contains the information about a route associated with a component loaded in an\n * outlet at a particular moment in time. ActivatedRouteSnapshot can also be used to\n * traverse the router state tree.\n *\n * ```\n * \\@Component({templateUrl:'./my-component.html'})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: string = route.snapshot.params.id;\n *     const url: string = route.snapshot.url.join('');\n *     const user = route.snapshot.data.user;\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nexport { ActivatedRouteSnapshot };\nif (false) {\n    /**\n     * The configuration used to match this route *\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype.routeConfig;\n    /**\n     * \\@internal *\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype._urlSegment;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype._lastPathIndex;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype._resolve;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype._resolvedData;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype._routerState;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype._paramMap;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype._queryParamMap;\n    /**\n     * The URL segments matched by this route\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype.url;\n    /**\n     * The matrix parameters scoped to this route\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype.params;\n    /**\n     * The query parameters shared by all the routes\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype.queryParams;\n    /**\n     * The URL fragment shared by all the routes\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype.fragment;\n    /**\n     * The static and resolved data of this route\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype.data;\n    /**\n     * The outlet name of the route\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype.outlet;\n    /**\n     * The component of the route\n     * @type {?}\n     */\n    ActivatedRouteSnapshot.prototype.component;\n}\n/**\n * \\@description\n *\n * Represents the state of the router at a moment in time.\n *\n * This is a tree of activated route snapshots. Every node in this tree knows about\n * the \"consumed\" URL segments, the extracted parameters, and the resolved data.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const snapshot: RouterStateSnapshot = state.snapshot;\n *     const root: ActivatedRouteSnapshot = snapshot.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nvar /**\n * \\@description\n *\n * Represents the state of the router at a moment in time.\n *\n * This is a tree of activated route snapshots. Every node in this tree knows about\n * the \"consumed\" URL segments, the extracted parameters, and the resolved data.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const snapshot: RouterStateSnapshot = state.snapshot;\n *     const root: ActivatedRouteSnapshot = snapshot.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nRouterStateSnapshot = /** @class */ (function (_super) {\n    tslib_1.__extends(RouterStateSnapshot, _super);\n    /** @internal */\n    function RouterStateSnapshot(url, root) {\n        var _this = _super.call(this, root) || this;\n        _this.url = url;\n        setRouterState(/** @type {?} */ (_this), root);\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    RouterStateSnapshot.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return serializeNode(this._root); };\n    return RouterStateSnapshot;\n}(Tree));\n/**\n * \\@description\n *\n * Represents the state of the router at a moment in time.\n *\n * This is a tree of activated route snapshots. Every node in this tree knows about\n * the \"consumed\" URL segments, the extracted parameters, and the resolved data.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const snapshot: RouterStateSnapshot = state.snapshot;\n *     const root: ActivatedRouteSnapshot = snapshot.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nexport { RouterStateSnapshot };\nif (false) {\n    /**\n     * The url from which this snapshot was created\n     * @type {?}\n     */\n    RouterStateSnapshot.prototype.url;\n}\n/**\n * @template U, T\n * @param {?} state\n * @param {?} node\n * @return {?}\n */\nfunction setRouterState(state, node) {\n    node.value._routerState = state;\n    node.children.forEach(function (c) { return setRouterState(state, c); });\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction serializeNode(node) {\n    /** @type {?} */\n    var c = node.children.length > 0 ? \" { \" + node.children.map(serializeNode).join(', ') + \" } \" : '';\n    return \"\" + node.value + c;\n}\n/**\n * The expectation is that the activate route is created with the right set of parameters.\n * So we push new values into the observables only when they are not the initial values.\n * And we detect that by checking if the snapshot field is set.\n * @param {?} route\n * @return {?}\n */\nexport function advanceActivatedRoute(route) {\n    if (route.snapshot) {\n        /** @type {?} */\n        var currentSnapshot = route.snapshot;\n        /** @type {?} */\n        var nextSnapshot = route._futureSnapshot;\n        route.snapshot = nextSnapshot;\n        if (!shallowEqual(currentSnapshot.queryParams, nextSnapshot.queryParams)) {\n            (/** @type {?} */ (route.queryParams)).next(nextSnapshot.queryParams);\n        }\n        if (currentSnapshot.fragment !== nextSnapshot.fragment) {\n            (/** @type {?} */ (route.fragment)).next(nextSnapshot.fragment);\n        }\n        if (!shallowEqual(currentSnapshot.params, nextSnapshot.params)) {\n            (/** @type {?} */ (route.params)).next(nextSnapshot.params);\n        }\n        if (!shallowEqualArrays(currentSnapshot.url, nextSnapshot.url)) {\n            (/** @type {?} */ (route.url)).next(nextSnapshot.url);\n        }\n        if (!shallowEqual(currentSnapshot.data, nextSnapshot.data)) {\n            (/** @type {?} */ (route.data)).next(nextSnapshot.data);\n        }\n    }\n    else {\n        route.snapshot = route._futureSnapshot;\n        // this is for resolved data\n        (/** @type {?} */ (route.data)).next(route._futureSnapshot.data);\n    }\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function equalParamsAndUrlSegments(a, b) {\n    /** @type {?} */\n    var equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);\n    /** @type {?} */\n    var parentsMismatch = !a.parent !== !b.parent;\n    return equalUrlParams && !parentsMismatch &&\n        (!a.parent || equalParamsAndUrlSegments(a.parent, /** @type {?} */ ((b.parent))));\n}\n//# sourceMappingURL=router_state.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { BehaviorSubject } from 'rxjs';\nimport { ActivatedRoute, RouterState } from './router_state';\nimport { TreeNode } from './utils/tree';\n/**\n * @param {?} routeReuseStrategy\n * @param {?} curr\n * @param {?} prevState\n * @return {?}\n */\nexport function createRouterState(routeReuseStrategy, curr, prevState) {\n    /** @type {?} */\n    var root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : undefined);\n    return new RouterState(root, curr);\n}\n/**\n * @param {?} routeReuseStrategy\n * @param {?} curr\n * @param {?=} prevState\n * @return {?}\n */\nfunction createNode(routeReuseStrategy, curr, prevState) {\n    // reuse an activated route that is currently displayed on the screen\n    if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {\n        /** @type {?} */\n        var value = prevState.value;\n        value._futureSnapshot = curr.value;\n        /** @type {?} */\n        var children = createOrReuseChildren(routeReuseStrategy, curr, prevState);\n        return new TreeNode(value, children);\n        // retrieve an activated route that is used to be displayed, but is not currently displayed\n    }\n    else {\n        /** @type {?} */\n        var detachedRouteHandle = /** @type {?} */ (routeReuseStrategy.retrieve(curr.value));\n        if (detachedRouteHandle) {\n            /** @type {?} */\n            var tree = detachedRouteHandle.route;\n            setFutureSnapshotsOfActivatedRoutes(curr, tree);\n            return tree;\n        }\n        else {\n            /** @type {?} */\n            var value = createActivatedRoute(curr.value);\n            /** @type {?} */\n            var children = curr.children.map(function (c) { return createNode(routeReuseStrategy, c); });\n            return new TreeNode(value, children);\n        }\n    }\n}\n/**\n * @param {?} curr\n * @param {?} result\n * @return {?}\n */\nfunction setFutureSnapshotsOfActivatedRoutes(curr, result) {\n    if (curr.value.routeConfig !== result.value.routeConfig) {\n        throw new Error('Cannot reattach ActivatedRouteSnapshot created from a different route');\n    }\n    if (curr.children.length !== result.children.length) {\n        throw new Error('Cannot reattach ActivatedRouteSnapshot with a different number of children');\n    }\n    result.value._futureSnapshot = curr.value;\n    for (var i = 0; i < curr.children.length; ++i) {\n        setFutureSnapshotsOfActivatedRoutes(curr.children[i], result.children[i]);\n    }\n}\n/**\n * @param {?} routeReuseStrategy\n * @param {?} curr\n * @param {?} prevState\n * @return {?}\n */\nfunction createOrReuseChildren(routeReuseStrategy, curr, prevState) {\n    return curr.children.map(function (child) {\n        for (var _i = 0, _a = prevState.children; _i < _a.length; _i++) {\n            var p = _a[_i];\n            if (routeReuseStrategy.shouldReuseRoute(p.value.snapshot, child.value)) {\n                return createNode(routeReuseStrategy, child, p);\n            }\n        }\n        return createNode(routeReuseStrategy, child);\n    });\n}\n/**\n * @param {?} c\n * @return {?}\n */\nfunction createActivatedRoute(c) {\n    return new ActivatedRoute(new BehaviorSubject(c.url), new BehaviorSubject(c.params), new BehaviorSubject(c.queryParams), new BehaviorSubject(c.fragment), new BehaviorSubject(c.data), c.outlet, c.component, c);\n}\n//# sourceMappingURL=create_router_state.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { PRIMARY_OUTLET } from './shared';\nimport { UrlSegment, UrlSegmentGroup, UrlTree } from './url_tree';\nimport { forEach, last, shallowEqual } from './utils/collection';\n/**\n * @param {?} route\n * @param {?} urlTree\n * @param {?} commands\n * @param {?} queryParams\n * @param {?} fragment\n * @return {?}\n */\nexport function createUrlTree(route, urlTree, commands, queryParams, fragment) {\n    if (commands.length === 0) {\n        return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);\n    }\n    /** @type {?} */\n    var nav = computeNavigation(commands);\n    if (nav.toRoot()) {\n        return tree(urlTree.root, new UrlSegmentGroup([], {}), urlTree, queryParams, fragment);\n    }\n    /** @type {?} */\n    var startingPosition = findStartingPosition(nav, urlTree, route);\n    /** @type {?} */\n    var segmentGroup = startingPosition.processChildren ?\n        updateSegmentGroupChildren(startingPosition.segmentGroup, startingPosition.index, nav.commands) :\n        updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, nav.commands);\n    return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);\n}\n/**\n * @param {?} command\n * @return {?}\n */\nfunction isMatrixParams(command) {\n    return typeof command === 'object' && command != null && !command.outlets && !command.segmentPath;\n}\n/**\n * @param {?} oldSegmentGroup\n * @param {?} newSegmentGroup\n * @param {?} urlTree\n * @param {?} queryParams\n * @param {?} fragment\n * @return {?}\n */\nfunction tree(oldSegmentGroup, newSegmentGroup, urlTree, queryParams, fragment) {\n    /** @type {?} */\n    var qp = {};\n    if (queryParams) {\n        forEach(queryParams, function (value, name) {\n            qp[name] = Array.isArray(value) ? value.map(function (v) { return \"\" + v; }) : \"\" + value;\n        });\n    }\n    if (urlTree.root === oldSegmentGroup) {\n        return new UrlTree(newSegmentGroup, qp, fragment);\n    }\n    return new UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), qp, fragment);\n}\n/**\n * @param {?} current\n * @param {?} oldSegment\n * @param {?} newSegment\n * @return {?}\n */\nfunction replaceSegment(current, oldSegment, newSegment) {\n    /** @type {?} */\n    var children = {};\n    forEach(current.children, function (c, outletName) {\n        if (c === oldSegment) {\n            children[outletName] = newSegment;\n        }\n        else {\n            children[outletName] = replaceSegment(c, oldSegment, newSegment);\n        }\n    });\n    return new UrlSegmentGroup(current.segments, children);\n}\nvar Navigation = /** @class */ (function () {\n    function Navigation(isAbsolute, numberOfDoubleDots, commands) {\n        this.isAbsolute = isAbsolute;\n        this.numberOfDoubleDots = numberOfDoubleDots;\n        this.commands = commands;\n        if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {\n            throw new Error('Root segment cannot have matrix parameters');\n        }\n        /** @type {?} */\n        var cmdWithOutlet = commands.find(function (c) { return typeof c === 'object' && c != null && c.outlets; });\n        if (cmdWithOutlet && cmdWithOutlet !== last(commands)) {\n            throw new Error('{outlets:{}} has to be the last command');\n        }\n    }\n    /**\n     * @return {?}\n     */\n    Navigation.prototype.toRoot = /**\n     * @return {?}\n     */\n    function () {\n        return this.isAbsolute && this.commands.length === 1 && this.commands[0] == '/';\n    };\n    return Navigation;\n}());\nif (false) {\n    /** @type {?} */\n    Navigation.prototype.isAbsolute;\n    /** @type {?} */\n    Navigation.prototype.numberOfDoubleDots;\n    /** @type {?} */\n    Navigation.prototype.commands;\n}\n/**\n * Transforms commands to a normalized `Navigation`\n * @param {?} commands\n * @return {?}\n */\nfunction computeNavigation(commands) {\n    if ((typeof commands[0] === 'string') && commands.length === 1 && commands[0] === '/') {\n        return new Navigation(true, 0, commands);\n    }\n    /** @type {?} */\n    var numberOfDoubleDots = 0;\n    /** @type {?} */\n    var isAbsolute = false;\n    /** @type {?} */\n    var res = commands.reduce(function (res, cmd, cmdIdx) {\n        if (typeof cmd === 'object' && cmd != null) {\n            if (cmd.outlets) {\n                /** @type {?} */\n                var outlets_1 = {};\n                forEach(cmd.outlets, function (commands, name) {\n                    outlets_1[name] = typeof commands === 'string' ? commands.split('/') : commands;\n                });\n                return res.concat([{ outlets: outlets_1 }]);\n            }\n            if (cmd.segmentPath) {\n                return res.concat([cmd.segmentPath]);\n            }\n        }\n        if (!(typeof cmd === 'string')) {\n            return res.concat([cmd]);\n        }\n        if (cmdIdx === 0) {\n            cmd.split('/').forEach(function (urlPart, partIndex) {\n                if (partIndex == 0 && urlPart === '.') {\n                    // skip './a'\n                }\n                else if (partIndex == 0 && urlPart === '') { //  '/a'\n                    //  '/a'\n                    isAbsolute = true;\n                }\n                else if (urlPart === '..') { //  '../a'\n                    //  '../a'\n                    numberOfDoubleDots++;\n                }\n                else if (urlPart != '') {\n                    res.push(urlPart);\n                }\n            });\n            return res;\n        }\n        return res.concat([cmd]);\n    }, []);\n    return new Navigation(isAbsolute, numberOfDoubleDots, res);\n}\nvar Position = /** @class */ (function () {\n    function Position(segmentGroup, processChildren, index) {\n        this.segmentGroup = segmentGroup;\n        this.processChildren = processChildren;\n        this.index = index;\n    }\n    return Position;\n}());\nif (false) {\n    /** @type {?} */\n    Position.prototype.segmentGroup;\n    /** @type {?} */\n    Position.prototype.processChildren;\n    /** @type {?} */\n    Position.prototype.index;\n}\n/**\n * @param {?} nav\n * @param {?} tree\n * @param {?} route\n * @return {?}\n */\nfunction findStartingPosition(nav, tree, route) {\n    if (nav.isAbsolute) {\n        return new Position(tree.root, true, 0);\n    }\n    if (route.snapshot._lastPathIndex === -1) {\n        return new Position(route.snapshot._urlSegment, true, 0);\n    }\n    /** @type {?} */\n    var modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;\n    /** @type {?} */\n    var index = route.snapshot._lastPathIndex + modifier;\n    return createPositionApplyingDoubleDots(route.snapshot._urlSegment, index, nav.numberOfDoubleDots);\n}\n/**\n * @param {?} group\n * @param {?} index\n * @param {?} numberOfDoubleDots\n * @return {?}\n */\nfunction createPositionApplyingDoubleDots(group, index, numberOfDoubleDots) {\n    /** @type {?} */\n    var g = group;\n    /** @type {?} */\n    var ci = index;\n    /** @type {?} */\n    var dd = numberOfDoubleDots;\n    while (dd > ci) {\n        dd -= ci;\n        g = /** @type {?} */ ((g.parent));\n        if (!g) {\n            throw new Error('Invalid number of \\'../\\'');\n        }\n        ci = g.segments.length;\n    }\n    return new Position(g, false, ci - dd);\n}\n/**\n * @param {?} command\n * @return {?}\n */\nfunction getPath(command) {\n    if (typeof command === 'object' && command != null && command.outlets) {\n        return command.outlets[PRIMARY_OUTLET];\n    }\n    return \"\" + command;\n}\n/**\n * @param {?} commands\n * @return {?}\n */\nfunction getOutlets(commands) {\n    var _a, _b;\n    if (!(typeof commands[0] === 'object'))\n        return _a = {}, _a[PRIMARY_OUTLET] = commands, _a;\n    if (commands[0].outlets === undefined)\n        return _b = {}, _b[PRIMARY_OUTLET] = commands, _b;\n    return commands[0].outlets;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction updateSegmentGroup(segmentGroup, startIndex, commands) {\n    if (!segmentGroup) {\n        segmentGroup = new UrlSegmentGroup([], {});\n    }\n    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n        return updateSegmentGroupChildren(segmentGroup, startIndex, commands);\n    }\n    /** @type {?} */\n    var m = prefixedWith(segmentGroup, startIndex, commands);\n    /** @type {?} */\n    var slicedCommands = commands.slice(m.commandIndex);\n    if (m.match && m.pathIndex < segmentGroup.segments.length) {\n        /** @type {?} */\n        var g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});\n        g.children[PRIMARY_OUTLET] =\n            new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);\n        return updateSegmentGroupChildren(g, 0, slicedCommands);\n    }\n    else if (m.match && slicedCommands.length === 0) {\n        return new UrlSegmentGroup(segmentGroup.segments, {});\n    }\n    else if (m.match && !segmentGroup.hasChildren()) {\n        return createNewSegmentGroup(segmentGroup, startIndex, commands);\n    }\n    else if (m.match) {\n        return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);\n    }\n    else {\n        return createNewSegmentGroup(segmentGroup, startIndex, commands);\n    }\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction updateSegmentGroupChildren(segmentGroup, startIndex, commands) {\n    if (commands.length === 0) {\n        return new UrlSegmentGroup(segmentGroup.segments, {});\n    }\n    else {\n        /** @type {?} */\n        var outlets_2 = getOutlets(commands);\n        /** @type {?} */\n        var children_1 = {};\n        forEach(outlets_2, function (commands, outlet) {\n            if (commands !== null) {\n                children_1[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);\n            }\n        });\n        forEach(segmentGroup.children, function (child, childOutlet) {\n            if (outlets_2[childOutlet] === undefined) {\n                children_1[childOutlet] = child;\n            }\n        });\n        return new UrlSegmentGroup(segmentGroup.segments, children_1);\n    }\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction prefixedWith(segmentGroup, startIndex, commands) {\n    /** @type {?} */\n    var currentCommandIndex = 0;\n    /** @type {?} */\n    var currentPathIndex = startIndex;\n    /** @type {?} */\n    var noMatch = { match: false, pathIndex: 0, commandIndex: 0 };\n    while (currentPathIndex < segmentGroup.segments.length) {\n        if (currentCommandIndex >= commands.length)\n            return noMatch;\n        /** @type {?} */\n        var path = segmentGroup.segments[currentPathIndex];\n        /** @type {?} */\n        var curr = getPath(commands[currentCommandIndex]);\n        /** @type {?} */\n        var next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;\n        if (currentPathIndex > 0 && curr === undefined)\n            break;\n        if (curr && next && (typeof next === 'object') && next.outlets === undefined) {\n            if (!compare(curr, next, path))\n                return noMatch;\n            currentCommandIndex += 2;\n        }\n        else {\n            if (!compare(curr, {}, path))\n                return noMatch;\n            currentCommandIndex++;\n        }\n        currentPathIndex++;\n    }\n    return { match: true, pathIndex: currentPathIndex, commandIndex: currentCommandIndex };\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction createNewSegmentGroup(segmentGroup, startIndex, commands) {\n    /** @type {?} */\n    var paths = segmentGroup.segments.slice(0, startIndex);\n    /** @type {?} */\n    var i = 0;\n    while (i < commands.length) {\n        if (typeof commands[i] === 'object' && commands[i].outlets !== undefined) {\n            /** @type {?} */\n            var children = createNewSegmentChildren(commands[i].outlets);\n            return new UrlSegmentGroup(paths, children);\n        }\n        // if we start with an object literal, we need to reuse the path part from the segment\n        if (i === 0 && isMatrixParams(commands[0])) {\n            /** @type {?} */\n            var p = segmentGroup.segments[startIndex];\n            paths.push(new UrlSegment(p.path, commands[0]));\n            i++;\n            continue;\n        }\n        /** @type {?} */\n        var curr = getPath(commands[i]);\n        /** @type {?} */\n        var next = (i < commands.length - 1) ? commands[i + 1] : null;\n        if (curr && next && isMatrixParams(next)) {\n            paths.push(new UrlSegment(curr, stringify(next)));\n            i += 2;\n        }\n        else {\n            paths.push(new UrlSegment(curr, {}));\n            i++;\n        }\n    }\n    return new UrlSegmentGroup(paths, {});\n}\n/**\n * @param {?} outlets\n * @return {?}\n */\nfunction createNewSegmentChildren(outlets) {\n    /** @type {?} */\n    var children = {};\n    forEach(outlets, function (commands, outlet) {\n        if (commands !== null) {\n            children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);\n        }\n    });\n    return children;\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction stringify(params) {\n    /** @type {?} */\n    var res = {};\n    forEach(params, function (v, k) { return res[k] = \"\" + v; });\n    return res;\n}\n/**\n * @param {?} path\n * @param {?} params\n * @param {?} segment\n * @return {?}\n */\nfunction compare(path, params, segment) {\n    return path == segment.path && shallowEqual(params, segment.parameters);\n}\n//# sourceMappingURL=create_url_tree.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { map } from 'rxjs/operators';\nimport { ActivationEnd, ChildActivationEnd } from '../events';\nimport { advanceActivatedRoute } from '../router_state';\nimport { forEach } from '../utils/collection';\nimport { nodeChildrenAsMap } from '../utils/tree';\n/** @type {?} */\nexport var activateRoutes = function (rootContexts, routeReuseStrategy, forwardEvent) {\n    return map(function (t) {\n        new ActivateRoutes(routeReuseStrategy, /** @type {?} */ ((t.targetRouterState)), t.currentRouterState, forwardEvent)\n            .activate(rootContexts);\n        return t;\n    });\n};\nvar ActivateRoutes = /** @class */ (function () {\n    function ActivateRoutes(routeReuseStrategy, futureState, currState, forwardEvent) {\n        this.routeReuseStrategy = routeReuseStrategy;\n        this.futureState = futureState;\n        this.currState = currState;\n        this.forwardEvent = forwardEvent;\n    }\n    /**\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    ActivateRoutes.prototype.activate = /**\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    function (parentContexts) {\n        /** @type {?} */\n        var futureRoot = this.futureState._root;\n        /** @type {?} */\n        var currRoot = this.currState ? this.currState._root : null;\n        this.deactivateChildRoutes(futureRoot, currRoot, parentContexts);\n        advanceActivatedRoute(this.futureState.root);\n        this.activateChildRoutes(futureRoot, currRoot, parentContexts);\n    };\n    /**\n     * @param {?} futureNode\n     * @param {?} currNode\n     * @param {?} contexts\n     * @return {?}\n     */\n    ActivateRoutes.prototype.deactivateChildRoutes = /**\n     * @param {?} futureNode\n     * @param {?} currNode\n     * @param {?} contexts\n     * @return {?}\n     */\n    function (futureNode, currNode, contexts) {\n        var _this = this;\n        /** @type {?} */\n        var children = nodeChildrenAsMap(currNode);\n        // Recurse on the routes active in the future state to de-activate deeper children\n        futureNode.children.forEach(function (futureChild) {\n            /** @type {?} */\n            var childOutletName = futureChild.value.outlet;\n            _this.deactivateRoutes(futureChild, children[childOutletName], contexts);\n            delete children[childOutletName];\n        });\n        // De-activate the routes that will not be re-used\n        forEach(children, function (v, childName) {\n            _this.deactivateRouteAndItsChildren(v, contexts);\n        });\n    };\n    /**\n     * @param {?} futureNode\n     * @param {?} currNode\n     * @param {?} parentContext\n     * @return {?}\n     */\n    ActivateRoutes.prototype.deactivateRoutes = /**\n     * @param {?} futureNode\n     * @param {?} currNode\n     * @param {?} parentContext\n     * @return {?}\n     */\n    function (futureNode, currNode, parentContext) {\n        /** @type {?} */\n        var future = futureNode.value;\n        /** @type {?} */\n        var curr = currNode ? currNode.value : null;\n        if (future === curr) {\n            // Reusing the node, check to see if the children need to be de-activated\n            if (future.component) {\n                /** @type {?} */\n                var context = parentContext.getContext(future.outlet);\n                if (context) {\n                    this.deactivateChildRoutes(futureNode, currNode, context.children);\n                }\n            }\n            else {\n                // if we have a componentless route, we recurse but keep the same outlet map.\n                this.deactivateChildRoutes(futureNode, currNode, parentContext);\n            }\n        }\n        else {\n            if (curr) {\n                // Deactivate the current route which will not be re-used\n                this.deactivateRouteAndItsChildren(currNode, parentContext);\n            }\n        }\n    };\n    /**\n     * @param {?} route\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    ActivateRoutes.prototype.deactivateRouteAndItsChildren = /**\n     * @param {?} route\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    function (route, parentContexts) {\n        if (this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {\n            this.detachAndStoreRouteSubtree(route, parentContexts);\n        }\n        else {\n            this.deactivateRouteAndOutlet(route, parentContexts);\n        }\n    };\n    /**\n     * @param {?} route\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    ActivateRoutes.prototype.detachAndStoreRouteSubtree = /**\n     * @param {?} route\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    function (route, parentContexts) {\n        /** @type {?} */\n        var context = parentContexts.getContext(route.value.outlet);\n        if (context && context.outlet) {\n            /** @type {?} */\n            var componentRef = context.outlet.detach();\n            /** @type {?} */\n            var contexts = context.children.onOutletDeactivated();\n            this.routeReuseStrategy.store(route.value.snapshot, { componentRef: componentRef, route: route, contexts: contexts });\n        }\n    };\n    /**\n     * @param {?} route\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    ActivateRoutes.prototype.deactivateRouteAndOutlet = /**\n     * @param {?} route\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    function (route, parentContexts) {\n        var _this = this;\n        /** @type {?} */\n        var context = parentContexts.getContext(route.value.outlet);\n        if (context) {\n            /** @type {?} */\n            var children = nodeChildrenAsMap(route);\n            /** @type {?} */\n            var contexts_1 = route.value.component ? context.children : parentContexts;\n            forEach(children, function (v, k) { return _this.deactivateRouteAndItsChildren(v, contexts_1); });\n            if (context.outlet) {\n                // Destroy the component\n                context.outlet.deactivate();\n                // Destroy the contexts for all the outlets that were in the component\n                context.children.onOutletDeactivated();\n            }\n        }\n    };\n    /**\n     * @param {?} futureNode\n     * @param {?} currNode\n     * @param {?} contexts\n     * @return {?}\n     */\n    ActivateRoutes.prototype.activateChildRoutes = /**\n     * @param {?} futureNode\n     * @param {?} currNode\n     * @param {?} contexts\n     * @return {?}\n     */\n    function (futureNode, currNode, contexts) {\n        var _this = this;\n        /** @type {?} */\n        var children = nodeChildrenAsMap(currNode);\n        futureNode.children.forEach(function (c) {\n            _this.activateRoutes(c, children[c.value.outlet], contexts);\n            _this.forwardEvent(new ActivationEnd(c.value.snapshot));\n        });\n        if (futureNode.children.length) {\n            this.forwardEvent(new ChildActivationEnd(futureNode.value.snapshot));\n        }\n    };\n    /**\n     * @param {?} futureNode\n     * @param {?} currNode\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    ActivateRoutes.prototype.activateRoutes = /**\n     * @param {?} futureNode\n     * @param {?} currNode\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    function (futureNode, currNode, parentContexts) {\n        /** @type {?} */\n        var future = futureNode.value;\n        /** @type {?} */\n        var curr = currNode ? currNode.value : null;\n        advanceActivatedRoute(future);\n        // reusing the node\n        if (future === curr) {\n            if (future.component) {\n                /** @type {?} */\n                var context = parentContexts.getOrCreateContext(future.outlet);\n                this.activateChildRoutes(futureNode, currNode, context.children);\n            }\n            else {\n                // if we have a componentless route, we recurse but keep the same outlet map.\n                this.activateChildRoutes(futureNode, currNode, parentContexts);\n            }\n        }\n        else {\n            if (future.component) {\n                /** @type {?} */\n                var context = parentContexts.getOrCreateContext(future.outlet);\n                if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {\n                    /** @type {?} */\n                    var stored = (/** @type {?} */ (this.routeReuseStrategy.retrieve(future.snapshot)));\n                    this.routeReuseStrategy.store(future.snapshot, null);\n                    context.children.onOutletReAttached(stored.contexts);\n                    context.attachRef = stored.componentRef;\n                    context.route = stored.route.value;\n                    if (context.outlet) {\n                        // Attach right away when the outlet has already been instantiated\n                        // Otherwise attach from `RouterOutlet.ngOnInit` when it is instantiated\n                        context.outlet.attach(stored.componentRef, stored.route.value);\n                    }\n                    advanceActivatedRouteNodeAndItsChildren(stored.route);\n                }\n                else {\n                    /** @type {?} */\n                    var config = parentLoadedConfig(future.snapshot);\n                    /** @type {?} */\n                    var cmpFactoryResolver = config ? config.module.componentFactoryResolver : null;\n                    context.attachRef = null;\n                    context.route = future;\n                    context.resolver = cmpFactoryResolver;\n                    if (context.outlet) {\n                        // Activate the outlet when it has already been instantiated\n                        // Otherwise it will get activated from its `ngOnInit` when instantiated\n                        context.outlet.activateWith(future, cmpFactoryResolver);\n                    }\n                    this.activateChildRoutes(futureNode, null, context.children);\n                }\n            }\n            else {\n                // if we have a componentless route, we recurse but keep the same outlet map.\n                this.activateChildRoutes(futureNode, null, parentContexts);\n            }\n        }\n    };\n    return ActivateRoutes;\n}());\nexport { ActivateRoutes };\nif (false) {\n    /** @type {?} */\n    ActivateRoutes.prototype.routeReuseStrategy;\n    /** @type {?} */\n    ActivateRoutes.prototype.futureState;\n    /** @type {?} */\n    ActivateRoutes.prototype.currState;\n    /** @type {?} */\n    ActivateRoutes.prototype.forwardEvent;\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction advanceActivatedRouteNodeAndItsChildren(node) {\n    advanceActivatedRoute(node.value);\n    node.children.forEach(advanceActivatedRouteNodeAndItsChildren);\n}\n/**\n * @param {?} snapshot\n * @return {?}\n */\nfunction parentLoadedConfig(snapshot) {\n    for (var s = snapshot.parent; s; s = s.parent) {\n        /** @type {?} */\n        var route = s.routeConfig;\n        if (route && route._loadedConfig)\n            return route._loadedConfig;\n        if (route && route.component)\n            return null;\n    }\n    return null;\n}\n//# sourceMappingURL=activate_routes.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { NgModuleRef } from '@angular/core';\nimport { EmptyError, Observable, from, of } from 'rxjs';\nimport { catchError, concatAll, every, first, map, mergeMap } from 'rxjs/operators';\nimport { LoadedRouterConfig } from './config';\nimport { PRIMARY_OUTLET, defaultUrlMatcher, navigationCancelingError } from './shared';\nimport { UrlSegmentGroup, UrlTree } from './url_tree';\nimport { forEach, waitForMap, wrapIntoObservable } from './utils/collection';\nimport { isCanLoad, isFunction } from './utils/type_guards';\nvar NoMatch = /** @class */ (function () {\n    function NoMatch(segmentGroup) {\n        this.segmentGroup = segmentGroup || null;\n    }\n    return NoMatch;\n}());\nif (false) {\n    /** @type {?} */\n    NoMatch.prototype.segmentGroup;\n}\nvar AbsoluteRedirect = /** @class */ (function () {\n    function AbsoluteRedirect(urlTree) {\n        this.urlTree = urlTree;\n    }\n    return AbsoluteRedirect;\n}());\nif (false) {\n    /** @type {?} */\n    AbsoluteRedirect.prototype.urlTree;\n}\n/**\n * @param {?} segmentGroup\n * @return {?}\n */\nfunction noMatch(segmentGroup) {\n    return new Observable(function (obs) { return obs.error(new NoMatch(segmentGroup)); });\n}\n/**\n * @param {?} newTree\n * @return {?}\n */\nfunction absoluteRedirect(newTree) {\n    return new Observable(function (obs) { return obs.error(new AbsoluteRedirect(newTree)); });\n}\n/**\n * @param {?} redirectTo\n * @return {?}\n */\nfunction namedOutletsRedirect(redirectTo) {\n    return new Observable(function (obs) { return obs.error(new Error(\"Only absolute redirects can have named outlets. redirectTo: '\" + redirectTo + \"'\")); });\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction canLoadFails(route) {\n    return new Observable(function (obs) { return obs.error(navigationCancelingError(\"Cannot load children because the guard of the route \\\"path: '\" + route.path + \"'\\\" returned false\")); });\n}\n/**\n * Returns the `UrlTree` with the redirection applied.\n *\n * Lazy modules are loaded along the way.\n * @param {?} moduleInjector\n * @param {?} configLoader\n * @param {?} urlSerializer\n * @param {?} urlTree\n * @param {?} config\n * @return {?}\n */\nexport function applyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config) {\n    return new ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config).apply();\n}\nvar ApplyRedirects = /** @class */ (function () {\n    function ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config) {\n        this.configLoader = configLoader;\n        this.urlSerializer = urlSerializer;\n        this.urlTree = urlTree;\n        this.config = config;\n        this.allowRedirects = true;\n        this.ngModule = moduleInjector.get(NgModuleRef);\n    }\n    /**\n     * @return {?}\n     */\n    ApplyRedirects.prototype.apply = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var expanded$ = this.expandSegmentGroup(this.ngModule, this.config, this.urlTree.root, PRIMARY_OUTLET);\n        /** @type {?} */\n        var urlTrees$ = expanded$.pipe(map(function (rootSegmentGroup) { return _this.createUrlTree(rootSegmentGroup, _this.urlTree.queryParams, /** @type {?} */ ((_this.urlTree.fragment))); }));\n        return urlTrees$.pipe(catchError(function (e) {\n            if (e instanceof AbsoluteRedirect) {\n                // after an absolute redirect we do not apply any more redirects!\n                _this.allowRedirects = false;\n                // we need to run matching, so we can fetch all lazy-loaded modules\n                return _this.match(e.urlTree);\n            }\n            if (e instanceof NoMatch) {\n                throw _this.noMatchError(e);\n            }\n            throw e;\n        }));\n    };\n    /**\n     * @param {?} tree\n     * @return {?}\n     */\n    ApplyRedirects.prototype.match = /**\n     * @param {?} tree\n     * @return {?}\n     */\n    function (tree) {\n        var _this = this;\n        /** @type {?} */\n        var expanded$ = this.expandSegmentGroup(this.ngModule, this.config, tree.root, PRIMARY_OUTLET);\n        /** @type {?} */\n        var mapped$ = expanded$.pipe(map(function (rootSegmentGroup) {\n            return _this.createUrlTree(rootSegmentGroup, tree.queryParams, /** @type {?} */ ((tree.fragment)));\n        }));\n        return mapped$.pipe(catchError(function (e) {\n            if (e instanceof NoMatch) {\n                throw _this.noMatchError(e);\n            }\n            throw e;\n        }));\n    };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    ApplyRedirects.prototype.noMatchError = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return new Error(\"Cannot match any routes. URL Segment: '\" + e.segmentGroup + \"'\");\n    };\n    /**\n     * @param {?} rootCandidate\n     * @param {?} queryParams\n     * @param {?} fragment\n     * @return {?}\n     */\n    ApplyRedirects.prototype.createUrlTree = /**\n     * @param {?} rootCandidate\n     * @param {?} queryParams\n     * @param {?} fragment\n     * @return {?}\n     */\n    function (rootCandidate, queryParams, fragment) {\n        var _a;\n        /** @type {?} */\n        var root = rootCandidate.segments.length > 0 ?\n            new UrlSegmentGroup([], (_a = {}, _a[PRIMARY_OUTLET] = rootCandidate, _a)) :\n            rootCandidate;\n        return new UrlTree(root, queryParams, fragment);\n    };\n    /**\n     * @param {?} ngModule\n     * @param {?} routes\n     * @param {?} segmentGroup\n     * @param {?} outlet\n     * @return {?}\n     */\n    ApplyRedirects.prototype.expandSegmentGroup = /**\n     * @param {?} ngModule\n     * @param {?} routes\n     * @param {?} segmentGroup\n     * @param {?} outlet\n     * @return {?}\n     */\n    function (ngModule, routes, segmentGroup, outlet) {\n        if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n            return this.expandChildren(ngModule, routes, segmentGroup)\n                .pipe(map(function (children) { return new UrlSegmentGroup([], children); }));\n        }\n        return this.expandSegment(ngModule, segmentGroup, routes, segmentGroup.segments, outlet, true);\n    };\n    /**\n     * @param {?} ngModule\n     * @param {?} routes\n     * @param {?} segmentGroup\n     * @return {?}\n     */\n    ApplyRedirects.prototype.expandChildren = /**\n     * @param {?} ngModule\n     * @param {?} routes\n     * @param {?} segmentGroup\n     * @return {?}\n     */\n    function (ngModule, routes, segmentGroup) {\n        var _this = this;\n        return waitForMap(segmentGroup.children, function (childOutlet, child) { return _this.expandSegmentGroup(ngModule, routes, child, childOutlet); });\n    };\n    /**\n     * @param {?} ngModule\n     * @param {?} segmentGroup\n     * @param {?} routes\n     * @param {?} segments\n     * @param {?} outlet\n     * @param {?} allowRedirects\n     * @return {?}\n     */\n    ApplyRedirects.prototype.expandSegment = /**\n     * @param {?} ngModule\n     * @param {?} segmentGroup\n     * @param {?} routes\n     * @param {?} segments\n     * @param {?} outlet\n     * @param {?} allowRedirects\n     * @return {?}\n     */\n    function (ngModule, segmentGroup, routes, segments, outlet, allowRedirects) {\n        var _this = this;\n        return of.apply(void 0, routes).pipe(map(function (r) {\n            /** @type {?} */\n            var expanded$ = _this.expandSegmentAgainstRoute(ngModule, segmentGroup, routes, r, segments, outlet, allowRedirects);\n            return expanded$.pipe(catchError(function (e) {\n                if (e instanceof NoMatch) {\n                    // TODO(i): this return type doesn't match the declared Observable<UrlSegmentGroup> -\n                    // talk to Jason\n                    return /** @type {?} */ (of(null));\n                }\n                throw e;\n            }));\n        }), concatAll(), first(function (s) { return !!s; }), catchError(function (e, _) {\n            if (e instanceof EmptyError || e.name === 'EmptyError') {\n                if (_this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\n                    return of(new UrlSegmentGroup([], {}));\n                }\n                throw new NoMatch(segmentGroup);\n            }\n            throw e;\n        }));\n    };\n    /**\n     * @param {?} segmentGroup\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    ApplyRedirects.prototype.noLeftoversInUrl = /**\n     * @param {?} segmentGroup\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    function (segmentGroup, segments, outlet) {\n        return segments.length === 0 && !segmentGroup.children[outlet];\n    };\n    /**\n     * @param {?} ngModule\n     * @param {?} segmentGroup\n     * @param {?} routes\n     * @param {?} route\n     * @param {?} paths\n     * @param {?} outlet\n     * @param {?} allowRedirects\n     * @return {?}\n     */\n    ApplyRedirects.prototype.expandSegmentAgainstRoute = /**\n     * @param {?} ngModule\n     * @param {?} segmentGroup\n     * @param {?} routes\n     * @param {?} route\n     * @param {?} paths\n     * @param {?} outlet\n     * @param {?} allowRedirects\n     * @return {?}\n     */\n    function (ngModule, segmentGroup, routes, route, paths, outlet, allowRedirects) {\n        if (getOutlet(route) !== outlet) {\n            return noMatch(segmentGroup);\n        }\n        if (route.redirectTo === undefined) {\n            return this.matchSegmentAgainstRoute(ngModule, segmentGroup, route, paths);\n        }\n        if (allowRedirects && this.allowRedirects) {\n            return this.expandSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, paths, outlet);\n        }\n        return noMatch(segmentGroup);\n    };\n    /**\n     * @param {?} ngModule\n     * @param {?} segmentGroup\n     * @param {?} routes\n     * @param {?} route\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    ApplyRedirects.prototype.expandSegmentAgainstRouteUsingRedirect = /**\n     * @param {?} ngModule\n     * @param {?} segmentGroup\n     * @param {?} routes\n     * @param {?} route\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    function (ngModule, segmentGroup, routes, route, segments, outlet) {\n        if (route.path === '**') {\n            return this.expandWildCardWithParamsAgainstRouteUsingRedirect(ngModule, routes, route, outlet);\n        }\n        return this.expandRegularSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet);\n    };\n    /**\n     * @param {?} ngModule\n     * @param {?} routes\n     * @param {?} route\n     * @param {?} outlet\n     * @return {?}\n     */\n    ApplyRedirects.prototype.expandWildCardWithParamsAgainstRouteUsingRedirect = /**\n     * @param {?} ngModule\n     * @param {?} routes\n     * @param {?} route\n     * @param {?} outlet\n     * @return {?}\n     */\n    function (ngModule, routes, route, outlet) {\n        var _this = this;\n        /** @type {?} */\n        var newTree = this.applyRedirectCommands([], /** @type {?} */ ((route.redirectTo)), {});\n        if (/** @type {?} */ ((route.redirectTo)).startsWith('/')) {\n            return absoluteRedirect(newTree);\n        }\n        return this.lineralizeSegments(route, newTree).pipe(mergeMap(function (newSegments) {\n            /** @type {?} */\n            var group = new UrlSegmentGroup(newSegments, {});\n            return _this.expandSegment(ngModule, group, routes, newSegments, outlet, false);\n        }));\n    };\n    /**\n     * @param {?} ngModule\n     * @param {?} segmentGroup\n     * @param {?} routes\n     * @param {?} route\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    ApplyRedirects.prototype.expandRegularSegmentAgainstRouteUsingRedirect = /**\n     * @param {?} ngModule\n     * @param {?} segmentGroup\n     * @param {?} routes\n     * @param {?} route\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    function (ngModule, segmentGroup, routes, route, segments, outlet) {\n        var _this = this;\n        var _a = match(segmentGroup, route, segments), matched = _a.matched, consumedSegments = _a.consumedSegments, lastChild = _a.lastChild, positionalParamSegments = _a.positionalParamSegments;\n        if (!matched)\n            return noMatch(segmentGroup);\n        /** @type {?} */\n        var newTree = this.applyRedirectCommands(consumedSegments, /** @type {?} */ ((route.redirectTo)), /** @type {?} */ (positionalParamSegments));\n        if (/** @type {?} */ ((route.redirectTo)).startsWith('/')) {\n            return absoluteRedirect(newTree);\n        }\n        return this.lineralizeSegments(route, newTree).pipe(mergeMap(function (newSegments) {\n            return _this.expandSegment(ngModule, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet, false);\n        }));\n    };\n    /**\n     * @param {?} ngModule\n     * @param {?} rawSegmentGroup\n     * @param {?} route\n     * @param {?} segments\n     * @return {?}\n     */\n    ApplyRedirects.prototype.matchSegmentAgainstRoute = /**\n     * @param {?} ngModule\n     * @param {?} rawSegmentGroup\n     * @param {?} route\n     * @param {?} segments\n     * @return {?}\n     */\n    function (ngModule, rawSegmentGroup, route, segments) {\n        var _this = this;\n        if (route.path === '**') {\n            if (route.loadChildren) {\n                return this.configLoader.load(ngModule.injector, route)\n                    .pipe(map(function (cfg) {\n                    route._loadedConfig = cfg;\n                    return new UrlSegmentGroup(segments, {});\n                }));\n            }\n            return of(new UrlSegmentGroup(segments, {}));\n        }\n        var _a = match(rawSegmentGroup, route, segments), matched = _a.matched, consumedSegments = _a.consumedSegments, lastChild = _a.lastChild;\n        if (!matched)\n            return noMatch(rawSegmentGroup);\n        /** @type {?} */\n        var rawSlicedSegments = segments.slice(lastChild);\n        /** @type {?} */\n        var childConfig$ = this.getChildConfig(ngModule, route, segments);\n        return childConfig$.pipe(mergeMap(function (routerConfig) {\n            /** @type {?} */\n            var childModule = routerConfig.module;\n            /** @type {?} */\n            var childConfig = routerConfig.routes;\n            var _a = split(rawSegmentGroup, consumedSegments, rawSlicedSegments, childConfig), segmentGroup = _a.segmentGroup, slicedSegments = _a.slicedSegments;\n            if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n                /** @type {?} */\n                var expanded$_1 = _this.expandChildren(childModule, childConfig, segmentGroup);\n                return expanded$_1.pipe(map(function (children) { return new UrlSegmentGroup(consumedSegments, children); }));\n            }\n            if (childConfig.length === 0 && slicedSegments.length === 0) {\n                return of(new UrlSegmentGroup(consumedSegments, {}));\n            }\n            /** @type {?} */\n            var expanded$ = _this.expandSegment(childModule, segmentGroup, childConfig, slicedSegments, PRIMARY_OUTLET, true);\n            return expanded$.pipe(map(function (cs) {\n                return new UrlSegmentGroup(consumedSegments.concat(cs.segments), cs.children);\n            }));\n        }));\n    };\n    /**\n     * @param {?} ngModule\n     * @param {?} route\n     * @param {?} segments\n     * @return {?}\n     */\n    ApplyRedirects.prototype.getChildConfig = /**\n     * @param {?} ngModule\n     * @param {?} route\n     * @param {?} segments\n     * @return {?}\n     */\n    function (ngModule, route, segments) {\n        var _this = this;\n        if (route.children) {\n            // The children belong to the same module\n            return of(new LoadedRouterConfig(route.children, ngModule));\n        }\n        if (route.loadChildren) {\n            // lazy children belong to the loaded module\n            if (route._loadedConfig !== undefined) {\n                return of(route._loadedConfig);\n            }\n            return runCanLoadGuard(ngModule.injector, route, segments)\n                .pipe(mergeMap(function (shouldLoad) {\n                if (shouldLoad) {\n                    return _this.configLoader.load(ngModule.injector, route)\n                        .pipe(map(function (cfg) {\n                        route._loadedConfig = cfg;\n                        return cfg;\n                    }));\n                }\n                return canLoadFails(route);\n            }));\n        }\n        return of(new LoadedRouterConfig([], ngModule));\n    };\n    /**\n     * @param {?} route\n     * @param {?} urlTree\n     * @return {?}\n     */\n    ApplyRedirects.prototype.lineralizeSegments = /**\n     * @param {?} route\n     * @param {?} urlTree\n     * @return {?}\n     */\n    function (route, urlTree) {\n        /** @type {?} */\n        var res = [];\n        /** @type {?} */\n        var c = urlTree.root;\n        while (true) {\n            res = res.concat(c.segments);\n            if (c.numberOfChildren === 0) {\n                return of(res);\n            }\n            if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {\n                return namedOutletsRedirect(/** @type {?} */ ((route.redirectTo)));\n            }\n            c = c.children[PRIMARY_OUTLET];\n        }\n    };\n    /**\n     * @param {?} segments\n     * @param {?} redirectTo\n     * @param {?} posParams\n     * @return {?}\n     */\n    ApplyRedirects.prototype.applyRedirectCommands = /**\n     * @param {?} segments\n     * @param {?} redirectTo\n     * @param {?} posParams\n     * @return {?}\n     */\n    function (segments, redirectTo, posParams) {\n        return this.applyRedirectCreatreUrlTree(redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);\n    };\n    /**\n     * @param {?} redirectTo\n     * @param {?} urlTree\n     * @param {?} segments\n     * @param {?} posParams\n     * @return {?}\n     */\n    ApplyRedirects.prototype.applyRedirectCreatreUrlTree = /**\n     * @param {?} redirectTo\n     * @param {?} urlTree\n     * @param {?} segments\n     * @param {?} posParams\n     * @return {?}\n     */\n    function (redirectTo, urlTree, segments, posParams) {\n        /** @type {?} */\n        var newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);\n        return new UrlTree(newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams), urlTree.fragment);\n    };\n    /**\n     * @param {?} redirectToParams\n     * @param {?} actualParams\n     * @return {?}\n     */\n    ApplyRedirects.prototype.createQueryParams = /**\n     * @param {?} redirectToParams\n     * @param {?} actualParams\n     * @return {?}\n     */\n    function (redirectToParams, actualParams) {\n        /** @type {?} */\n        var res = {};\n        forEach(redirectToParams, function (v, k) {\n            /** @type {?} */\n            var copySourceValue = typeof v === 'string' && v.startsWith(':');\n            if (copySourceValue) {\n                /** @type {?} */\n                var sourceName = v.substring(1);\n                res[k] = actualParams[sourceName];\n            }\n            else {\n                res[k] = v;\n            }\n        });\n        return res;\n    };\n    /**\n     * @param {?} redirectTo\n     * @param {?} group\n     * @param {?} segments\n     * @param {?} posParams\n     * @return {?}\n     */\n    ApplyRedirects.prototype.createSegmentGroup = /**\n     * @param {?} redirectTo\n     * @param {?} group\n     * @param {?} segments\n     * @param {?} posParams\n     * @return {?}\n     */\n    function (redirectTo, group, segments, posParams) {\n        var _this = this;\n        /** @type {?} */\n        var updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);\n        /** @type {?} */\n        var children = {};\n        forEach(group.children, function (child, name) {\n            children[name] = _this.createSegmentGroup(redirectTo, child, segments, posParams);\n        });\n        return new UrlSegmentGroup(updatedSegments, children);\n    };\n    /**\n     * @param {?} redirectTo\n     * @param {?} redirectToSegments\n     * @param {?} actualSegments\n     * @param {?} posParams\n     * @return {?}\n     */\n    ApplyRedirects.prototype.createSegments = /**\n     * @param {?} redirectTo\n     * @param {?} redirectToSegments\n     * @param {?} actualSegments\n     * @param {?} posParams\n     * @return {?}\n     */\n    function (redirectTo, redirectToSegments, actualSegments, posParams) {\n        var _this = this;\n        return redirectToSegments.map(function (s) { return s.path.startsWith(':') ? _this.findPosParam(redirectTo, s, posParams) :\n            _this.findOrReturn(s, actualSegments); });\n    };\n    /**\n     * @param {?} redirectTo\n     * @param {?} redirectToUrlSegment\n     * @param {?} posParams\n     * @return {?}\n     */\n    ApplyRedirects.prototype.findPosParam = /**\n     * @param {?} redirectTo\n     * @param {?} redirectToUrlSegment\n     * @param {?} posParams\n     * @return {?}\n     */\n    function (redirectTo, redirectToUrlSegment, posParams) {\n        /** @type {?} */\n        var pos = posParams[redirectToUrlSegment.path.substring(1)];\n        if (!pos)\n            throw new Error(\"Cannot redirect to '\" + redirectTo + \"'. Cannot find '\" + redirectToUrlSegment.path + \"'.\");\n        return pos;\n    };\n    /**\n     * @param {?} redirectToUrlSegment\n     * @param {?} actualSegments\n     * @return {?}\n     */\n    ApplyRedirects.prototype.findOrReturn = /**\n     * @param {?} redirectToUrlSegment\n     * @param {?} actualSegments\n     * @return {?}\n     */\n    function (redirectToUrlSegment, actualSegments) {\n        /** @type {?} */\n        var idx = 0;\n        for (var _i = 0, actualSegments_1 = actualSegments; _i < actualSegments_1.length; _i++) {\n            var s = actualSegments_1[_i];\n            if (s.path === redirectToUrlSegment.path) {\n                actualSegments.splice(idx);\n                return s;\n            }\n            idx++;\n        }\n        return redirectToUrlSegment;\n    };\n    return ApplyRedirects;\n}());\nif (false) {\n    /** @type {?} */\n    ApplyRedirects.prototype.allowRedirects;\n    /** @type {?} */\n    ApplyRedirects.prototype.ngModule;\n    /** @type {?} */\n    ApplyRedirects.prototype.configLoader;\n    /** @type {?} */\n    ApplyRedirects.prototype.urlSerializer;\n    /** @type {?} */\n    ApplyRedirects.prototype.urlTree;\n    /** @type {?} */\n    ApplyRedirects.prototype.config;\n}\n/**\n * @param {?} moduleInjector\n * @param {?} route\n * @param {?} segments\n * @return {?}\n */\nfunction runCanLoadGuard(moduleInjector, route, segments) {\n    /** @type {?} */\n    var canLoad = route.canLoad;\n    if (!canLoad || canLoad.length === 0)\n        return of(true);\n    /** @type {?} */\n    var obs = from(canLoad).pipe(map(function (injectionToken) {\n        /** @type {?} */\n        var guard = moduleInjector.get(injectionToken);\n        /** @type {?} */\n        var guardVal;\n        if (isCanLoad(guard)) {\n            guardVal = guard.canLoad(route, segments);\n        }\n        else if (isFunction(guard)) {\n            guardVal = guard(route, segments);\n        }\n        else {\n            throw new Error('Invalid CanLoad guard');\n        }\n        return wrapIntoObservable(guardVal);\n    }));\n    return obs.pipe(concatAll(), every(function (result) { return result === true; }));\n}\n/**\n * @param {?} segmentGroup\n * @param {?} route\n * @param {?} segments\n * @return {?}\n */\nfunction match(segmentGroup, route, segments) {\n    if (route.path === '') {\n        if ((route.pathMatch === 'full') && (segmentGroup.hasChildren() || segments.length > 0)) {\n            return { matched: false, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };\n        }\n        return { matched: true, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };\n    }\n    /** @type {?} */\n    var matcher = route.matcher || defaultUrlMatcher;\n    /** @type {?} */\n    var res = matcher(segments, segmentGroup, route);\n    if (!res) {\n        return {\n            matched: false,\n            consumedSegments: /** @type {?} */ ([]),\n            lastChild: 0,\n            positionalParamSegments: {},\n        };\n    }\n    return {\n        matched: true,\n        consumedSegments: /** @type {?} */ ((res.consumed)),\n        lastChild: /** @type {?} */ ((res.consumed.length)),\n        positionalParamSegments: /** @type {?} */ ((res.posParams)),\n    };\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} slicedSegments\n * @param {?} config\n * @return {?}\n */\nfunction split(segmentGroup, consumedSegments, slicedSegments, config) {\n    if (slicedSegments.length > 0 &&\n        containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n        /** @type {?} */\n        var s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptySegments(config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n        return { segmentGroup: mergeTrivialChildren(s), slicedSegments: [] };\n    }\n    if (slicedSegments.length === 0 &&\n        containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {\n        /** @type {?} */\n        var s = new UrlSegmentGroup(segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));\n        return { segmentGroup: mergeTrivialChildren(s), slicedSegments: slicedSegments };\n    }\n    return { segmentGroup: segmentGroup, slicedSegments: slicedSegments };\n}\n/**\n * @param {?} s\n * @return {?}\n */\nfunction mergeTrivialChildren(s) {\n    if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {\n        /** @type {?} */\n        var c = s.children[PRIMARY_OUTLET];\n        return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);\n    }\n    return s;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @param {?} children\n * @return {?}\n */\nfunction addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {\n    /** @type {?} */\n    var res = {};\n    for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {\n        var r = routes_1[_i];\n        if (isEmptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {\n            res[getOutlet(r)] = new UrlSegmentGroup([], {});\n        }\n    }\n    return tslib_1.__assign({}, children, res);\n}\n/**\n * @param {?} routes\n * @param {?} primarySegmentGroup\n * @return {?}\n */\nfunction createChildrenForEmptySegments(routes, primarySegmentGroup) {\n    /** @type {?} */\n    var res = {};\n    res[PRIMARY_OUTLET] = primarySegmentGroup;\n    for (var _i = 0, routes_2 = routes; _i < routes_2.length; _i++) {\n        var r = routes_2[_i];\n        if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {\n            res[getOutlet(r)] = new UrlSegmentGroup([], {});\n        }\n    }\n    return res;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, segments, routes) {\n    return routes.some(function (r) { return isEmptyPathRedirect(segmentGroup, segments, r) && getOutlet(r) !== PRIMARY_OUTLET; });\n}\n/**\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathRedirects(segmentGroup, segments, routes) {\n    return routes.some(function (r) { return isEmptyPathRedirect(segmentGroup, segments, r); });\n}\n/**\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} r\n * @return {?}\n */\nfunction isEmptyPathRedirect(segmentGroup, segments, r) {\n    if ((segmentGroup.hasChildren() || segments.length > 0) && r.pathMatch === 'full') {\n        return false;\n    }\n    return r.path === '' && r.redirectTo !== undefined;\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getOutlet(route) {\n    return route.outlet || PRIMARY_OUTLET;\n}\n//# sourceMappingURL=apply_redirects.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { map, switchMap } from 'rxjs/operators';\nimport { applyRedirects as applyRedirectsFn } from '../apply_redirects';\n/**\n * @param {?} moduleInjector\n * @param {?} configLoader\n * @param {?} urlSerializer\n * @param {?} config\n * @return {?}\n */\nexport function applyRedirects(moduleInjector, configLoader, urlSerializer, config) {\n    return function (source) {\n        return source.pipe(switchMap(function (t) { return applyRedirectsFn(moduleInjector, configLoader, urlSerializer, t.extractedUrl, config)\n            .pipe(map(function (urlAfterRedirects) { return (tslib_1.__assign({}, t, { urlAfterRedirects: urlAfterRedirects })); })); }));\n    };\n}\n//# sourceMappingURL=apply_redirects.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { equalParamsAndUrlSegments } from '../router_state';\nimport { forEach, shallowEqual } from '../utils/collection';\nimport { nodeChildrenAsMap } from '../utils/tree';\nvar CanActivate = /** @class */ (function () {\n    function CanActivate(path) {\n        this.path = path;\n        this.route = this.path[this.path.length - 1];\n    }\n    return CanActivate;\n}());\nexport { CanActivate };\nif (false) {\n    /** @type {?} */\n    CanActivate.prototype.route;\n    /** @type {?} */\n    CanActivate.prototype.path;\n}\nvar CanDeactivate = /** @class */ (function () {\n    function CanDeactivate(component, route) {\n        this.component = component;\n        this.route = route;\n    }\n    return CanDeactivate;\n}());\nexport { CanDeactivate };\nif (false) {\n    /** @type {?} */\n    CanDeactivate.prototype.component;\n    /** @type {?} */\n    CanDeactivate.prototype.route;\n}\n/**\n * @param {?} future\n * @param {?} curr\n * @param {?} parentContexts\n * @return {?}\n */\nexport function getAllRouteGuards(future, curr, parentContexts) {\n    /** @type {?} */\n    var futureRoot = future._root;\n    /** @type {?} */\n    var currRoot = curr ? curr._root : null;\n    return getChildRouteGuards(futureRoot, currRoot, parentContexts, [futureRoot.value]);\n}\n/**\n * @param {?} p\n * @return {?}\n */\nexport function getCanActivateChild(p) {\n    /** @type {?} */\n    var canActivateChild = p.routeConfig ? p.routeConfig.canActivateChild : null;\n    if (!canActivateChild || canActivateChild.length === 0)\n        return null;\n    return { node: p, guards: canActivateChild };\n}\n/**\n * @param {?} token\n * @param {?} snapshot\n * @param {?} moduleInjector\n * @return {?}\n */\nexport function getToken(token, snapshot, moduleInjector) {\n    /** @type {?} */\n    var config = getClosestLoadedConfig(snapshot);\n    /** @type {?} */\n    var injector = config ? config.module.injector : moduleInjector;\n    return injector.get(token);\n}\n/**\n * @param {?} snapshot\n * @return {?}\n */\nfunction getClosestLoadedConfig(snapshot) {\n    if (!snapshot)\n        return null;\n    for (var s = snapshot.parent; s; s = s.parent) {\n        /** @type {?} */\n        var route = s.routeConfig;\n        if (route && route._loadedConfig)\n            return route._loadedConfig;\n    }\n    return null;\n}\n/**\n * @param {?} futureNode\n * @param {?} currNode\n * @param {?} contexts\n * @param {?} futurePath\n * @param {?=} checks\n * @return {?}\n */\nfunction getChildRouteGuards(futureNode, currNode, contexts, futurePath, checks) {\n    if (checks === void 0) { checks = {\n        canDeactivateChecks: [],\n        canActivateChecks: []\n    }; }\n    /** @type {?} */\n    var prevChildren = nodeChildrenAsMap(currNode);\n    // Process the children of the future route\n    futureNode.children.forEach(function (c) {\n        getRouteGuards(c, prevChildren[c.value.outlet], contexts, futurePath.concat([c.value]), checks);\n        delete prevChildren[c.value.outlet];\n    });\n    // Process any children left from the current route (not active for the future route)\n    forEach(prevChildren, function (v, k) {\n        return deactivateRouteAndItsChildren(v, /** @type {?} */ ((contexts)).getContext(k), checks);\n    });\n    return checks;\n}\n/**\n * @param {?} futureNode\n * @param {?} currNode\n * @param {?} parentContexts\n * @param {?} futurePath\n * @param {?=} checks\n * @return {?}\n */\nfunction getRouteGuards(futureNode, currNode, parentContexts, futurePath, checks) {\n    if (checks === void 0) { checks = {\n        canDeactivateChecks: [],\n        canActivateChecks: []\n    }; }\n    /** @type {?} */\n    var future = futureNode.value;\n    /** @type {?} */\n    var curr = currNode ? currNode.value : null;\n    /** @type {?} */\n    var context = parentContexts ? parentContexts.getContext(futureNode.value.outlet) : null;\n    // reusing the node\n    if (curr && future.routeConfig === curr.routeConfig) {\n        /** @type {?} */\n        var shouldRun = shouldRunGuardsAndResolvers(curr, future, /** @type {?} */ ((future.routeConfig)).runGuardsAndResolvers);\n        if (shouldRun) {\n            checks.canActivateChecks.push(new CanActivate(futurePath));\n        }\n        else {\n            // we need to set the data\n            future.data = curr.data;\n            future._resolvedData = curr._resolvedData;\n        }\n        // If we have a component, we need to go through an outlet.\n        if (future.component) {\n            getChildRouteGuards(futureNode, currNode, context ? context.children : null, futurePath, checks);\n            // if we have a componentless route, we recurse but keep the same outlet map.\n        }\n        else {\n            getChildRouteGuards(futureNode, currNode, parentContexts, futurePath, checks);\n        }\n        if (shouldRun) {\n            /** @type {?} */\n            var component = context && context.outlet && context.outlet.component || null;\n            checks.canDeactivateChecks.push(new CanDeactivate(component, curr));\n        }\n    }\n    else {\n        if (curr) {\n            deactivateRouteAndItsChildren(currNode, context, checks);\n        }\n        checks.canActivateChecks.push(new CanActivate(futurePath));\n        // If we have a component, we need to go through an outlet.\n        if (future.component) {\n            getChildRouteGuards(futureNode, null, context ? context.children : null, futurePath, checks);\n            // if we have a componentless route, we recurse but keep the same outlet map.\n        }\n        else {\n            getChildRouteGuards(futureNode, null, parentContexts, futurePath, checks);\n        }\n    }\n    return checks;\n}\n/**\n * @param {?} curr\n * @param {?} future\n * @param {?} mode\n * @return {?}\n */\nfunction shouldRunGuardsAndResolvers(curr, future, mode) {\n    switch (mode) {\n        case 'always':\n            return true;\n        case 'paramsOrQueryParamsChange':\n            return !equalParamsAndUrlSegments(curr, future) ||\n                !shallowEqual(curr.queryParams, future.queryParams);\n        case 'paramsChange':\n        default:\n            return !equalParamsAndUrlSegments(curr, future);\n    }\n}\n/**\n * @param {?} route\n * @param {?} context\n * @param {?} checks\n * @return {?}\n */\nfunction deactivateRouteAndItsChildren(route, context, checks) {\n    /** @type {?} */\n    var children = nodeChildrenAsMap(route);\n    /** @type {?} */\n    var r = route.value;\n    forEach(children, function (node, childName) {\n        if (!r.component) {\n            deactivateRouteAndItsChildren(node, context, checks);\n        }\n        else if (context) {\n            deactivateRouteAndItsChildren(node, context.children.getContext(childName), checks);\n        }\n        else {\n            deactivateRouteAndItsChildren(node, null, checks);\n        }\n    });\n    if (!r.component) {\n        checks.canDeactivateChecks.push(new CanDeactivate(null, r));\n    }\n    else if (context && context.outlet && context.outlet.isActivated) {\n        checks.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, r));\n    }\n    else {\n        checks.canDeactivateChecks.push(new CanDeactivate(null, r));\n    }\n}\n//# sourceMappingURL=preactivation.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { combineLatest } from 'rxjs';\nimport { filter, map, scan, startWith, switchMap, take } from 'rxjs/operators';\nimport { isUrlTree } from '../utils/type_guards';\n/** @type {?} */\nvar INITIAL_VALUE = Symbol('INITIAL_VALUE');\n/**\n * @return {?}\n */\nexport function prioritizedGuardValue() {\n    return switchMap(function (obs) {\n        return /** @type {?} */ (combineLatest.apply(void 0, obs.map(function (o) { return o.pipe(take(1), startWith(/** @type {?} */ (INITIAL_VALUE))); })).pipe(scan(function (acc, list) {\n            /** @type {?} */\n            var isPending = false;\n            return list.reduce(function (innerAcc, val, i) {\n                if (innerAcc !== INITIAL_VALUE)\n                    return innerAcc;\n                // Toggle pending flag if any values haven't been set yet\n                if (val === INITIAL_VALUE)\n                    isPending = true;\n                // Any other return values are only valid if we haven't yet hit a pending call.\n                // This guarantees that in the case of a guard at the bottom of the tree that\n                // returns a redirect, we will wait for the higher priority guard at the top to\n                // finish before performing the redirect.\n                if (!isPending) {\n                    // Early return when we hit a `false` value as that should always cancel\n                    // navigation\n                    if (val === false)\n                        return val;\n                    if (i === list.length - 1 || isUrlTree(val)) {\n                        return val;\n                    }\n                }\n                return innerAcc;\n            }, acc);\n        }, INITIAL_VALUE), filter(function (item) { return item !== INITIAL_VALUE; }), map(function (item) { return isUrlTree(item) ? item : item === true; }), //\n        //\n        take(1)));\n    });\n}\n//# sourceMappingURL=prioritized_guard_value.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { defer, from, of } from 'rxjs';\nimport { concatAll, concatMap, first, map, mergeMap } from 'rxjs/operators';\nimport { ActivationStart, ChildActivationStart } from '../events';\nimport { wrapIntoObservable } from '../utils/collection';\nimport { getCanActivateChild, getToken } from '../utils/preactivation';\nimport { isBoolean, isCanActivate, isCanActivateChild, isCanDeactivate, isFunction } from '../utils/type_guards';\nimport { prioritizedGuardValue } from './prioritized_guard_value';\n/**\n * @param {?} moduleInjector\n * @param {?=} forwardEvent\n * @return {?}\n */\nexport function checkGuards(moduleInjector, forwardEvent) {\n    return function (source) {\n        return source.pipe(mergeMap(function (t) {\n            var targetSnapshot = t.targetSnapshot, currentSnapshot = t.currentSnapshot, _a = t.guards, canActivateChecks = _a.canActivateChecks, canDeactivateChecks = _a.canDeactivateChecks;\n            if (canDeactivateChecks.length === 0 && canActivateChecks.length === 0) {\n                return of(tslib_1.__assign({}, t, { guardsResult: true }));\n            }\n            return runCanDeactivateChecks(canDeactivateChecks, /** @type {?} */ ((targetSnapshot)), currentSnapshot, moduleInjector)\n                .pipe(mergeMap(function (canDeactivate) {\n                return canDeactivate && isBoolean(canDeactivate) ?\n                    runCanActivateChecks(/** @type {?} */ ((targetSnapshot)), canActivateChecks, moduleInjector, forwardEvent) :\n                    of(canDeactivate);\n            }), map(function (guardsResult) { return (tslib_1.__assign({}, t, { guardsResult: guardsResult })); }));\n        }));\n    };\n}\n/**\n * @param {?} checks\n * @param {?} futureRSS\n * @param {?} currRSS\n * @param {?} moduleInjector\n * @return {?}\n */\nfunction runCanDeactivateChecks(checks, futureRSS, currRSS, moduleInjector) {\n    return from(checks).pipe(mergeMap(function (check) {\n        return runCanDeactivate(check.component, check.route, currRSS, futureRSS, moduleInjector);\n    }), first(function (result) { return result !== true; }, /** @type {?} */ (true)));\n}\n/**\n * @param {?} futureSnapshot\n * @param {?} checks\n * @param {?} moduleInjector\n * @param {?=} forwardEvent\n * @return {?}\n */\nfunction runCanActivateChecks(futureSnapshot, checks, moduleInjector, forwardEvent) {\n    return from(checks).pipe(concatMap(function (check) {\n        return from([\n            fireChildActivationStart(check.route.parent, forwardEvent),\n            fireActivationStart(check.route, forwardEvent),\n            runCanActivateChild(futureSnapshot, check.path, moduleInjector),\n            runCanActivate(futureSnapshot, check.route, moduleInjector)\n        ])\n            .pipe(concatAll(), first(function (result) {\n            return result !== true;\n        }, /** @type {?} */ (true)));\n    }), first(function (result) { return result !== true; }, /** @type {?} */ (true)));\n}\n/**\n * This should fire off `ActivationStart` events for each route being activated at this\n * level.\n * In other words, if you're activating `a` and `b` below, `path` will contain the\n * `ActivatedRouteSnapshot`s for both and we will fire `ActivationStart` for both. Always\n * return\n * `true` so checks continue to run.\n * @param {?} snapshot\n * @param {?=} forwardEvent\n * @return {?}\n */\nfunction fireActivationStart(snapshot, forwardEvent) {\n    if (snapshot !== null && forwardEvent) {\n        forwardEvent(new ActivationStart(snapshot));\n    }\n    return of(true);\n}\n/**\n * This should fire off `ChildActivationStart` events for each route being activated at this\n * level.\n * In other words, if you're activating `a` and `b` below, `path` will contain the\n * `ActivatedRouteSnapshot`s for both and we will fire `ChildActivationStart` for both. Always\n * return\n * `true` so checks continue to run.\n * @param {?} snapshot\n * @param {?=} forwardEvent\n * @return {?}\n */\nfunction fireChildActivationStart(snapshot, forwardEvent) {\n    if (snapshot !== null && forwardEvent) {\n        forwardEvent(new ChildActivationStart(snapshot));\n    }\n    return of(true);\n}\n/**\n * @param {?} futureRSS\n * @param {?} futureARS\n * @param {?} moduleInjector\n * @return {?}\n */\nfunction runCanActivate(futureRSS, futureARS, moduleInjector) {\n    /** @type {?} */\n    var canActivate = futureARS.routeConfig ? futureARS.routeConfig.canActivate : null;\n    if (!canActivate || canActivate.length === 0)\n        return of(true);\n    /** @type {?} */\n    var canActivateObservables = canActivate.map(function (c) {\n        return defer(function () {\n            /** @type {?} */\n            var guard = getToken(c, futureARS, moduleInjector);\n            /** @type {?} */\n            var observable;\n            if (isCanActivate(guard)) {\n                observable = wrapIntoObservable(guard.canActivate(futureARS, futureRSS));\n            }\n            else if (isFunction(guard)) {\n                observable = wrapIntoObservable(guard(futureARS, futureRSS));\n            }\n            else {\n                throw new Error('Invalid CanActivate guard');\n            }\n            return observable.pipe(first());\n        });\n    });\n    return of(canActivateObservables).pipe(prioritizedGuardValue());\n}\n/**\n * @param {?} futureRSS\n * @param {?} path\n * @param {?} moduleInjector\n * @return {?}\n */\nfunction runCanActivateChild(futureRSS, path, moduleInjector) {\n    /** @type {?} */\n    var futureARS = path[path.length - 1];\n    /** @type {?} */\n    var canActivateChildGuards = path.slice(0, path.length - 1)\n        .reverse()\n        .map(function (p) { return getCanActivateChild(p); })\n        .filter(function (_) { return _ !== null; });\n    /** @type {?} */\n    var canActivateChildGuardsMapped = canActivateChildGuards.map(function (d) {\n        return defer(function () {\n            /** @type {?} */\n            var guardsMapped = d.guards.map(function (c) {\n                /** @type {?} */\n                var guard = getToken(c, d.node, moduleInjector);\n                /** @type {?} */\n                var observable;\n                if (isCanActivateChild(guard)) {\n                    observable = wrapIntoObservable(guard.canActivateChild(futureARS, futureRSS));\n                }\n                else if (isFunction(guard)) {\n                    observable = wrapIntoObservable(guard(futureARS, futureRSS));\n                }\n                else {\n                    throw new Error('Invalid CanActivateChild guard');\n                }\n                return observable.pipe(first());\n            });\n            return of(guardsMapped).pipe(prioritizedGuardValue());\n        });\n    });\n    return of(canActivateChildGuardsMapped).pipe(prioritizedGuardValue());\n}\n/**\n * @param {?} component\n * @param {?} currARS\n * @param {?} currRSS\n * @param {?} futureRSS\n * @param {?} moduleInjector\n * @return {?}\n */\nfunction runCanDeactivate(component, currARS, currRSS, futureRSS, moduleInjector) {\n    /** @type {?} */\n    var canDeactivate = currARS && currARS.routeConfig ? currARS.routeConfig.canDeactivate : null;\n    if (!canDeactivate || canDeactivate.length === 0)\n        return of(true);\n    /** @type {?} */\n    var canDeactivateObservables = canDeactivate.map(function (c) {\n        /** @type {?} */\n        var guard = getToken(c, currARS, moduleInjector);\n        /** @type {?} */\n        var observable;\n        if (isCanDeactivate(guard)) {\n            observable =\n                wrapIntoObservable(guard.canDeactivate(/** @type {?} */ ((component)), currARS, currRSS, futureRSS));\n        }\n        else if (isFunction(guard)) {\n            observable = wrapIntoObservable(guard(component, currARS, currRSS, futureRSS));\n        }\n        else {\n            throw new Error('Invalid CanDeactivate guard');\n        }\n        return observable.pipe(first());\n    });\n    return of(canDeactivateObservables).pipe(prioritizedGuardValue());\n}\n//# sourceMappingURL=check_guards.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Observable, of } from 'rxjs';\nimport { ActivatedRouteSnapshot, RouterStateSnapshot, inheritedParamsDataResolve } from './router_state';\nimport { PRIMARY_OUTLET, defaultUrlMatcher } from './shared';\nimport { UrlSegmentGroup, mapChildrenIntoArray } from './url_tree';\nimport { forEach, last } from './utils/collection';\nimport { TreeNode } from './utils/tree';\nvar NoMatch = /** @class */ (function () {\n    function NoMatch() {\n    }\n    return NoMatch;\n}());\n/**\n * @param {?} rootComponentType\n * @param {?} config\n * @param {?} urlTree\n * @param {?} url\n * @param {?=} paramsInheritanceStrategy\n * @param {?=} relativeLinkResolution\n * @return {?}\n */\nexport function recognize(rootComponentType, config, urlTree, url, paramsInheritanceStrategy, relativeLinkResolution) {\n    if (paramsInheritanceStrategy === void 0) { paramsInheritanceStrategy = 'emptyOnly'; }\n    if (relativeLinkResolution === void 0) { relativeLinkResolution = 'legacy'; }\n    return new Recognizer(rootComponentType, config, urlTree, url, paramsInheritanceStrategy, relativeLinkResolution)\n        .recognize();\n}\nvar Recognizer = /** @class */ (function () {\n    function Recognizer(rootComponentType, config, urlTree, url, paramsInheritanceStrategy, relativeLinkResolution) {\n        this.rootComponentType = rootComponentType;\n        this.config = config;\n        this.urlTree = urlTree;\n        this.url = url;\n        this.paramsInheritanceStrategy = paramsInheritanceStrategy;\n        this.relativeLinkResolution = relativeLinkResolution;\n    }\n    /**\n     * @return {?}\n     */\n    Recognizer.prototype.recognize = /**\n     * @return {?}\n     */\n    function () {\n        try {\n            /** @type {?} */\n            var rootSegmentGroup = split(this.urlTree.root, [], [], this.config, this.relativeLinkResolution).segmentGroup;\n            /** @type {?} */\n            var children = this.processSegmentGroup(this.config, rootSegmentGroup, PRIMARY_OUTLET);\n            /** @type {?} */\n            var root = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze(tslib_1.__assign({}, this.urlTree.queryParams)), /** @type {?} */ ((this.urlTree.fragment)), {}, PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, {});\n            /** @type {?} */\n            var rootNode = new TreeNode(root, children);\n            /** @type {?} */\n            var routeState = new RouterStateSnapshot(this.url, rootNode);\n            this.inheritParamsAndData(routeState._root);\n            return of(routeState);\n        }\n        catch (e) {\n            return new Observable(function (obs) { return obs.error(e); });\n        }\n    };\n    /**\n     * @param {?} routeNode\n     * @return {?}\n     */\n    Recognizer.prototype.inheritParamsAndData = /**\n     * @param {?} routeNode\n     * @return {?}\n     */\n    function (routeNode) {\n        var _this = this;\n        /** @type {?} */\n        var route = routeNode.value;\n        /** @type {?} */\n        var i = inheritedParamsDataResolve(route, this.paramsInheritanceStrategy);\n        route.params = Object.freeze(i.params);\n        route.data = Object.freeze(i.data);\n        routeNode.children.forEach(function (n) { return _this.inheritParamsAndData(n); });\n    };\n    /**\n     * @param {?} config\n     * @param {?} segmentGroup\n     * @param {?} outlet\n     * @return {?}\n     */\n    Recognizer.prototype.processSegmentGroup = /**\n     * @param {?} config\n     * @param {?} segmentGroup\n     * @param {?} outlet\n     * @return {?}\n     */\n    function (config, segmentGroup, outlet) {\n        if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n            return this.processChildren(config, segmentGroup);\n        }\n        return this.processSegment(config, segmentGroup, segmentGroup.segments, outlet);\n    };\n    /**\n     * @param {?} config\n     * @param {?} segmentGroup\n     * @return {?}\n     */\n    Recognizer.prototype.processChildren = /**\n     * @param {?} config\n     * @param {?} segmentGroup\n     * @return {?}\n     */\n    function (config, segmentGroup) {\n        var _this = this;\n        /** @type {?} */\n        var children = mapChildrenIntoArray(segmentGroup, function (child, childOutlet) { return _this.processSegmentGroup(config, child, childOutlet); });\n        checkOutletNameUniqueness(children);\n        sortActivatedRouteSnapshots(children);\n        return children;\n    };\n    /**\n     * @param {?} config\n     * @param {?} segmentGroup\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    Recognizer.prototype.processSegment = /**\n     * @param {?} config\n     * @param {?} segmentGroup\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    function (config, segmentGroup, segments, outlet) {\n        for (var _i = 0, config_1 = config; _i < config_1.length; _i++) {\n            var r = config_1[_i];\n            try {\n                return this.processSegmentAgainstRoute(r, segmentGroup, segments, outlet);\n            }\n            catch (e) {\n                if (!(e instanceof NoMatch))\n                    throw e;\n            }\n        }\n        if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\n            return [];\n        }\n        throw new NoMatch();\n    };\n    /**\n     * @param {?} segmentGroup\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    Recognizer.prototype.noLeftoversInUrl = /**\n     * @param {?} segmentGroup\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    function (segmentGroup, segments, outlet) {\n        return segments.length === 0 && !segmentGroup.children[outlet];\n    };\n    /**\n     * @param {?} route\n     * @param {?} rawSegment\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    Recognizer.prototype.processSegmentAgainstRoute = /**\n     * @param {?} route\n     * @param {?} rawSegment\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    function (route, rawSegment, segments, outlet) {\n        if (route.redirectTo)\n            throw new NoMatch();\n        if ((route.outlet || PRIMARY_OUTLET) !== outlet)\n            throw new NoMatch();\n        /** @type {?} */\n        var snapshot;\n        /** @type {?} */\n        var consumedSegments = [];\n        /** @type {?} */\n        var rawSlicedSegments = [];\n        if (route.path === '**') {\n            /** @type {?} */\n            var params = segments.length > 0 ? /** @type {?} */ ((last(segments))).parameters : {};\n            snapshot = new ActivatedRouteSnapshot(segments, params, Object.freeze(tslib_1.__assign({}, this.urlTree.queryParams)), /** @type {?} */ ((this.urlTree.fragment)), getData(route), outlet, /** @type {?} */ ((route.component)), route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + segments.length, getResolve(route));\n        }\n        else {\n            /** @type {?} */\n            var result = match(rawSegment, route, segments);\n            consumedSegments = result.consumedSegments;\n            rawSlicedSegments = segments.slice(result.lastChild);\n            snapshot = new ActivatedRouteSnapshot(consumedSegments, result.parameters, Object.freeze(tslib_1.__assign({}, this.urlTree.queryParams)), /** @type {?} */ ((this.urlTree.fragment)), getData(route), outlet, /** @type {?} */ ((route.component)), route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + consumedSegments.length, getResolve(route));\n        }\n        /** @type {?} */\n        var childConfig = getChildConfig(route);\n        var _a = split(rawSegment, consumedSegments, rawSlicedSegments, childConfig, this.relativeLinkResolution), segmentGroup = _a.segmentGroup, slicedSegments = _a.slicedSegments;\n        if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n            /** @type {?} */\n            var children_1 = this.processChildren(childConfig, segmentGroup);\n            return [new TreeNode(snapshot, children_1)];\n        }\n        if (childConfig.length === 0 && slicedSegments.length === 0) {\n            return [new TreeNode(snapshot, [])];\n        }\n        /** @type {?} */\n        var children = this.processSegment(childConfig, segmentGroup, slicedSegments, PRIMARY_OUTLET);\n        return [new TreeNode(snapshot, children)];\n    };\n    return Recognizer;\n}());\nif (false) {\n    /** @type {?} */\n    Recognizer.prototype.rootComponentType;\n    /** @type {?} */\n    Recognizer.prototype.config;\n    /** @type {?} */\n    Recognizer.prototype.urlTree;\n    /** @type {?} */\n    Recognizer.prototype.url;\n    /** @type {?} */\n    Recognizer.prototype.paramsInheritanceStrategy;\n    /** @type {?} */\n    Recognizer.prototype.relativeLinkResolution;\n}\n/**\n * @param {?} nodes\n * @return {?}\n */\nfunction sortActivatedRouteSnapshots(nodes) {\n    nodes.sort(function (a, b) {\n        if (a.value.outlet === PRIMARY_OUTLET)\n            return -1;\n        if (b.value.outlet === PRIMARY_OUTLET)\n            return 1;\n        return a.value.outlet.localeCompare(b.value.outlet);\n    });\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getChildConfig(route) {\n    if (route.children) {\n        return route.children;\n    }\n    if (route.loadChildren) {\n        return /** @type {?} */ ((route._loadedConfig)).routes;\n    }\n    return [];\n}\n/**\n * @record\n */\nfunction MatchResult() { }\n/** @type {?} */\nMatchResult.prototype.consumedSegments;\n/** @type {?} */\nMatchResult.prototype.lastChild;\n/** @type {?} */\nMatchResult.prototype.parameters;\n/**\n * @param {?} segmentGroup\n * @param {?} route\n * @param {?} segments\n * @return {?}\n */\nfunction match(segmentGroup, route, segments) {\n    if (route.path === '') {\n        if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {\n            throw new NoMatch();\n        }\n        return { consumedSegments: [], lastChild: 0, parameters: {} };\n    }\n    /** @type {?} */\n    var matcher = route.matcher || defaultUrlMatcher;\n    /** @type {?} */\n    var res = matcher(segments, segmentGroup, route);\n    if (!res)\n        throw new NoMatch();\n    /** @type {?} */\n    var posParams = {};\n    forEach(/** @type {?} */ ((res.posParams)), function (v, k) { posParams[k] = v.path; });\n    /** @type {?} */\n    var parameters = res.consumed.length > 0 ? tslib_1.__assign({}, posParams, res.consumed[res.consumed.length - 1].parameters) :\n        posParams;\n    return { consumedSegments: res.consumed, lastChild: res.consumed.length, parameters: parameters };\n}\n/**\n * @param {?} nodes\n * @return {?}\n */\nfunction checkOutletNameUniqueness(nodes) {\n    /** @type {?} */\n    var names = {};\n    nodes.forEach(function (n) {\n        /** @type {?} */\n        var routeWithSameOutletName = names[n.value.outlet];\n        if (routeWithSameOutletName) {\n            /** @type {?} */\n            var p = routeWithSameOutletName.url.map(function (s) { return s.toString(); }).join('/');\n            /** @type {?} */\n            var c = n.value.url.map(function (s) { return s.toString(); }).join('/');\n            throw new Error(\"Two segments cannot have the same outlet name: '\" + p + \"' and '\" + c + \"'.\");\n        }\n        names[n.value.outlet] = n.value;\n    });\n}\n/**\n * @param {?} segmentGroup\n * @return {?}\n */\nfunction getSourceSegmentGroup(segmentGroup) {\n    /** @type {?} */\n    var s = segmentGroup;\n    while (s._sourceSegment) {\n        s = s._sourceSegment;\n    }\n    return s;\n}\n/**\n * @param {?} segmentGroup\n * @return {?}\n */\nfunction getPathIndexShift(segmentGroup) {\n    /** @type {?} */\n    var s = segmentGroup;\n    /** @type {?} */\n    var res = (s._segmentIndexShift ? s._segmentIndexShift : 0);\n    while (s._sourceSegment) {\n        s = s._sourceSegment;\n        res += (s._segmentIndexShift ? s._segmentIndexShift : 0);\n    }\n    return res - 1;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} slicedSegments\n * @param {?} config\n * @param {?} relativeLinkResolution\n * @return {?}\n */\nfunction split(segmentGroup, consumedSegments, slicedSegments, config, relativeLinkResolution) {\n    if (slicedSegments.length > 0 &&\n        containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n        /** @type {?} */\n        var s_1 = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(segmentGroup, consumedSegments, config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n        s_1._sourceSegment = segmentGroup;\n        s_1._segmentIndexShift = consumedSegments.length;\n        return { segmentGroup: s_1, slicedSegments: [] };\n    }\n    if (slicedSegments.length === 0 &&\n        containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {\n        /** @type {?} */\n        var s_2 = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, consumedSegments, slicedSegments, config, segmentGroup.children, relativeLinkResolution));\n        s_2._sourceSegment = segmentGroup;\n        s_2._segmentIndexShift = consumedSegments.length;\n        return { segmentGroup: s_2, slicedSegments: slicedSegments };\n    }\n    /** @type {?} */\n    var s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);\n    s._sourceSegment = segmentGroup;\n    s._segmentIndexShift = consumedSegments.length;\n    return { segmentGroup: s, slicedSegments: slicedSegments };\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} slicedSegments\n * @param {?} routes\n * @param {?} children\n * @param {?} relativeLinkResolution\n * @return {?}\n */\nfunction addEmptyPathsToChildrenIfNeeded(segmentGroup, consumedSegments, slicedSegments, routes, children, relativeLinkResolution) {\n    /** @type {?} */\n    var res = {};\n    for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {\n        var r = routes_1[_i];\n        if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {\n            /** @type {?} */\n            var s = new UrlSegmentGroup([], {});\n            s._sourceSegment = segmentGroup;\n            if (relativeLinkResolution === 'legacy') {\n                s._segmentIndexShift = segmentGroup.segments.length;\n            }\n            else {\n                s._segmentIndexShift = consumedSegments.length;\n            }\n            res[getOutlet(r)] = s;\n        }\n    }\n    return tslib_1.__assign({}, children, res);\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} routes\n * @param {?} primarySegment\n * @return {?}\n */\nfunction createChildrenForEmptyPaths(segmentGroup, consumedSegments, routes, primarySegment) {\n    /** @type {?} */\n    var res = {};\n    res[PRIMARY_OUTLET] = primarySegment;\n    primarySegment._sourceSegment = segmentGroup;\n    primarySegment._segmentIndexShift = consumedSegments.length;\n    for (var _i = 0, routes_2 = routes; _i < routes_2.length; _i++) {\n        var r = routes_2[_i];\n        if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {\n            /** @type {?} */\n            var s = new UrlSegmentGroup([], {});\n            s._sourceSegment = segmentGroup;\n            s._segmentIndexShift = consumedSegments.length;\n            res[getOutlet(r)] = s;\n        }\n    }\n    return res;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes) {\n    return routes.some(function (r) { return emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet(r) !== PRIMARY_OUTLET; });\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathMatches(segmentGroup, slicedSegments, routes) {\n    return routes.some(function (r) { return emptyPathMatch(segmentGroup, slicedSegments, r); });\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} r\n * @return {?}\n */\nfunction emptyPathMatch(segmentGroup, slicedSegments, r) {\n    if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full') {\n        return false;\n    }\n    return r.path === '' && r.redirectTo === undefined;\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getOutlet(route) {\n    return route.outlet || PRIMARY_OUTLET;\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getData(route) {\n    return route.data || {};\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getResolve(route) {\n    return route.resolve || {};\n}\n//# sourceMappingURL=recognize.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { map, mergeMap } from 'rxjs/operators';\nimport { recognize as recognizeFn } from '../recognize';\n/**\n * @param {?} rootComponentType\n * @param {?} config\n * @param {?} serializer\n * @param {?} paramsInheritanceStrategy\n * @param {?} relativeLinkResolution\n * @return {?}\n */\nexport function recognize(rootComponentType, config, serializer, paramsInheritanceStrategy, relativeLinkResolution) {\n    return function (source) {\n        return source.pipe(mergeMap(function (t) { return recognizeFn(rootComponentType, config, t.urlAfterRedirects, serializer(t.urlAfterRedirects), paramsInheritanceStrategy, relativeLinkResolution)\n            .pipe(map(function (targetSnapshot) { return (tslib_1.__assign({}, t, { targetSnapshot: targetSnapshot })); })); }));\n    };\n}\n//# sourceMappingURL=recognize.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { from, of } from 'rxjs';\nimport { concatMap, last, map, mergeMap, reduce } from 'rxjs/operators';\nimport { inheritedParamsDataResolve } from '../router_state';\nimport { wrapIntoObservable } from '../utils/collection';\nimport { getToken } from '../utils/preactivation';\n/**\n * @param {?} paramsInheritanceStrategy\n * @param {?} moduleInjector\n * @return {?}\n */\nexport function resolveData(paramsInheritanceStrategy, moduleInjector) {\n    return function (source) {\n        return source.pipe(mergeMap(function (t) {\n            var targetSnapshot = t.targetSnapshot, canActivateChecks = t.guards.canActivateChecks;\n            if (!canActivateChecks.length) {\n                return of(t);\n            }\n            return from(canActivateChecks)\n                .pipe(concatMap(function (check) { return runResolve(check.route, /** @type {?} */ ((targetSnapshot)), paramsInheritanceStrategy, moduleInjector); }), reduce(function (_, __) { return _; }), map(function (_) { return t; }));\n        }));\n    };\n}\n/**\n * @param {?} futureARS\n * @param {?} futureRSS\n * @param {?} paramsInheritanceStrategy\n * @param {?} moduleInjector\n * @return {?}\n */\nfunction runResolve(futureARS, futureRSS, paramsInheritanceStrategy, moduleInjector) {\n    /** @type {?} */\n    var resolve = futureARS._resolve;\n    return resolveNode(resolve, futureARS, futureRSS, moduleInjector)\n        .pipe(map(function (resolvedData) {\n        futureARS._resolvedData = resolvedData;\n        futureARS.data = tslib_1.__assign({}, futureARS.data, inheritedParamsDataResolve(futureARS, paramsInheritanceStrategy).resolve);\n        return null;\n    }));\n}\n/**\n * @param {?} resolve\n * @param {?} futureARS\n * @param {?} futureRSS\n * @param {?} moduleInjector\n * @return {?}\n */\nfunction resolveNode(resolve, futureARS, futureRSS, moduleInjector) {\n    /** @type {?} */\n    var keys = Object.keys(resolve);\n    if (keys.length === 0) {\n        return of({});\n    }\n    if (keys.length === 1) {\n        /** @type {?} */\n        var key_1 = keys[0];\n        return getResolver(resolve[key_1], futureARS, futureRSS, moduleInjector)\n            .pipe(map(function (value) {\n            var _a;\n            return _a = {}, _a[key_1] = value, _a;\n        }));\n    }\n    /** @type {?} */\n    var data = {};\n    /** @type {?} */\n    var runningResolvers$ = from(keys).pipe(mergeMap(function (key) {\n        return getResolver(resolve[key], futureARS, futureRSS, moduleInjector)\n            .pipe(map(function (value) {\n            data[key] = value;\n            return value;\n        }));\n    }));\n    return runningResolvers$.pipe(last(), map(function () { return data; }));\n}\n/**\n * @param {?} injectionToken\n * @param {?} futureARS\n * @param {?} futureRSS\n * @param {?} moduleInjector\n * @return {?}\n */\nfunction getResolver(injectionToken, futureARS, futureRSS, moduleInjector) {\n    /** @type {?} */\n    var resolver = getToken(injectionToken, futureARS, moduleInjector);\n    return resolver.resolve ? wrapIntoObservable(resolver.resolve(futureARS, futureRSS)) :\n        wrapIntoObservable(resolver(futureARS, futureRSS));\n}\n//# sourceMappingURL=resolve_data.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { from } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n/**\n * Perform a side effect through a switchMap for every emission on the source Observable,\n * but return an Observable that is identical to the source. It's essentially the same as\n * the `tap` operator, but if the side effectful `next` function returns an ObservableInput,\n * it will wait before continuing with the original value.\n * @template T\n * @param {?} next\n * @return {?}\n */\nexport function switchTap(next) {\n    return function (source) {\n        return source.pipe(switchMap(function (v) {\n            /** @type {?} */\n            var nextResult = next(v);\n            if (nextResult) {\n                return from(nextResult).pipe(map(function () { return v; }));\n            }\n            return from([v]);\n        }));\n    };\n}\n//# sourceMappingURL=switch_tap.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @typedef {?} */\nvar DetachedRouteHandle;\nexport { DetachedRouteHandle };\n/** @typedef {?} */\nvar DetachedRouteHandleInternal;\nexport { DetachedRouteHandleInternal };\n/**\n * \\@description\n *\n * Provides a way to customize when activated routes get reused.\n *\n * \\@publicApi\n * @abstract\n */\nvar /**\n * \\@description\n *\n * Provides a way to customize when activated routes get reused.\n *\n * \\@publicApi\n * @abstract\n */\nRouteReuseStrategy = /** @class */ (function () {\n    function RouteReuseStrategy() {\n    }\n    return RouteReuseStrategy;\n}());\n/**\n * \\@description\n *\n * Provides a way to customize when activated routes get reused.\n *\n * \\@publicApi\n * @abstract\n */\nexport { RouteReuseStrategy };\nif (false) {\n    /**\n     * Determines if this route (and its subtree) should be detached to be reused later\n     * @abstract\n     * @param {?} route\n     * @return {?}\n     */\n    RouteReuseStrategy.prototype.shouldDetach = function (route) { };\n    /**\n     * Stores the detached route.\n     *\n     * Storing a `null` value should erase the previously stored value.\n     * @abstract\n     * @param {?} route\n     * @param {?} handle\n     * @return {?}\n     */\n    RouteReuseStrategy.prototype.store = function (route, handle) { };\n    /**\n     * Determines if this route (and its subtree) should be reattached\n     * @abstract\n     * @param {?} route\n     * @return {?}\n     */\n    RouteReuseStrategy.prototype.shouldAttach = function (route) { };\n    /**\n     * Retrieves the previously stored route\n     * @abstract\n     * @param {?} route\n     * @return {?}\n     */\n    RouteReuseStrategy.prototype.retrieve = function (route) { };\n    /**\n     * Determines if a route should be reused\n     * @abstract\n     * @param {?} future\n     * @param {?} curr\n     * @return {?}\n     */\n    RouteReuseStrategy.prototype.shouldReuseRoute = function (future, curr) { };\n}\n/**\n * Does not detach any subtrees. Reuses routes as long as their route config is the same.\n */\nvar /**\n * Does not detach any subtrees. Reuses routes as long as their route config is the same.\n */\nDefaultRouteReuseStrategy = /** @class */ (function () {\n    function DefaultRouteReuseStrategy() {\n    }\n    /**\n     * @param {?} route\n     * @return {?}\n     */\n    DefaultRouteReuseStrategy.prototype.shouldDetach = /**\n     * @param {?} route\n     * @return {?}\n     */\n    function (route) { return false; };\n    /**\n     * @param {?} route\n     * @param {?} detachedTree\n     * @return {?}\n     */\n    DefaultRouteReuseStrategy.prototype.store = /**\n     * @param {?} route\n     * @param {?} detachedTree\n     * @return {?}\n     */\n    function (route, detachedTree) { };\n    /**\n     * @param {?} route\n     * @return {?}\n     */\n    DefaultRouteReuseStrategy.prototype.shouldAttach = /**\n     * @param {?} route\n     * @return {?}\n     */\n    function (route) { return false; };\n    /**\n     * @param {?} route\n     * @return {?}\n     */\n    DefaultRouteReuseStrategy.prototype.retrieve = /**\n     * @param {?} route\n     * @return {?}\n     */\n    function (route) { return null; };\n    /**\n     * @param {?} future\n     * @param {?} curr\n     * @return {?}\n     */\n    DefaultRouteReuseStrategy.prototype.shouldReuseRoute = /**\n     * @param {?} future\n     * @param {?} curr\n     * @return {?}\n     */\n    function (future, curr) {\n        return future.routeConfig === curr.routeConfig;\n    };\n    return DefaultRouteReuseStrategy;\n}());\n/**\n * Does not detach any subtrees. Reuses routes as long as their route config is the same.\n */\nexport { DefaultRouteReuseStrategy };\n//# sourceMappingURL=route_reuse_strategy.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, NgModuleFactory } from '@angular/core';\nimport { from, of } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { LoadedRouterConfig, standardizeConfig } from './config';\nimport { flatten, wrapIntoObservable } from './utils/collection';\n/** *\n * \\@docsNotRequired\n * \\@publicApi\n  @type {?} */\nexport var ROUTES = new InjectionToken('ROUTES');\nvar RouterConfigLoader = /** @class */ (function () {\n    function RouterConfigLoader(loader, compiler, onLoadStartListener, onLoadEndListener) {\n        this.loader = loader;\n        this.compiler = compiler;\n        this.onLoadStartListener = onLoadStartListener;\n        this.onLoadEndListener = onLoadEndListener;\n    }\n    /**\n     * @param {?} parentInjector\n     * @param {?} route\n     * @return {?}\n     */\n    RouterConfigLoader.prototype.load = /**\n     * @param {?} parentInjector\n     * @param {?} route\n     * @return {?}\n     */\n    function (parentInjector, route) {\n        var _this = this;\n        if (this.onLoadStartListener) {\n            this.onLoadStartListener(route);\n        }\n        /** @type {?} */\n        var moduleFactory$ = this.loadModuleFactory(/** @type {?} */ ((route.loadChildren)));\n        return moduleFactory$.pipe(map(function (factory) {\n            if (_this.onLoadEndListener) {\n                _this.onLoadEndListener(route);\n            }\n            /** @type {?} */\n            var module = factory.create(parentInjector);\n            return new LoadedRouterConfig(flatten(module.injector.get(ROUTES)).map(standardizeConfig), module);\n        }));\n    };\n    /**\n     * @param {?} loadChildren\n     * @return {?}\n     */\n    RouterConfigLoader.prototype.loadModuleFactory = /**\n     * @param {?} loadChildren\n     * @return {?}\n     */\n    function (loadChildren) {\n        var _this = this;\n        if (typeof loadChildren === 'string') {\n            return from(this.loader.load(loadChildren));\n        }\n        else {\n            return wrapIntoObservable(loadChildren()).pipe(mergeMap(function (t) {\n                if (t instanceof NgModuleFactory) {\n                    return of(t);\n                }\n                else {\n                    return from(_this.compiler.compileModuleAsync(t));\n                }\n            }));\n        }\n    };\n    return RouterConfigLoader;\n}());\nexport { RouterConfigLoader };\nif (false) {\n    /** @type {?} */\n    RouterConfigLoader.prototype.loader;\n    /** @type {?} */\n    RouterConfigLoader.prototype.compiler;\n    /** @type {?} */\n    RouterConfigLoader.prototype.onLoadStartListener;\n    /** @type {?} */\n    RouterConfigLoader.prototype.onLoadEndListener;\n}\n//# sourceMappingURL=router_config_loader.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@description\n *\n * Provides a way to migrate AngularJS applications to Angular.\n *\n * \\@publicApi\n * @abstract\n */\nvar /**\n * \\@description\n *\n * Provides a way to migrate AngularJS applications to Angular.\n *\n * \\@publicApi\n * @abstract\n */\nUrlHandlingStrategy = /** @class */ (function () {\n    function UrlHandlingStrategy() {\n    }\n    return UrlHandlingStrategy;\n}());\n/**\n * \\@description\n *\n * Provides a way to migrate AngularJS applications to Angular.\n *\n * \\@publicApi\n * @abstract\n */\nexport { UrlHandlingStrategy };\nif (false) {\n    /**\n     * Tells the router if this URL should be processed.\n     *\n     * When it returns true, the router will execute the regular navigation.\n     * When it returns false, the router will set the router state to an empty state.\n     * As a result, all the active components will be destroyed.\n     *\n     * @abstract\n     * @param {?} url\n     * @return {?}\n     */\n    UrlHandlingStrategy.prototype.shouldProcessUrl = function (url) { };\n    /**\n     * Extracts the part of the URL that should be handled by the router.\n     * The rest of the URL will remain untouched.\n     * @abstract\n     * @param {?} url\n     * @return {?}\n     */\n    UrlHandlingStrategy.prototype.extract = function (url) { };\n    /**\n     * Merges the URL fragment with the rest of the URL.\n     * @abstract\n     * @param {?} newUrlPart\n     * @param {?} rawUrl\n     * @return {?}\n     */\n    UrlHandlingStrategy.prototype.merge = function (newUrlPart, rawUrl) { };\n}\n/**\n * \\@publicApi\n */\nvar /**\n * \\@publicApi\n */\nDefaultUrlHandlingStrategy = /** @class */ (function () {\n    function DefaultUrlHandlingStrategy() {\n    }\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    DefaultUrlHandlingStrategy.prototype.shouldProcessUrl = /**\n     * @param {?} url\n     * @return {?}\n     */\n    function (url) { return true; };\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    DefaultUrlHandlingStrategy.prototype.extract = /**\n     * @param {?} url\n     * @return {?}\n     */\n    function (url) { return url; };\n    /**\n     * @param {?} newUrlPart\n     * @param {?} wholeUrl\n     * @return {?}\n     */\n    DefaultUrlHandlingStrategy.prototype.merge = /**\n     * @param {?} newUrlPart\n     * @param {?} wholeUrl\n     * @return {?}\n     */\n    function (newUrlPart, wholeUrl) { return newUrlPart; };\n    return DefaultUrlHandlingStrategy;\n}());\n/**\n * \\@publicApi\n */\nexport { DefaultUrlHandlingStrategy };\n//# sourceMappingURL=url_handling_strategy.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { NgModuleRef, NgZone, isDevMode, ɵConsole as Console } from '@angular/core';\nimport { BehaviorSubject, EMPTY, Subject, of } from 'rxjs';\nimport { catchError, filter, finalize, map, switchMap, tap } from 'rxjs/operators';\nimport { standardizeConfig, validateConfig } from './config';\nimport { createRouterState } from './create_router_state';\nimport { createUrlTree } from './create_url_tree';\nimport { GuardsCheckEnd, GuardsCheckStart, NavigationCancel, NavigationEnd, NavigationError, NavigationStart, ResolveEnd, ResolveStart, RouteConfigLoadEnd, RouteConfigLoadStart, RoutesRecognized } from './events';\nimport { activateRoutes } from './operators/activate_routes';\nimport { applyRedirects } from './operators/apply_redirects';\nimport { checkGuards } from './operators/check_guards';\nimport { recognize } from './operators/recognize';\nimport { resolveData } from './operators/resolve_data';\nimport { switchTap } from './operators/switch_tap';\nimport { DefaultRouteReuseStrategy } from './route_reuse_strategy';\nimport { RouterConfigLoader } from './router_config_loader';\nimport { createEmptyState } from './router_state';\nimport { isNavigationCancelingError, navigationCancelingError } from './shared';\nimport { DefaultUrlHandlingStrategy } from './url_handling_strategy';\nimport { containsTree, createEmptyUrlTree } from './url_tree';\nimport { getAllRouteGuards } from './utils/preactivation';\nimport { isUrlTree } from './utils/type_guards';\n/**\n * \\@description\n *\n * Represents the extra options used during navigation.\n *\n * \\@publicApi\n * @record\n */\nexport function NavigationExtras() { }\n/**\n * Enables relative navigation from the current ActivatedRoute.\n *\n * Configuration:\n *\n * ```\n * [{\n *   path: 'parent',\n *   component: ParentComponent,\n *   children: [{\n *     path: 'list',\n *     component: ListComponent\n *   },{\n *     path: 'child',\n *     component: ChildComponent\n *   }]\n * }]\n * ```\n *\n * Navigate to list route from child route:\n *\n * ```\n * \\@Component({...})\n *  class ChildComponent {\n *    constructor(private router: Router, private route: ActivatedRoute) {}\n *\n *    go() {\n *      this.router.navigate(['../list'], { relativeTo: this.route });\n *    }\n *  }\n * ```\n * @type {?|undefined}\n */\nNavigationExtras.prototype.relativeTo;\n/**\n * Sets query parameters to the URL.\n *\n * ```\n * // Navigate to /results?page=1\n * this.router.navigate(['/results'], { queryParams: { page: 1 } });\n * ```\n * @type {?|undefined}\n */\nNavigationExtras.prototype.queryParams;\n/**\n * Sets the hash fragment for the URL.\n *\n * ```\n * // Navigate to /results#top\n * this.router.navigate(['/results'], { fragment: 'top' });\n * ```\n * @type {?|undefined}\n */\nNavigationExtras.prototype.fragment;\n/**\n * Preserves the query parameters for the next navigation.\n *\n * deprecated, use `queryParamsHandling` instead\n *\n * ```\n * // Preserve query params from /results?page=1 to /view?page=1\n * this.router.navigate(['/view'], { preserveQueryParams: true });\n * ```\n *\n * @deprecated since v4\n * @type {?|undefined}\n */\nNavigationExtras.prototype.preserveQueryParams;\n/**\n *  config strategy to handle the query parameters for the next navigation.\n *\n * ```\n * // from /results?page=1 to /view?page=1&page=2\n * this.router.navigate(['/view'], { queryParams: { page: 2 },  queryParamsHandling: \"merge\" });\n * ```\n * @type {?|undefined}\n */\nNavigationExtras.prototype.queryParamsHandling;\n/**\n * Preserves the fragment for the next navigation\n *\n * ```\n * // Preserve fragment from /results#top to /view#top\n * this.router.navigate(['/view'], { preserveFragment: true });\n * ```\n * @type {?|undefined}\n */\nNavigationExtras.prototype.preserveFragment;\n/**\n * Navigates without pushing a new state into history.\n *\n * ```\n * // Navigate silently to /view\n * this.router.navigate(['/view'], { skipLocationChange: true });\n * ```\n * @type {?|undefined}\n */\nNavigationExtras.prototype.skipLocationChange;\n/**\n * Navigates while replacing the current state in history.\n *\n * ```\n * // Navigate to /view\n * this.router.navigate(['/view'], { replaceUrl: true });\n * ```\n * @type {?|undefined}\n */\nNavigationExtras.prototype.replaceUrl;\n/** @typedef {?} */\nvar ErrorHandler;\nexport { ErrorHandler };\n/**\n * @param {?} error\n * @return {?}\n */\nfunction defaultErrorHandler(error) {\n    throw error;\n}\n/**\n * @param {?} error\n * @param {?} urlSerializer\n * @param {?} url\n * @return {?}\n */\nfunction defaultMalformedUriErrorHandler(error, urlSerializer, url) {\n    return urlSerializer.parse('/');\n}\n/** @typedef {?} */\nvar NavigationTransition;\nexport { NavigationTransition };\n/** @typedef {?} */\nvar RouterHook;\nexport { RouterHook };\n/**\n * \\@internal\n * @param {?} snapshot\n * @param {?} runExtras\n * @return {?}\n */\nfunction defaultRouterHook(snapshot, runExtras) {\n    return /** @type {?} */ (of(null));\n}\n/**\n * \\@description\n *\n * Provides the navigation and url manipulation capabilities.\n *\n * See `Routes` for more details and examples.\n *\n * \\@ngModule RouterModule\n *\n * \\@publicApi\n */\nvar /**\n * \\@description\n *\n * Provides the navigation and url manipulation capabilities.\n *\n * See `Routes` for more details and examples.\n *\n * \\@ngModule RouterModule\n *\n * \\@publicApi\n */\nRouter = /** @class */ (function () {\n    /**\n     * Creates the router service.\n     */\n    // TODO: vsavkin make internal after the final is out.\n    function Router(rootComponentType, urlSerializer, rootContexts, location, injector, loader, compiler, config) {\n        var _this = this;\n        this.rootComponentType = rootComponentType;\n        this.urlSerializer = urlSerializer;\n        this.rootContexts = rootContexts;\n        this.location = location;\n        this.config = config;\n        this.navigationId = 0;\n        this.isNgZoneEnabled = false;\n        this.events = new Subject();\n        /**\n         * Error handler that is invoked when a navigation errors.\n         *\n         * See `ErrorHandler` for more information.\n         */\n        this.errorHandler = defaultErrorHandler;\n        /**\n         * Malformed uri error handler is invoked when `Router.parseUrl(url)` throws an\n         * error due to containing an invalid character. The most common case would be a `%` sign\n         * that's not encoded and is not part of a percent encoded sequence.\n         */\n        this.malformedUriErrorHandler = defaultMalformedUriErrorHandler;\n        /**\n         * Indicates if at least one navigation happened.\n         */\n        this.navigated = false;\n        this.lastSuccessfulId = -1;\n        /**\n         * Used by RouterModule. This allows us to\n         * pause the navigation either before preactivation or after it.\n         * \\@internal\n         */\n        this.hooks = {\n            beforePreactivation: defaultRouterHook,\n            afterPreactivation: defaultRouterHook\n        };\n        /**\n         * Extracts and merges URLs. Used for AngularJS to Angular migrations.\n         */\n        this.urlHandlingStrategy = new DefaultUrlHandlingStrategy();\n        this.routeReuseStrategy = new DefaultRouteReuseStrategy();\n        /**\n         * Define what the router should do if it receives a navigation request to the current URL.\n         * By default, the router will ignore this navigation. However, this prevents features such\n         * as a \"refresh\" button. Use this option to configure the behavior when navigating to the\n         * current URL. Default is 'ignore'.\n         */\n        this.onSameUrlNavigation = 'ignore';\n        /**\n         * Defines how the router merges params, data and resolved data from parent to child\n         * routes. Available options are:\n         *\n         * - `'emptyOnly'`, the default, only inherits parent params for path-less or component-less\n         *   routes.\n         * - `'always'`, enables unconditional inheritance of parent params.\n         */\n        this.paramsInheritanceStrategy = 'emptyOnly';\n        /**\n         * Defines when the router updates the browser URL. The default behavior is to update after\n         * successful navigation. However, some applications may prefer a mode where the URL gets\n         * updated at the beginning of navigation. The most common use case would be updating the\n         * URL early so if navigation fails, you can show an error message with the URL that failed.\n         * Available options are:\n         *\n         * - `'deferred'`, the default, updates the browser URL after navigation has finished.\n         * - `'eager'`, updates browser URL at the beginning of navigation.\n         */\n        this.urlUpdateStrategy = 'deferred';\n        /**\n         * See {\\@link RouterModule} for more information.\n         */\n        this.relativeLinkResolution = 'legacy';\n        /** @type {?} */\n        var onLoadStart = function (r) { return _this.triggerEvent(new RouteConfigLoadStart(r)); };\n        /** @type {?} */\n        var onLoadEnd = function (r) { return _this.triggerEvent(new RouteConfigLoadEnd(r)); };\n        this.ngModule = injector.get(NgModuleRef);\n        this.console = injector.get(Console);\n        /** @type {?} */\n        var ngZone = injector.get(NgZone);\n        this.isNgZoneEnabled = ngZone instanceof NgZone;\n        this.resetConfig(config);\n        this.currentUrlTree = createEmptyUrlTree();\n        this.rawUrlTree = this.currentUrlTree;\n        this.configLoader = new RouterConfigLoader(loader, compiler, onLoadStart, onLoadEnd);\n        this.routerState = createEmptyState(this.currentUrlTree, this.rootComponentType);\n        this.transitions = new BehaviorSubject({\n            id: 0,\n            currentUrlTree: this.currentUrlTree,\n            currentRawUrl: this.currentUrlTree,\n            extractedUrl: this.urlHandlingStrategy.extract(this.currentUrlTree),\n            urlAfterRedirects: this.urlHandlingStrategy.extract(this.currentUrlTree),\n            rawUrl: this.currentUrlTree,\n            extras: {},\n            resolve: null,\n            reject: null,\n            promise: Promise.resolve(true),\n            source: 'imperative',\n            state: null,\n            currentSnapshot: this.routerState.snapshot,\n            targetSnapshot: null,\n            currentRouterState: this.routerState,\n            targetRouterState: null,\n            guards: { canActivateChecks: [], canDeactivateChecks: [] },\n            guardsResult: null,\n        });\n        this.navigations = this.setupNavigations(this.transitions);\n        this.processNavigations();\n    }\n    /**\n     * @param {?} transitions\n     * @return {?}\n     */\n    Router.prototype.setupNavigations = /**\n     * @param {?} transitions\n     * @return {?}\n     */\n    function (transitions) {\n        var _this = this;\n        /** @type {?} */\n        var eventsSubject = (/** @type {?} */ (this.events));\n        return /** @type {?} */ ((transitions.pipe(filter(function (t) { return t.id !== 0; }), \n        // Extract URL\n        map(function (t) { return (/** @type {?} */ (tslib_1.__assign({}, t, { extractedUrl: _this.urlHandlingStrategy.extract(t.rawUrl) }))); }), \n        // Using switchMap so we cancel executing navigations when a new one comes in\n        switchMap(function (t) {\n            /** @type {?} */\n            var completed = false;\n            /** @type {?} */\n            var errored = false;\n            return of(t).pipe(switchMap(function (t) {\n                /** @type {?} */\n                var urlTransition = !_this.navigated || t.extractedUrl.toString() !== _this.currentUrlTree.toString();\n                /** @type {?} */\n                var processCurrentUrl = (_this.onSameUrlNavigation === 'reload' ? true : urlTransition) &&\n                    _this.urlHandlingStrategy.shouldProcessUrl(t.rawUrl);\n                if (processCurrentUrl) {\n                    return of(t).pipe(\n                    // Update URL if in `eager` update mode\n                    tap(function (t) { return _this.urlUpdateStrategy === 'eager' && !t.extras.skipLocationChange &&\n                        _this.setBrowserUrl(t.rawUrl, !!t.extras.replaceUrl, t.id); }), \n                    // Fire NavigationStart event\n                    switchMap(function (t) {\n                        /** @type {?} */\n                        var transition = _this.transitions.getValue();\n                        eventsSubject.next(new NavigationStart(t.id, _this.serializeUrl(t.extractedUrl), t.source, t.state));\n                        if (transition !== _this.transitions.getValue()) {\n                            return EMPTY;\n                        }\n                        return [t];\n                    }), \n                    // This delay is required to match old behavior that forced navigation to\n                    // always be async\n                    switchMap(function (t) { return Promise.resolve(t); }), \n                    // ApplyRedirects\n                    applyRedirects(_this.ngModule.injector, _this.configLoader, _this.urlSerializer, _this.config), \n                    // Recognize\n                    recognize(_this.rootComponentType, _this.config, function (url) { return _this.serializeUrl(url); }, _this.paramsInheritanceStrategy, _this.relativeLinkResolution), \n                    // Fire RoutesRecognized\n                    tap(function (t) {\n                        /** @type {?} */\n                        var routesRecognized = new RoutesRecognized(t.id, _this.serializeUrl(t.extractedUrl), _this.serializeUrl(t.urlAfterRedirects), /** @type {?} */ ((t.targetSnapshot)));\n                        eventsSubject.next(routesRecognized);\n                    }));\n                }\n                else {\n                    /** @type {?} */\n                    var processPreviousUrl = urlTransition && _this.rawUrlTree &&\n                        _this.urlHandlingStrategy.shouldProcessUrl(_this.rawUrlTree);\n                    /* When the current URL shouldn't be processed, but the previous one was, we\n                                       * handle this \"error condition\" by navigating to the previously successful URL,\n                                       * but leaving the URL intact.*/\n                    if (processPreviousUrl) {\n                        var id = t.id, extractedUrl = t.extractedUrl, source = t.source, state = t.state, extras = t.extras;\n                        /** @type {?} */\n                        var navStart = new NavigationStart(id, _this.serializeUrl(extractedUrl), source, state);\n                        eventsSubject.next(navStart);\n                        /** @type {?} */\n                        var targetSnapshot = createEmptyState(extractedUrl, _this.rootComponentType).snapshot;\n                        return of(tslib_1.__assign({}, t, { targetSnapshot: targetSnapshot, urlAfterRedirects: extractedUrl, extras: tslib_1.__assign({}, extras, { skipLocationChange: false, replaceUrl: false }) }));\n                    }\n                    else {\n                        /* When neither the current or previous URL can be processed, do nothing other\n                                             * than update router's internal reference to the current \"settled\" URL. This\n                                             * way the next navigation will be coming from the current URL in the browser.\n                                             */\n                        _this.rawUrlTree = t.rawUrl;\n                        t.resolve(null);\n                        return EMPTY;\n                    }\n                }\n            }), \n            // Before Preactivation\n            switchTap(function (t) {\n                var targetSnapshot = t.targetSnapshot, navigationId = t.id, appliedUrlTree = t.extractedUrl, rawUrlTree = t.rawUrl, _a = t.extras, skipLocationChange = _a.skipLocationChange, replaceUrl = _a.replaceUrl;\n                return _this.hooks.beforePreactivation(/** @type {?} */ ((targetSnapshot)), {\n                    navigationId: navigationId,\n                    appliedUrlTree: appliedUrlTree,\n                    rawUrlTree: rawUrlTree,\n                    skipLocationChange: !!skipLocationChange,\n                    replaceUrl: !!replaceUrl,\n                });\n            }), \n            // --- GUARDS ---\n            tap(function (t) {\n                /** @type {?} */\n                var guardsStart = new GuardsCheckStart(t.id, _this.serializeUrl(t.extractedUrl), _this.serializeUrl(t.urlAfterRedirects), /** @type {?} */ ((t.targetSnapshot)));\n                _this.triggerEvent(guardsStart);\n            }), map(function (t) { return (tslib_1.__assign({}, t, { guards: getAllRouteGuards(/** @type {?} */ ((t.targetSnapshot)), t.currentSnapshot, _this.rootContexts) })); }), checkGuards(_this.ngModule.injector, function (evt) { return _this.triggerEvent(evt); }), tap(function (t) {\n                if (isUrlTree(t.guardsResult)) {\n                    /** @type {?} */\n                    var error = navigationCancelingError(\"Redirecting to \\\"\" + _this.serializeUrl(t.guardsResult) + \"\\\"\");\n                    error.url = t.guardsResult;\n                    throw error;\n                }\n            }), tap(function (t) {\n                /** @type {?} */\n                var guardsEnd = new GuardsCheckEnd(t.id, _this.serializeUrl(t.extractedUrl), _this.serializeUrl(t.urlAfterRedirects), /** @type {?} */ ((t.targetSnapshot)), !!t.guardsResult);\n                _this.triggerEvent(guardsEnd);\n            }), filter(function (t) {\n                if (!t.guardsResult) {\n                    _this.resetUrlToCurrentUrlTree();\n                    /** @type {?} */\n                    var navCancel = new NavigationCancel(t.id, _this.serializeUrl(t.extractedUrl), '');\n                    eventsSubject.next(navCancel);\n                    t.resolve(false);\n                    return false;\n                }\n                return true;\n            }), \n            // --- RESOLVE ---\n            switchTap(function (t) {\n                if (t.guards.canActivateChecks.length) {\n                    return of(t).pipe(tap(function (t) {\n                        /** @type {?} */\n                        var resolveStart = new ResolveStart(t.id, _this.serializeUrl(t.extractedUrl), _this.serializeUrl(t.urlAfterRedirects), /** @type {?} */ ((t.targetSnapshot)));\n                        _this.triggerEvent(resolveStart);\n                    }), resolveData(_this.paramsInheritanceStrategy, _this.ngModule.injector), //\n                    //\n                    tap(function (t) {\n                        /** @type {?} */\n                        var resolveEnd = new ResolveEnd(t.id, _this.serializeUrl(t.extractedUrl), _this.serializeUrl(t.urlAfterRedirects), /** @type {?} */ ((t.targetSnapshot)));\n                        _this.triggerEvent(resolveEnd);\n                    }));\n                }\n                return undefined;\n            }), \n            // --- AFTER PREACTIVATION ---\n            switchTap(function (t) {\n                var targetSnapshot = t.targetSnapshot, navigationId = t.id, appliedUrlTree = t.extractedUrl, rawUrlTree = t.rawUrl, _a = t.extras, skipLocationChange = _a.skipLocationChange, replaceUrl = _a.replaceUrl;\n                return _this.hooks.afterPreactivation(/** @type {?} */ ((targetSnapshot)), {\n                    navigationId: navigationId,\n                    appliedUrlTree: appliedUrlTree,\n                    rawUrlTree: rawUrlTree,\n                    skipLocationChange: !!skipLocationChange,\n                    replaceUrl: !!replaceUrl,\n                });\n            }), map(function (t) {\n                /** @type {?} */\n                var targetRouterState = createRouterState(_this.routeReuseStrategy, /** @type {?} */ ((t.targetSnapshot)), t.currentRouterState);\n                return (tslib_1.__assign({}, t, { targetRouterState: targetRouterState }));\n            }), /* Once here, we are about to activate syncronously. The assumption is this will\n                             succeed, and user code may read from the Router service. Therefore before\n                             activation, we need to update router properties storing the current URL and the\n                             RouterState, as well as updated the browser URL. All this should happen *before*\n                             activating. */\n            tap(function (t) {\n                _this.currentUrlTree = t.urlAfterRedirects;\n                _this.rawUrlTree = _this.urlHandlingStrategy.merge(_this.currentUrlTree, t.rawUrl);\n                (/** @type {?} */ (_this)).routerState = /** @type {?} */ ((t.targetRouterState));\n                if (_this.urlUpdateStrategy === 'deferred' && !t.extras.skipLocationChange) {\n                    _this.setBrowserUrl(_this.rawUrlTree, !!t.extras.replaceUrl, t.id);\n                }\n            }), activateRoutes(_this.rootContexts, _this.routeReuseStrategy, function (evt) { return _this.triggerEvent(evt); }), tap({\n                next: /**\n                 * @return {?}\n                 */\n                function () { completed = true; }, complete: /**\n                 * @return {?}\n                 */\n                function () { completed = true; }\n            }), finalize(function () {\n                /* When the navigation stream finishes either through error or success, we set the\n                                 * `completed` or `errored` flag. However, there are some situations where we could\n                                 * get here without either of those being set. For instance, a redirect during\n                                 * NavigationStart. Therefore, this is a catch-all to make sure the NavigationCancel\n                                 * event is fired when a navigation gets cancelled but not caught by other means. */\n                if (!completed && !errored) {\n                    // Must reset to current URL tree here to ensure history.state is set. On a fresh\n                    // page load, if a new navigation comes in before a successful navigation\n                    // completes, there will be nothing in history.state.navigationId. This can cause\n                    // sync problems with AngularJS sync code which looks for a value here in order\n                    // to determine whether or not to handle a given popstate event or to leave it\n                    // to the Angualr router.\n                    _this.resetUrlToCurrentUrlTree();\n                    /** @type {?} */\n                    var navCancel = new NavigationCancel(t.id, _this.serializeUrl(t.extractedUrl), \"Navigation ID \" + t.id + \" is not equal to the current navigation id \" + _this.navigationId);\n                    eventsSubject.next(navCancel);\n                    t.resolve(false);\n                }\n            }), catchError(function (e) {\n                errored = true;\n                /* This error type is issued during Redirect, and is handled as a cancellation\n                                 * rather than an error. */\n                if (isNavigationCancelingError(e)) {\n                    _this.navigated = true;\n                    /** @type {?} */\n                    var redirecting = isUrlTree(e.url);\n                    if (!redirecting) {\n                        _this.resetStateAndUrl(t.currentRouterState, t.currentUrlTree, t.rawUrl);\n                    }\n                    /** @type {?} */\n                    var navCancel = new NavigationCancel(t.id, _this.serializeUrl(t.extractedUrl), e.message);\n                    eventsSubject.next(navCancel);\n                    t.resolve(false);\n                    if (redirecting) {\n                        _this.navigateByUrl(e.url);\n                    }\n                    /* All other errors should reset to the router's internal URL reference to the\n                                       * pre-error state. */\n                }\n                else {\n                    _this.resetStateAndUrl(t.currentRouterState, t.currentUrlTree, t.rawUrl);\n                    /** @type {?} */\n                    var navError = new NavigationError(t.id, _this.serializeUrl(t.extractedUrl), e);\n                    eventsSubject.next(navError);\n                    try {\n                        t.resolve(_this.errorHandler(e));\n                    }\n                    catch (ee) {\n                        t.reject(ee);\n                    }\n                }\n                return EMPTY;\n            }));\n            // TODO(jasonaden): remove cast once g3 is on updated TypeScript\n        }))));\n    };\n    /**\n     * @internal\n     * TODO: this should be removed once the constructor of the router made internal\n     */\n    /**\n     * \\@internal\n     * TODO: this should be removed once the constructor of the router made internal\n     * @param {?} rootComponentType\n     * @return {?}\n     */\n    Router.prototype.resetRootComponentType = /**\n     * \\@internal\n     * TODO: this should be removed once the constructor of the router made internal\n     * @param {?} rootComponentType\n     * @return {?}\n     */\n    function (rootComponentType) {\n        this.rootComponentType = rootComponentType;\n        // TODO: vsavkin router 4.0 should make the root component set to null\n        // this will simplify the lifecycle of the router.\n        this.routerState.root.component = this.rootComponentType;\n    };\n    /**\n     * @return {?}\n     */\n    Router.prototype.getTransition = /**\n     * @return {?}\n     */\n    function () { return this.transitions.value; };\n    /**\n     * @param {?} t\n     * @return {?}\n     */\n    Router.prototype.setTransition = /**\n     * @param {?} t\n     * @return {?}\n     */\n    function (t) {\n        this.transitions.next(tslib_1.__assign({}, this.getTransition(), t));\n    };\n    /**\n     * Sets up the location change listener and performs the initial navigation.\n     */\n    /**\n     * Sets up the location change listener and performs the initial navigation.\n     * @return {?}\n     */\n    Router.prototype.initialNavigation = /**\n     * Sets up the location change listener and performs the initial navigation.\n     * @return {?}\n     */\n    function () {\n        this.setUpLocationChangeListener();\n        if (this.navigationId === 0) {\n            this.navigateByUrl(this.location.path(true), { replaceUrl: true });\n        }\n    };\n    /**\n     * Sets up the location change listener.\n     */\n    /**\n     * Sets up the location change listener.\n     * @return {?}\n     */\n    Router.prototype.setUpLocationChangeListener = /**\n     * Sets up the location change listener.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        // Don't need to use Zone.wrap any more, because zone.js\n        // already patch onPopState, so location change callback will\n        // run into ngZone\n        if (!this.locationSubscription) {\n            this.locationSubscription = /** @type {?} */ (this.location.subscribe(function (change) {\n                /** @type {?} */\n                var rawUrlTree = _this.parseUrl(change['url']);\n                /** @type {?} */\n                var source = change['type'] === 'popstate' ? 'popstate' : 'hashchange';\n                /** @type {?} */\n                var state = change.state && change.state.navigationId ?\n                    { navigationId: change.state.navigationId } :\n                    null;\n                setTimeout(function () { _this.scheduleNavigation(rawUrlTree, source, state, { replaceUrl: true }); }, 0);\n            }));\n        }\n    };\n    Object.defineProperty(Router.prototype, \"url\", {\n        /** The current url */\n        get: /**\n         * The current url\n         * @return {?}\n         */\n        function () { return this.serializeUrl(this.currentUrlTree); },\n        enumerable: true,\n        configurable: true\n    });\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} event\n     * @return {?}\n     */\n    Router.prototype.triggerEvent = /**\n     * \\@internal\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) { (/** @type {?} */ (this.events)).next(event); };\n    /**\n     * Resets the configuration used for navigation and generating links.\n     *\n     * @usageNotes\n     *\n     * ### Example\n     *\n     * ```\n     * router.resetConfig([\n     *  { path: 'team/:id', component: TeamCmp, children: [\n     *    { path: 'simple', component: SimpleCmp },\n     *    { path: 'user/:name', component: UserCmp }\n     *  ]}\n     * ]);\n     * ```\n     */\n    /**\n     * Resets the configuration used for navigation and generating links.\n     *\n     * \\@usageNotes\n     *\n     * ### Example\n     *\n     * ```\n     * router.resetConfig([\n     *  { path: 'team/:id', component: TeamCmp, children: [\n     *    { path: 'simple', component: SimpleCmp },\n     *    { path: 'user/:name', component: UserCmp }\n     *  ]}\n     * ]);\n     * ```\n     * @param {?} config\n     * @return {?}\n     */\n    Router.prototype.resetConfig = /**\n     * Resets the configuration used for navigation and generating links.\n     *\n     * \\@usageNotes\n     *\n     * ### Example\n     *\n     * ```\n     * router.resetConfig([\n     *  { path: 'team/:id', component: TeamCmp, children: [\n     *    { path: 'simple', component: SimpleCmp },\n     *    { path: 'user/:name', component: UserCmp }\n     *  ]}\n     * ]);\n     * ```\n     * @param {?} config\n     * @return {?}\n     */\n    function (config) {\n        validateConfig(config);\n        this.config = config.map(standardizeConfig);\n        this.navigated = false;\n        this.lastSuccessfulId = -1;\n    };\n    /** @docsNotRequired */\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    Router.prototype.ngOnDestroy = /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    function () { this.dispose(); };\n    /** Disposes of the router */\n    /**\n     * Disposes of the router\n     * @return {?}\n     */\n    Router.prototype.dispose = /**\n     * Disposes of the router\n     * @return {?}\n     */\n    function () {\n        if (this.locationSubscription) {\n            this.locationSubscription.unsubscribe();\n            this.locationSubscription = /** @type {?} */ ((null));\n        }\n    };\n    /**\n     * Applies an array of commands to the current url tree and creates a new url tree.\n     *\n     * When given an activate route, applies the given commands starting from the route.\n     * When not given a route, applies the given command starting from the root.\n     *\n     * @usageNotes\n     *\n     * ### Example\n     *\n     * ```\n     * // create /team/33/user/11\n     * router.createUrlTree(['/team', 33, 'user', 11]);\n     *\n     * // create /team/33;expand=true/user/11\n     * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n     *\n     * // you can collapse static segments like this (this works only with the first passed-in value):\n     * router.createUrlTree(['/team/33/user', userId]);\n     *\n     * // If the first segment can contain slashes, and you do not want the router to split it, you\n     * // can do the following:\n     *\n     * router.createUrlTree([{segmentPath: '/one/two'}]);\n     *\n     * // create /team/33/(user/11//right:chat)\n     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);\n     *\n     * // remove the right secondary node\n     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n     *\n     * // assuming the current url is `/team/33/user/11` and the route points to `user/11`\n     *\n     * // navigate to /team/33/user/11/details\n     * router.createUrlTree(['details'], {relativeTo: route});\n     *\n     * // navigate to /team/33/user/22\n     * router.createUrlTree(['../22'], {relativeTo: route});\n     *\n     * // navigate to /team/44/user/22\n     * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});\n     * ```\n     */\n    /**\n     * Applies an array of commands to the current url tree and creates a new url tree.\n     *\n     * When given an activate route, applies the given commands starting from the route.\n     * When not given a route, applies the given command starting from the root.\n     *\n     * \\@usageNotes\n     *\n     * ### Example\n     *\n     * ```\n     * // create /team/33/user/11\n     * router.createUrlTree(['/team', 33, 'user', 11]);\n     *\n     * // create /team/33;expand=true/user/11\n     * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n     *\n     * // you can collapse static segments like this (this works only with the first passed-in value):\n     * router.createUrlTree(['/team/33/user', userId]);\n     *\n     * // If the first segment can contain slashes, and you do not want the router to split it, you\n     * // can do the following:\n     *\n     * router.createUrlTree([{segmentPath: '/one/two'}]);\n     *\n     * // create /team/33/(user/11//right:chat)\n     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);\n     *\n     * // remove the right secondary node\n     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n     *\n     * // assuming the current url is `/team/33/user/11` and the route points to `user/11`\n     *\n     * // navigate to /team/33/user/11/details\n     * router.createUrlTree(['details'], {relativeTo: route});\n     *\n     * // navigate to /team/33/user/22\n     * router.createUrlTree(['../22'], {relativeTo: route});\n     *\n     * // navigate to /team/44/user/22\n     * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});\n     * ```\n     * @param {?} commands\n     * @param {?=} navigationExtras\n     * @return {?}\n     */\n    Router.prototype.createUrlTree = /**\n     * Applies an array of commands to the current url tree and creates a new url tree.\n     *\n     * When given an activate route, applies the given commands starting from the route.\n     * When not given a route, applies the given command starting from the root.\n     *\n     * \\@usageNotes\n     *\n     * ### Example\n     *\n     * ```\n     * // create /team/33/user/11\n     * router.createUrlTree(['/team', 33, 'user', 11]);\n     *\n     * // create /team/33;expand=true/user/11\n     * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n     *\n     * // you can collapse static segments like this (this works only with the first passed-in value):\n     * router.createUrlTree(['/team/33/user', userId]);\n     *\n     * // If the first segment can contain slashes, and you do not want the router to split it, you\n     * // can do the following:\n     *\n     * router.createUrlTree([{segmentPath: '/one/two'}]);\n     *\n     * // create /team/33/(user/11//right:chat)\n     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);\n     *\n     * // remove the right secondary node\n     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n     *\n     * // assuming the current url is `/team/33/user/11` and the route points to `user/11`\n     *\n     * // navigate to /team/33/user/11/details\n     * router.createUrlTree(['details'], {relativeTo: route});\n     *\n     * // navigate to /team/33/user/22\n     * router.createUrlTree(['../22'], {relativeTo: route});\n     *\n     * // navigate to /team/44/user/22\n     * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});\n     * ```\n     * @param {?} commands\n     * @param {?=} navigationExtras\n     * @return {?}\n     */\n    function (commands, navigationExtras) {\n        if (navigationExtras === void 0) { navigationExtras = {}; }\n        var relativeTo = navigationExtras.relativeTo, queryParams = navigationExtras.queryParams, fragment = navigationExtras.fragment, preserveQueryParams = navigationExtras.preserveQueryParams, queryParamsHandling = navigationExtras.queryParamsHandling, preserveFragment = navigationExtras.preserveFragment;\n        if (isDevMode() && preserveQueryParams && /** @type {?} */ (console) && /** @type {?} */ (console.warn)) {\n            console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');\n        }\n        /** @type {?} */\n        var a = relativeTo || this.routerState.root;\n        /** @type {?} */\n        var f = preserveFragment ? this.currentUrlTree.fragment : fragment;\n        /** @type {?} */\n        var q = null;\n        if (queryParamsHandling) {\n            switch (queryParamsHandling) {\n                case 'merge':\n                    q = tslib_1.__assign({}, this.currentUrlTree.queryParams, queryParams);\n                    break;\n                case 'preserve':\n                    q = this.currentUrlTree.queryParams;\n                    break;\n                default:\n                    q = queryParams || null;\n            }\n        }\n        else {\n            q = preserveQueryParams ? this.currentUrlTree.queryParams : queryParams || null;\n        }\n        if (q !== null) {\n            q = this.removeEmptyProps(q);\n        }\n        return createUrlTree(a, this.currentUrlTree, commands, /** @type {?} */ ((q)), /** @type {?} */ ((f)));\n    };\n    /**\n     * Navigate based on the provided url. This navigation is always absolute.\n     *\n     * Returns a promise that:\n     * - resolves to 'true' when navigation succeeds,\n     * - resolves to 'false' when navigation fails,\n     * - is rejected when an error happens.\n     *\n     * @usageNotes\n     *\n     * ### Example\n     *\n     * ```\n     * router.navigateByUrl(\"/team/33/user/11\");\n     *\n     * // Navigate without updating the URL\n     * router.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n     * ```\n     *\n     * Since `navigateByUrl()` takes an absolute URL as the first parameter,\n     * it will not apply any delta to the current URL and ignores any properties\n     * in the second parameter (the `NavigationExtras`) that would change the\n     * provided URL.\n     */\n    /**\n     * Navigate based on the provided url. This navigation is always absolute.\n     *\n     * Returns a promise that:\n     * - resolves to 'true' when navigation succeeds,\n     * - resolves to 'false' when navigation fails,\n     * - is rejected when an error happens.\n     *\n     * \\@usageNotes\n     *\n     * ### Example\n     *\n     * ```\n     * router.navigateByUrl(\"/team/33/user/11\");\n     *\n     * // Navigate without updating the URL\n     * router.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n     * ```\n     *\n     * Since `navigateByUrl()` takes an absolute URL as the first parameter,\n     * it will not apply any delta to the current URL and ignores any properties\n     * in the second parameter (the `NavigationExtras`) that would change the\n     * provided URL.\n     * @param {?} url\n     * @param {?=} extras\n     * @return {?}\n     */\n    Router.prototype.navigateByUrl = /**\n     * Navigate based on the provided url. This navigation is always absolute.\n     *\n     * Returns a promise that:\n     * - resolves to 'true' when navigation succeeds,\n     * - resolves to 'false' when navigation fails,\n     * - is rejected when an error happens.\n     *\n     * \\@usageNotes\n     *\n     * ### Example\n     *\n     * ```\n     * router.navigateByUrl(\"/team/33/user/11\");\n     *\n     * // Navigate without updating the URL\n     * router.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n     * ```\n     *\n     * Since `navigateByUrl()` takes an absolute URL as the first parameter,\n     * it will not apply any delta to the current URL and ignores any properties\n     * in the second parameter (the `NavigationExtras`) that would change the\n     * provided URL.\n     * @param {?} url\n     * @param {?=} extras\n     * @return {?}\n     */\n    function (url, extras) {\n        if (extras === void 0) { extras = { skipLocationChange: false }; }\n        if (isDevMode() && this.isNgZoneEnabled && !NgZone.isInAngularZone()) {\n            this.console.warn(\"Navigation triggered outside Angular zone, did you forget to call 'ngZone.run()'?\");\n        }\n        /** @type {?} */\n        var urlTree = isUrlTree(url) ? url : this.parseUrl(url);\n        /** @type {?} */\n        var mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);\n        return this.scheduleNavigation(mergedTree, 'imperative', null, extras);\n    };\n    /**\n     * Navigate based on the provided array of commands and a starting point.\n     * If no starting route is provided, the navigation is absolute.\n     *\n     * Returns a promise that:\n     * - resolves to 'true' when navigation succeeds,\n     * - resolves to 'false' when navigation fails,\n     * - is rejected when an error happens.\n     *\n     * @usageNotes\n     *\n     * ### Example\n     *\n     * ```\n     * router.navigate(['team', 33, 'user', 11], {relativeTo: route});\n     *\n     * // Navigate without updating the URL\n     * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});\n     * ```\n     *\n     * The first parameter of `navigate()` is a delta to be applied to the current URL\n     * or the one provided in the `relativeTo` property of the second parameter (the\n     * `NavigationExtras`).\n     */\n    /**\n     * Navigate based on the provided array of commands and a starting point.\n     * If no starting route is provided, the navigation is absolute.\n     *\n     * Returns a promise that:\n     * - resolves to 'true' when navigation succeeds,\n     * - resolves to 'false' when navigation fails,\n     * - is rejected when an error happens.\n     *\n     * \\@usageNotes\n     *\n     * ### Example\n     *\n     * ```\n     * router.navigate(['team', 33, 'user', 11], {relativeTo: route});\n     *\n     * // Navigate without updating the URL\n     * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});\n     * ```\n     *\n     * The first parameter of `navigate()` is a delta to be applied to the current URL\n     * or the one provided in the `relativeTo` property of the second parameter (the\n     * `NavigationExtras`).\n     * @param {?} commands\n     * @param {?=} extras\n     * @return {?}\n     */\n    Router.prototype.navigate = /**\n     * Navigate based on the provided array of commands and a starting point.\n     * If no starting route is provided, the navigation is absolute.\n     *\n     * Returns a promise that:\n     * - resolves to 'true' when navigation succeeds,\n     * - resolves to 'false' when navigation fails,\n     * - is rejected when an error happens.\n     *\n     * \\@usageNotes\n     *\n     * ### Example\n     *\n     * ```\n     * router.navigate(['team', 33, 'user', 11], {relativeTo: route});\n     *\n     * // Navigate without updating the URL\n     * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});\n     * ```\n     *\n     * The first parameter of `navigate()` is a delta to be applied to the current URL\n     * or the one provided in the `relativeTo` property of the second parameter (the\n     * `NavigationExtras`).\n     * @param {?} commands\n     * @param {?=} extras\n     * @return {?}\n     */\n    function (commands, extras) {\n        if (extras === void 0) { extras = { skipLocationChange: false }; }\n        validateCommands(commands);\n        return this.navigateByUrl(this.createUrlTree(commands, extras), extras);\n    };\n    /** Serializes a `UrlTree` into a string */\n    /**\n     * Serializes a `UrlTree` into a string\n     * @param {?} url\n     * @return {?}\n     */\n    Router.prototype.serializeUrl = /**\n     * Serializes a `UrlTree` into a string\n     * @param {?} url\n     * @return {?}\n     */\n    function (url) { return this.urlSerializer.serialize(url); };\n    /** Parses a string into a `UrlTree` */\n    /**\n     * Parses a string into a `UrlTree`\n     * @param {?} url\n     * @return {?}\n     */\n    Router.prototype.parseUrl = /**\n     * Parses a string into a `UrlTree`\n     * @param {?} url\n     * @return {?}\n     */\n    function (url) {\n        /** @type {?} */\n        var urlTree;\n        try {\n            urlTree = this.urlSerializer.parse(url);\n        }\n        catch (e) {\n            urlTree = this.malformedUriErrorHandler(e, this.urlSerializer, url);\n        }\n        return urlTree;\n    };\n    /** Returns whether the url is activated */\n    /**\n     * Returns whether the url is activated\n     * @param {?} url\n     * @param {?} exact\n     * @return {?}\n     */\n    Router.prototype.isActive = /**\n     * Returns whether the url is activated\n     * @param {?} url\n     * @param {?} exact\n     * @return {?}\n     */\n    function (url, exact) {\n        if (isUrlTree(url)) {\n            return containsTree(this.currentUrlTree, url, exact);\n        }\n        /** @type {?} */\n        var urlTree = this.parseUrl(url);\n        return containsTree(this.currentUrlTree, urlTree, exact);\n    };\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n    Router.prototype.removeEmptyProps = /**\n     * @param {?} params\n     * @return {?}\n     */\n    function (params) {\n        return Object.keys(params).reduce(function (result, key) {\n            /** @type {?} */\n            var value = params[key];\n            if (value !== null && value !== undefined) {\n                result[key] = value;\n            }\n            return result;\n        }, {});\n    };\n    /**\n     * @return {?}\n     */\n    Router.prototype.processNavigations = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.navigations.subscribe(function (t) {\n            _this.navigated = true;\n            _this.lastSuccessfulId = t.id;\n            (/** @type {?} */ (_this.events))\n                .next(new NavigationEnd(t.id, _this.serializeUrl(t.extractedUrl), _this.serializeUrl(_this.currentUrlTree)));\n            t.resolve(true);\n        }, function (e) { _this.console.warn(\"Unhandled Navigation Error: \"); });\n    };\n    /**\n     * @param {?} rawUrl\n     * @param {?} source\n     * @param {?} state\n     * @param {?} extras\n     * @return {?}\n     */\n    Router.prototype.scheduleNavigation = /**\n     * @param {?} rawUrl\n     * @param {?} source\n     * @param {?} state\n     * @param {?} extras\n     * @return {?}\n     */\n    function (rawUrl, source, state, extras) {\n        /** @type {?} */\n        var lastNavigation = this.getTransition();\n        // If the user triggers a navigation imperatively (e.g., by using navigateByUrl),\n        // and that navigation results in 'replaceState' that leads to the same URL,\n        // we should skip those.\n        if (lastNavigation && source !== 'imperative' && lastNavigation.source === 'imperative' &&\n            lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n            return Promise.resolve(true); // return value is not used\n        }\n        // Because of a bug in IE and Edge, the location class fires two events (popstate and\n        // hashchange) every single time. The second one should be ignored. Otherwise, the URL will\n        // flicker. Handles the case when a popstate was emitted first.\n        if (lastNavigation && source == 'hashchange' && lastNavigation.source === 'popstate' &&\n            lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n            return Promise.resolve(true); // return value is not used\n        }\n        // Because of a bug in IE and Edge, the location class fires two events (popstate and\n        // hashchange) every single time. The second one should be ignored. Otherwise, the URL will\n        // flicker. Handles the case when a hashchange was emitted first.\n        if (lastNavigation && source == 'popstate' && lastNavigation.source === 'hashchange' &&\n            lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n            return Promise.resolve(true); // return value is not used\n        }\n        /** @type {?} */\n        var resolve = null;\n        /** @type {?} */\n        var reject = null;\n        /** @type {?} */\n        var promise = new Promise(function (res, rej) {\n            resolve = res;\n            reject = rej;\n        });\n        /** @type {?} */\n        var id = ++this.navigationId;\n        this.setTransition({\n            id: id,\n            source: source,\n            state: state,\n            currentUrlTree: this.currentUrlTree,\n            currentRawUrl: this.rawUrlTree, rawUrl: rawUrl, extras: extras, resolve: resolve, reject: reject, promise: promise,\n            currentSnapshot: this.routerState.snapshot,\n            currentRouterState: this.routerState\n        });\n        // Make sure that the error is propagated even though `processNavigations` catch\n        // handler does not rethrow\n        return promise.catch(function (e) { return Promise.reject(e); });\n    };\n    /**\n     * @param {?} url\n     * @param {?} replaceUrl\n     * @param {?} id\n     * @return {?}\n     */\n    Router.prototype.setBrowserUrl = /**\n     * @param {?} url\n     * @param {?} replaceUrl\n     * @param {?} id\n     * @return {?}\n     */\n    function (url, replaceUrl, id) {\n        /** @type {?} */\n        var path = this.urlSerializer.serialize(url);\n        if (this.location.isCurrentPathEqualTo(path) || replaceUrl) {\n            this.location.replaceState(path, '', { navigationId: id });\n        }\n        else {\n            this.location.go(path, '', { navigationId: id });\n        }\n    };\n    /**\n     * @param {?} storedState\n     * @param {?} storedUrl\n     * @param {?} rawUrl\n     * @return {?}\n     */\n    Router.prototype.resetStateAndUrl = /**\n     * @param {?} storedState\n     * @param {?} storedUrl\n     * @param {?} rawUrl\n     * @return {?}\n     */\n    function (storedState, storedUrl, rawUrl) {\n        (/** @type {?} */ (this)).routerState = storedState;\n        this.currentUrlTree = storedUrl;\n        this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, rawUrl);\n        this.resetUrlToCurrentUrlTree();\n    };\n    /**\n     * @return {?}\n     */\n    Router.prototype.resetUrlToCurrentUrlTree = /**\n     * @return {?}\n     */\n    function () {\n        this.location.replaceState(this.urlSerializer.serialize(this.rawUrlTree), '', { navigationId: this.lastSuccessfulId });\n    };\n    return Router;\n}());\n/**\n * \\@description\n *\n * Provides the navigation and url manipulation capabilities.\n *\n * See `Routes` for more details and examples.\n *\n * \\@ngModule RouterModule\n *\n * \\@publicApi\n */\nexport { Router };\nif (false) {\n    /** @type {?} */\n    Router.prototype.currentUrlTree;\n    /** @type {?} */\n    Router.prototype.rawUrlTree;\n    /** @type {?} */\n    Router.prototype.transitions;\n    /** @type {?} */\n    Router.prototype.navigations;\n    /** @type {?} */\n    Router.prototype.locationSubscription;\n    /** @type {?} */\n    Router.prototype.navigationId;\n    /** @type {?} */\n    Router.prototype.configLoader;\n    /** @type {?} */\n    Router.prototype.ngModule;\n    /** @type {?} */\n    Router.prototype.console;\n    /** @type {?} */\n    Router.prototype.isNgZoneEnabled;\n    /** @type {?} */\n    Router.prototype.events;\n    /** @type {?} */\n    Router.prototype.routerState;\n    /**\n     * Error handler that is invoked when a navigation errors.\n     *\n     * See `ErrorHandler` for more information.\n     * @type {?}\n     */\n    Router.prototype.errorHandler;\n    /**\n     * Malformed uri error handler is invoked when `Router.parseUrl(url)` throws an\n     * error due to containing an invalid character. The most common case would be a `%` sign\n     * that's not encoded and is not part of a percent encoded sequence.\n     * @type {?}\n     */\n    Router.prototype.malformedUriErrorHandler;\n    /**\n     * Indicates if at least one navigation happened.\n     * @type {?}\n     */\n    Router.prototype.navigated;\n    /** @type {?} */\n    Router.prototype.lastSuccessfulId;\n    /**\n     * Used by RouterModule. This allows us to\n     * pause the navigation either before preactivation or after it.\n     * \\@internal\n     * @type {?}\n     */\n    Router.prototype.hooks;\n    /**\n     * Extracts and merges URLs. Used for AngularJS to Angular migrations.\n     * @type {?}\n     */\n    Router.prototype.urlHandlingStrategy;\n    /** @type {?} */\n    Router.prototype.routeReuseStrategy;\n    /**\n     * Define what the router should do if it receives a navigation request to the current URL.\n     * By default, the router will ignore this navigation. However, this prevents features such\n     * as a \"refresh\" button. Use this option to configure the behavior when navigating to the\n     * current URL. Default is 'ignore'.\n     * @type {?}\n     */\n    Router.prototype.onSameUrlNavigation;\n    /**\n     * Defines how the router merges params, data and resolved data from parent to child\n     * routes. Available options are:\n     *\n     * - `'emptyOnly'`, the default, only inherits parent params for path-less or component-less\n     *   routes.\n     * - `'always'`, enables unconditional inheritance of parent params.\n     * @type {?}\n     */\n    Router.prototype.paramsInheritanceStrategy;\n    /**\n     * Defines when the router updates the browser URL. The default behavior is to update after\n     * successful navigation. However, some applications may prefer a mode where the URL gets\n     * updated at the beginning of navigation. The most common use case would be updating the\n     * URL early so if navigation fails, you can show an error message with the URL that failed.\n     * Available options are:\n     *\n     * - `'deferred'`, the default, updates the browser URL after navigation has finished.\n     * - `'eager'`, updates browser URL at the beginning of navigation.\n     * @type {?}\n     */\n    Router.prototype.urlUpdateStrategy;\n    /**\n     * See {\\@link RouterModule} for more information.\n     * @type {?}\n     */\n    Router.prototype.relativeLinkResolution;\n    /** @type {?} */\n    Router.prototype.rootComponentType;\n    /** @type {?} */\n    Router.prototype.urlSerializer;\n    /** @type {?} */\n    Router.prototype.rootContexts;\n    /** @type {?} */\n    Router.prototype.location;\n    /** @type {?} */\n    Router.prototype.config;\n}\n/**\n * @param {?} commands\n * @return {?}\n */\nfunction validateCommands(commands) {\n    for (var i = 0; i < commands.length; i++) {\n        /** @type {?} */\n        var cmd = commands[i];\n        if (cmd == null) {\n            throw new Error(\"The requested path contains \" + cmd + \" segment at index \" + i);\n        }\n    }\n}\n//# sourceMappingURL=router.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { LocationStrategy } from '@angular/common';\nimport { Attribute, Directive, ElementRef, HostBinding, HostListener, Input, Renderer2, isDevMode } from '@angular/core';\nimport { NavigationEnd } from '../events';\nimport { Router } from '../router';\nimport { ActivatedRoute } from '../router_state';\n/**\n * \\@description\n *\n * Lets you link to specific routes in your app.\n *\n * Consider the following route configuration:\n * `[{ path: 'user/:name', component: UserCmp }]`.\n * When linking to this `user/:name` route, you use the `RouterLink` directive.\n *\n * If the link is static, you can use the directive as follows:\n * `<a routerLink=\"/user/bob\">link to user component</a>`\n *\n * If you use dynamic values to generate the link, you can pass an array of path\n * segments, followed by the params for each segment.\n *\n * For instance `['/team', teamId, 'user', userName, {details: true}]`\n * means that we want to generate a link to `/team/11/user/bob;details=true`.\n *\n * Multiple static segments can be merged into one\n * (e.g., `['/team/11/user', userName, {details: true}]`).\n *\n * The first segment name can be prepended with `/`, `./`, or `../`:\n * * If the first segment begins with `/`, the router will look up the route from the root of the\n *   app.\n * * If the first segment begins with `./`, or doesn't begin with a slash, the router will\n *   instead look in the children of the current activated route.\n * * And if the first segment begins with `../`, the router will go up one level.\n *\n * You can set query params and fragment as follows:\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\n *   link to user component\n * </a>\n * ```\n * RouterLink will use these to generate this link: `/user/bob#education?debug=true`.\n *\n * (Deprecated in v4.0.0 use `queryParamsHandling` instead) You can also tell the\n * directive to preserve the current query params and fragment:\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" preserveQueryParams preserveFragment>\n *   link to user component\n * </a>\n * ```\n *\n * You can tell the directive to how to handle queryParams, available options are:\n *  - `'merge'`: merge the queryParams into the current queryParams\n *  - `'preserve'`: preserve the current queryParams\n *  - default/`''`: use the queryParams only\n *\n * Same options for {\\@link NavigationExtras#queryParamsHandling\n * NavigationExtras#queryParamsHandling}.\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" queryParamsHandling=\"merge\">\n *   link to user component\n * </a>\n * ```\n *\n * The router link directive always treats the provided input as a delta to the current url.\n *\n * For instance, if the current url is `/user/(box//aux:team)`.\n *\n * Then the following link `<a [routerLink]=\"['/user/jim']\">Jim</a>` will generate the link\n * `/user/(jim//aux:team)`.\n *\n * See {\\@link Router#createUrlTree createUrlTree} for more information.\n *\n * \\@ngModule RouterModule\n *\n * \\@publicApi\n */\nvar RouterLink = /** @class */ (function () {\n    function RouterLink(router, route, tabIndex, renderer, el) {\n        this.router = router;\n        this.route = route;\n        this.commands = [];\n        if (tabIndex == null) {\n            renderer.setAttribute(el.nativeElement, 'tabindex', '0');\n        }\n    }\n    Object.defineProperty(RouterLink.prototype, \"routerLink\", {\n        set: /**\n         * @param {?} commands\n         * @return {?}\n         */\n        function (commands) {\n            if (commands != null) {\n                this.commands = Array.isArray(commands) ? commands : [commands];\n            }\n            else {\n                this.commands = [];\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RouterLink.prototype, \"preserveQueryParams\", {\n        /**\n         * @deprecated 4.0.0 use `queryParamsHandling` instead.\n         */\n        set: /**\n         * @deprecated 4.0.0 use `queryParamsHandling` instead.\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (isDevMode() && /** @type {?} */ (console) && /** @type {?} */ (console.warn)) {\n                console.warn('preserveQueryParams is deprecated!, use queryParamsHandling instead.');\n            }\n            this.preserve = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    RouterLink.prototype.onClick = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var extras = {\n            skipLocationChange: attrBoolValue(this.skipLocationChange),\n            replaceUrl: attrBoolValue(this.replaceUrl),\n        };\n        this.router.navigateByUrl(this.urlTree, extras);\n        return true;\n    };\n    Object.defineProperty(RouterLink.prototype, \"urlTree\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.router.createUrlTree(this.commands, {\n                relativeTo: this.route,\n                queryParams: this.queryParams,\n                fragment: this.fragment,\n                preserveQueryParams: attrBoolValue(this.preserve),\n                queryParamsHandling: this.queryParamsHandling,\n                preserveFragment: attrBoolValue(this.preserveFragment),\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    RouterLink.decorators = [\n        { type: Directive, args: [{ selector: ':not(a)[routerLink]' },] },\n    ];\n    /** @nocollapse */\n    RouterLink.ctorParameters = function () { return [\n        { type: Router },\n        { type: ActivatedRoute },\n        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n        { type: Renderer2 },\n        { type: ElementRef }\n    ]; };\n    RouterLink.propDecorators = {\n        queryParams: [{ type: Input }],\n        fragment: [{ type: Input }],\n        queryParamsHandling: [{ type: Input }],\n        preserveFragment: [{ type: Input }],\n        skipLocationChange: [{ type: Input }],\n        replaceUrl: [{ type: Input }],\n        routerLink: [{ type: Input }],\n        preserveQueryParams: [{ type: Input }],\n        onClick: [{ type: HostListener, args: ['click',] }]\n    };\n    return RouterLink;\n}());\nexport { RouterLink };\nif (false) {\n    /** @type {?} */\n    RouterLink.prototype.queryParams;\n    /** @type {?} */\n    RouterLink.prototype.fragment;\n    /** @type {?} */\n    RouterLink.prototype.queryParamsHandling;\n    /** @type {?} */\n    RouterLink.prototype.preserveFragment;\n    /** @type {?} */\n    RouterLink.prototype.skipLocationChange;\n    /** @type {?} */\n    RouterLink.prototype.replaceUrl;\n    /** @type {?} */\n    RouterLink.prototype.commands;\n    /** @type {?} */\n    RouterLink.prototype.preserve;\n    /** @type {?} */\n    RouterLink.prototype.router;\n    /** @type {?} */\n    RouterLink.prototype.route;\n}\n/**\n * \\@description\n *\n * Lets you link to specific routes in your app.\n *\n * See `RouterLink` for more information.\n *\n * \\@ngModule RouterModule\n *\n * \\@publicApi\n */\nvar RouterLinkWithHref = /** @class */ (function () {\n    function RouterLinkWithHref(router, route, locationStrategy) {\n        var _this = this;\n        this.router = router;\n        this.route = route;\n        this.locationStrategy = locationStrategy;\n        this.commands = [];\n        this.subscription = router.events.subscribe(function (s) {\n            if (s instanceof NavigationEnd) {\n                _this.updateTargetUrlAndHref();\n            }\n        });\n    }\n    Object.defineProperty(RouterLinkWithHref.prototype, \"routerLink\", {\n        set: /**\n         * @param {?} commands\n         * @return {?}\n         */\n        function (commands) {\n            if (commands != null) {\n                this.commands = Array.isArray(commands) ? commands : [commands];\n            }\n            else {\n                this.commands = [];\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RouterLinkWithHref.prototype, \"preserveQueryParams\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (isDevMode() && /** @type {?} */ (console) && /** @type {?} */ (console.warn)) {\n                console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');\n            }\n            this.preserve = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    RouterLinkWithHref.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) { this.updateTargetUrlAndHref(); };\n    /**\n     * @return {?}\n     */\n    RouterLinkWithHref.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () { this.subscription.unsubscribe(); };\n    /**\n     * @param {?} button\n     * @param {?} ctrlKey\n     * @param {?} metaKey\n     * @param {?} shiftKey\n     * @return {?}\n     */\n    RouterLinkWithHref.prototype.onClick = /**\n     * @param {?} button\n     * @param {?} ctrlKey\n     * @param {?} metaKey\n     * @param {?} shiftKey\n     * @return {?}\n     */\n    function (button, ctrlKey, metaKey, shiftKey) {\n        if (button !== 0 || ctrlKey || metaKey || shiftKey) {\n            return true;\n        }\n        if (typeof this.target === 'string' && this.target != '_self') {\n            return true;\n        }\n        /** @type {?} */\n        var extras = {\n            skipLocationChange: attrBoolValue(this.skipLocationChange),\n            replaceUrl: attrBoolValue(this.replaceUrl),\n        };\n        this.router.navigateByUrl(this.urlTree, extras);\n        return false;\n    };\n    /**\n     * @return {?}\n     */\n    RouterLinkWithHref.prototype.updateTargetUrlAndHref = /**\n     * @return {?}\n     */\n    function () {\n        this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));\n    };\n    Object.defineProperty(RouterLinkWithHref.prototype, \"urlTree\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.router.createUrlTree(this.commands, {\n                relativeTo: this.route,\n                queryParams: this.queryParams,\n                fragment: this.fragment,\n                preserveQueryParams: attrBoolValue(this.preserve),\n                queryParamsHandling: this.queryParamsHandling,\n                preserveFragment: attrBoolValue(this.preserveFragment),\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    RouterLinkWithHref.decorators = [\n        { type: Directive, args: [{ selector: 'a[routerLink]' },] },\n    ];\n    /** @nocollapse */\n    RouterLinkWithHref.ctorParameters = function () { return [\n        { type: Router },\n        { type: ActivatedRoute },\n        { type: LocationStrategy }\n    ]; };\n    RouterLinkWithHref.propDecorators = {\n        target: [{ type: HostBinding, args: ['attr.target',] }, { type: Input }],\n        queryParams: [{ type: Input }],\n        fragment: [{ type: Input }],\n        queryParamsHandling: [{ type: Input }],\n        preserveFragment: [{ type: Input }],\n        skipLocationChange: [{ type: Input }],\n        replaceUrl: [{ type: Input }],\n        href: [{ type: HostBinding }],\n        routerLink: [{ type: Input }],\n        preserveQueryParams: [{ type: Input }],\n        onClick: [{ type: HostListener, args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey', '$event.shiftKey'],] }]\n    };\n    return RouterLinkWithHref;\n}());\nexport { RouterLinkWithHref };\nif (false) {\n    /** @type {?} */\n    RouterLinkWithHref.prototype.target;\n    /** @type {?} */\n    RouterLinkWithHref.prototype.queryParams;\n    /** @type {?} */\n    RouterLinkWithHref.prototype.fragment;\n    /** @type {?} */\n    RouterLinkWithHref.prototype.queryParamsHandling;\n    /** @type {?} */\n    RouterLinkWithHref.prototype.preserveFragment;\n    /** @type {?} */\n    RouterLinkWithHref.prototype.skipLocationChange;\n    /** @type {?} */\n    RouterLinkWithHref.prototype.replaceUrl;\n    /** @type {?} */\n    RouterLinkWithHref.prototype.commands;\n    /** @type {?} */\n    RouterLinkWithHref.prototype.subscription;\n    /** @type {?} */\n    RouterLinkWithHref.prototype.preserve;\n    /** @type {?} */\n    RouterLinkWithHref.prototype.href;\n    /** @type {?} */\n    RouterLinkWithHref.prototype.router;\n    /** @type {?} */\n    RouterLinkWithHref.prototype.route;\n    /** @type {?} */\n    RouterLinkWithHref.prototype.locationStrategy;\n}\n/**\n * @param {?} s\n * @return {?}\n */\nfunction attrBoolValue(s) {\n    return s === '' || !!s;\n}\n//# sourceMappingURL=router_link.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef, ContentChildren, Directive, ElementRef, Input, QueryList, Renderer2 } from '@angular/core';\nimport { NavigationEnd } from '../events';\nimport { Router } from '../router';\nimport { RouterLink, RouterLinkWithHref } from './router_link';\n/**\n *\n * \\@description\n *\n * Lets you add a CSS class to an element when the link's route becomes active.\n *\n * This directive lets you add a CSS class to an element when the link's route\n * becomes active.\n *\n * Consider the following example:\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob</a>\n * ```\n *\n * When the url is either '/user' or '/user/bob', the active-link class will\n * be added to the `a` tag. If the url changes, the class will be removed.\n *\n * You can set more than one class, as follows:\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"class1 class2\">Bob</a>\n * <a routerLink=\"/user/bob\" [routerLinkActive]=\"['class1', 'class2']\">Bob</a>\n * ```\n *\n * You can configure RouterLinkActive by passing `exact: true`. This will add the classes\n * only when the url matches the link exactly.\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact:\n * true}\">Bob</a>\n * ```\n *\n * You can assign the RouterLinkActive instance to a template variable and directly check\n * the `isActive` status.\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive #rla=\"routerLinkActive\">\n *   Bob {{ rla.isActive ? '(already open)' : ''}}\n * </a>\n * ```\n *\n * Finally, you can apply the RouterLinkActive directive to an ancestor of a RouterLink.\n *\n * ```\n * <div routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact: true}\">\n *   <a routerLink=\"/user/jim\">Jim</a>\n *   <a routerLink=\"/user/bob\">Bob</a>\n * </div>\n * ```\n *\n * This will set the active-link class on the div tag if the url is either '/user/jim' or\n * '/user/bob'.\n *\n * \\@ngModule RouterModule\n *\n * \\@publicApi\n */\nvar RouterLinkActive = /** @class */ (function () {\n    function RouterLinkActive(router, element, renderer, cdr) {\n        var _this = this;\n        this.router = router;\n        this.element = element;\n        this.renderer = renderer;\n        this.cdr = cdr;\n        this.classes = [];\n        this.isActive = false;\n        this.routerLinkActiveOptions = { exact: false };\n        this.subscription = router.events.subscribe(function (s) {\n            if (s instanceof NavigationEnd) {\n                _this.update();\n            }\n        });\n    }\n    /**\n     * @return {?}\n     */\n    RouterLinkActive.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.links.changes.subscribe(function (_) { return _this.update(); });\n        this.linksWithHrefs.changes.subscribe(function (_) { return _this.update(); });\n        this.update();\n    };\n    Object.defineProperty(RouterLinkActive.prototype, \"routerLinkActive\", {\n        set: /**\n         * @param {?} data\n         * @return {?}\n         */\n        function (data) {\n            /** @type {?} */\n            var classes = Array.isArray(data) ? data : data.split(' ');\n            this.classes = classes.filter(function (c) { return !!c; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    RouterLinkActive.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) { this.update(); };\n    /**\n     * @return {?}\n     */\n    RouterLinkActive.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () { this.subscription.unsubscribe(); };\n    /**\n     * @return {?}\n     */\n    RouterLinkActive.prototype.update = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!this.links || !this.linksWithHrefs || !this.router.navigated)\n            return;\n        Promise.resolve().then(function () {\n            /** @type {?} */\n            var hasActiveLinks = _this.hasActiveLinks();\n            if (_this.isActive !== hasActiveLinks) {\n                (/** @type {?} */ (_this)).isActive = hasActiveLinks;\n                _this.classes.forEach(function (c) {\n                    if (hasActiveLinks) {\n                        _this.renderer.addClass(_this.element.nativeElement, c);\n                    }\n                    else {\n                        _this.renderer.removeClass(_this.element.nativeElement, c);\n                    }\n                });\n            }\n        });\n    };\n    /**\n     * @param {?} router\n     * @return {?}\n     */\n    RouterLinkActive.prototype.isLinkActive = /**\n     * @param {?} router\n     * @return {?}\n     */\n    function (router) {\n        var _this = this;\n        return function (link) {\n            return router.isActive(link.urlTree, _this.routerLinkActiveOptions.exact);\n        };\n    };\n    /**\n     * @return {?}\n     */\n    RouterLinkActive.prototype.hasActiveLinks = /**\n     * @return {?}\n     */\n    function () {\n        return this.links.some(this.isLinkActive(this.router)) ||\n            this.linksWithHrefs.some(this.isLinkActive(this.router));\n    };\n    RouterLinkActive.decorators = [\n        { type: Directive, args: [{\n                    selector: '[routerLinkActive]',\n                    exportAs: 'routerLinkActive',\n                },] },\n    ];\n    /** @nocollapse */\n    RouterLinkActive.ctorParameters = function () { return [\n        { type: Router },\n        { type: ElementRef },\n        { type: Renderer2 },\n        { type: ChangeDetectorRef }\n    ]; };\n    RouterLinkActive.propDecorators = {\n        links: [{ type: ContentChildren, args: [RouterLink, { descendants: true },] }],\n        linksWithHrefs: [{ type: ContentChildren, args: [RouterLinkWithHref, { descendants: true },] }],\n        routerLinkActiveOptions: [{ type: Input }],\n        routerLinkActive: [{ type: Input }]\n    };\n    return RouterLinkActive;\n}());\nexport { RouterLinkActive };\nif (false) {\n    /** @type {?} */\n    RouterLinkActive.prototype.links;\n    /** @type {?} */\n    RouterLinkActive.prototype.linksWithHrefs;\n    /** @type {?} */\n    RouterLinkActive.prototype.classes;\n    /** @type {?} */\n    RouterLinkActive.prototype.subscription;\n    /** @type {?} */\n    RouterLinkActive.prototype.isActive;\n    /** @type {?} */\n    RouterLinkActive.prototype.routerLinkActiveOptions;\n    /** @type {?} */\n    RouterLinkActive.prototype.router;\n    /** @type {?} */\n    RouterLinkActive.prototype.element;\n    /** @type {?} */\n    RouterLinkActive.prototype.renderer;\n    /** @type {?} */\n    RouterLinkActive.prototype.cdr;\n}\n//# sourceMappingURL=router_link_active.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Store contextual information about a `RouterOutlet`\n *\n * \\@publicApi\n */\nvar /**\n * Store contextual information about a `RouterOutlet`\n *\n * \\@publicApi\n */\nOutletContext = /** @class */ (function () {\n    function OutletContext() {\n        this.outlet = null;\n        this.route = null;\n        this.resolver = null;\n        this.children = new ChildrenOutletContexts();\n        this.attachRef = null;\n    }\n    return OutletContext;\n}());\n/**\n * Store contextual information about a `RouterOutlet`\n *\n * \\@publicApi\n */\nexport { OutletContext };\nif (false) {\n    /** @type {?} */\n    OutletContext.prototype.outlet;\n    /** @type {?} */\n    OutletContext.prototype.route;\n    /** @type {?} */\n    OutletContext.prototype.resolver;\n    /** @type {?} */\n    OutletContext.prototype.children;\n    /** @type {?} */\n    OutletContext.prototype.attachRef;\n}\n/**\n * Store contextual information about the children (= nested) `RouterOutlet`\n *\n * \\@publicApi\n */\nvar /**\n * Store contextual information about the children (= nested) `RouterOutlet`\n *\n * \\@publicApi\n */\nChildrenOutletContexts = /** @class */ (function () {\n    function ChildrenOutletContexts() {\n        this.contexts = new Map();\n    }\n    /** Called when a `RouterOutlet` directive is instantiated */\n    /**\n     * Called when a `RouterOutlet` directive is instantiated\n     * @param {?} childName\n     * @param {?} outlet\n     * @return {?}\n     */\n    ChildrenOutletContexts.prototype.onChildOutletCreated = /**\n     * Called when a `RouterOutlet` directive is instantiated\n     * @param {?} childName\n     * @param {?} outlet\n     * @return {?}\n     */\n    function (childName, outlet) {\n        /** @type {?} */\n        var context = this.getOrCreateContext(childName);\n        context.outlet = outlet;\n        this.contexts.set(childName, context);\n    };\n    /**\n     * Called when a `RouterOutlet` directive is destroyed.\n     * We need to keep the context as the outlet could be destroyed inside a NgIf and might be\n     * re-created later.\n     */\n    /**\n     * Called when a `RouterOutlet` directive is destroyed.\n     * We need to keep the context as the outlet could be destroyed inside a NgIf and might be\n     * re-created later.\n     * @param {?} childName\n     * @return {?}\n     */\n    ChildrenOutletContexts.prototype.onChildOutletDestroyed = /**\n     * Called when a `RouterOutlet` directive is destroyed.\n     * We need to keep the context as the outlet could be destroyed inside a NgIf and might be\n     * re-created later.\n     * @param {?} childName\n     * @return {?}\n     */\n    function (childName) {\n        /** @type {?} */\n        var context = this.getContext(childName);\n        if (context) {\n            context.outlet = null;\n        }\n    };\n    /**\n     * Called when the corresponding route is deactivated during navigation.\n     * Because the component get destroyed, all children outlet are destroyed.\n     */\n    /**\n     * Called when the corresponding route is deactivated during navigation.\n     * Because the component get destroyed, all children outlet are destroyed.\n     * @return {?}\n     */\n    ChildrenOutletContexts.prototype.onOutletDeactivated = /**\n     * Called when the corresponding route is deactivated during navigation.\n     * Because the component get destroyed, all children outlet are destroyed.\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var contexts = this.contexts;\n        this.contexts = new Map();\n        return contexts;\n    };\n    /**\n     * @param {?} contexts\n     * @return {?}\n     */\n    ChildrenOutletContexts.prototype.onOutletReAttached = /**\n     * @param {?} contexts\n     * @return {?}\n     */\n    function (contexts) { this.contexts = contexts; };\n    /**\n     * @param {?} childName\n     * @return {?}\n     */\n    ChildrenOutletContexts.prototype.getOrCreateContext = /**\n     * @param {?} childName\n     * @return {?}\n     */\n    function (childName) {\n        /** @type {?} */\n        var context = this.getContext(childName);\n        if (!context) {\n            context = new OutletContext();\n            this.contexts.set(childName, context);\n        }\n        return context;\n    };\n    /**\n     * @param {?} childName\n     * @return {?}\n     */\n    ChildrenOutletContexts.prototype.getContext = /**\n     * @param {?} childName\n     * @return {?}\n     */\n    function (childName) { return this.contexts.get(childName) || null; };\n    return ChildrenOutletContexts;\n}());\n/**\n * Store contextual information about the children (= nested) `RouterOutlet`\n *\n * \\@publicApi\n */\nexport { ChildrenOutletContexts };\nif (false) {\n    /** @type {?} */\n    ChildrenOutletContexts.prototype.contexts;\n}\n//# sourceMappingURL=router_outlet_context.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Attribute, ChangeDetectorRef, ComponentFactoryResolver, Directive, EventEmitter, Output, ViewContainerRef } from '@angular/core';\nimport { ChildrenOutletContexts } from '../router_outlet_context';\nimport { ActivatedRoute } from '../router_state';\nimport { PRIMARY_OUTLET } from '../shared';\n/**\n * \\@description\n *\n * Acts as a placeholder that Angular dynamically fills based on the current router state.\n *\n * ```\n * <router-outlet></router-outlet>\n * <router-outlet name='left'></router-outlet>\n * <router-outlet name='right'></router-outlet>\n * ```\n *\n * A router outlet will emit an activate event any time a new component is being instantiated,\n * and a deactivate event when it is being destroyed.\n *\n * ```\n * <router-outlet\n *   (activate)='onActivate($event)'\n *   (deactivate)='onDeactivate($event)'></router-outlet>\n * ```\n * \\@ngModule RouterModule\n *\n * \\@publicApi\n */\nvar RouterOutlet = /** @class */ (function () {\n    function RouterOutlet(parentContexts, location, resolver, name, changeDetector) {\n        this.parentContexts = parentContexts;\n        this.location = location;\n        this.resolver = resolver;\n        this.changeDetector = changeDetector;\n        this.activated = null;\n        this._activatedRoute = null;\n        this.activateEvents = new EventEmitter();\n        this.deactivateEvents = new EventEmitter();\n        this.name = name || PRIMARY_OUTLET;\n        parentContexts.onChildOutletCreated(this.name, this);\n    }\n    /**\n     * @return {?}\n     */\n    RouterOutlet.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () { this.parentContexts.onChildOutletDestroyed(this.name); };\n    /**\n     * @return {?}\n     */\n    RouterOutlet.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        if (!this.activated) {\n            /** @type {?} */\n            var context = this.parentContexts.getContext(this.name);\n            if (context && context.route) {\n                if (context.attachRef) {\n                    // `attachRef` is populated when there is an existing component to mount\n                    this.attach(context.attachRef, context.route);\n                }\n                else {\n                    // otherwise the component defined in the configuration is created\n                    this.activateWith(context.route, context.resolver || null);\n                }\n            }\n        }\n    };\n    Object.defineProperty(RouterOutlet.prototype, \"isActivated\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return !!this.activated; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RouterOutlet.prototype, \"component\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            if (!this.activated)\n                throw new Error('Outlet is not activated');\n            return this.activated.instance;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RouterOutlet.prototype, \"activatedRoute\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            if (!this.activated)\n                throw new Error('Outlet is not activated');\n            return /** @type {?} */ (this._activatedRoute);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RouterOutlet.prototype, \"activatedRouteData\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            if (this._activatedRoute) {\n                return this._activatedRoute.snapshot.data;\n            }\n            return {};\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Called when the `RouteReuseStrategy` instructs to detach the subtree\n     */\n    /**\n     * Called when the `RouteReuseStrategy` instructs to detach the subtree\n     * @return {?}\n     */\n    RouterOutlet.prototype.detach = /**\n     * Called when the `RouteReuseStrategy` instructs to detach the subtree\n     * @return {?}\n     */\n    function () {\n        if (!this.activated)\n            throw new Error('Outlet is not activated');\n        this.location.detach();\n        /** @type {?} */\n        var cmp = this.activated;\n        this.activated = null;\n        this._activatedRoute = null;\n        return cmp;\n    };\n    /**\n     * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree\n     */\n    /**\n     * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree\n     * @param {?} ref\n     * @param {?} activatedRoute\n     * @return {?}\n     */\n    RouterOutlet.prototype.attach = /**\n     * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree\n     * @param {?} ref\n     * @param {?} activatedRoute\n     * @return {?}\n     */\n    function (ref, activatedRoute) {\n        this.activated = ref;\n        this._activatedRoute = activatedRoute;\n        this.location.insert(ref.hostView);\n    };\n    /**\n     * @return {?}\n     */\n    RouterOutlet.prototype.deactivate = /**\n     * @return {?}\n     */\n    function () {\n        if (this.activated) {\n            /** @type {?} */\n            var c = this.component;\n            this.activated.destroy();\n            this.activated = null;\n            this._activatedRoute = null;\n            this.deactivateEvents.emit(c);\n        }\n    };\n    /**\n     * @param {?} activatedRoute\n     * @param {?} resolver\n     * @return {?}\n     */\n    RouterOutlet.prototype.activateWith = /**\n     * @param {?} activatedRoute\n     * @param {?} resolver\n     * @return {?}\n     */\n    function (activatedRoute, resolver) {\n        if (this.isActivated) {\n            throw new Error('Cannot activate an already activated outlet');\n        }\n        this._activatedRoute = activatedRoute;\n        /** @type {?} */\n        var snapshot = activatedRoute._futureSnapshot;\n        /** @type {?} */\n        var component = /** @type {?} */ (/** @type {?} */ ((snapshot.routeConfig)).component);\n        resolver = resolver || this.resolver;\n        /** @type {?} */\n        var factory = resolver.resolveComponentFactory(component);\n        /** @type {?} */\n        var childContexts = this.parentContexts.getOrCreateContext(this.name).children;\n        /** @type {?} */\n        var injector = new OutletInjector(activatedRoute, childContexts, this.location.injector);\n        this.activated = this.location.createComponent(factory, this.location.length, injector);\n        // Calling `markForCheck` to make sure we will run the change detection when the\n        // `RouterOutlet` is inside a `ChangeDetectionStrategy.OnPush` component.\n        this.changeDetector.markForCheck();\n        this.activateEvents.emit(this.activated.instance);\n    };\n    RouterOutlet.decorators = [\n        { type: Directive, args: [{ selector: 'router-outlet', exportAs: 'outlet' },] },\n    ];\n    /** @nocollapse */\n    RouterOutlet.ctorParameters = function () { return [\n        { type: ChildrenOutletContexts },\n        { type: ViewContainerRef },\n        { type: ComponentFactoryResolver },\n        { type: String, decorators: [{ type: Attribute, args: ['name',] }] },\n        { type: ChangeDetectorRef }\n    ]; };\n    RouterOutlet.propDecorators = {\n        activateEvents: [{ type: Output, args: ['activate',] }],\n        deactivateEvents: [{ type: Output, args: ['deactivate',] }]\n    };\n    return RouterOutlet;\n}());\nexport { RouterOutlet };\nif (false) {\n    /** @type {?} */\n    RouterOutlet.prototype.activated;\n    /** @type {?} */\n    RouterOutlet.prototype._activatedRoute;\n    /** @type {?} */\n    RouterOutlet.prototype.name;\n    /** @type {?} */\n    RouterOutlet.prototype.activateEvents;\n    /** @type {?} */\n    RouterOutlet.prototype.deactivateEvents;\n    /** @type {?} */\n    RouterOutlet.prototype.parentContexts;\n    /** @type {?} */\n    RouterOutlet.prototype.location;\n    /** @type {?} */\n    RouterOutlet.prototype.resolver;\n    /** @type {?} */\n    RouterOutlet.prototype.changeDetector;\n}\nvar OutletInjector = /** @class */ (function () {\n    function OutletInjector(route, childContexts, parent) {\n        this.route = route;\n        this.childContexts = childContexts;\n        this.parent = parent;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    OutletInjector.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    function (token, notFoundValue) {\n        if (token === ActivatedRoute) {\n            return this.route;\n        }\n        if (token === ChildrenOutletContexts) {\n            return this.childContexts;\n        }\n        return this.parent.get(token, notFoundValue);\n    };\n    return OutletInjector;\n}());\nif (false) {\n    /** @type {?} */\n    OutletInjector.prototype.route;\n    /** @type {?} */\n    OutletInjector.prototype.childContexts;\n    /** @type {?} */\n    OutletInjector.prototype.parent;\n}\n//# sourceMappingURL=router_outlet.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n*@license\n*Copyright Google Inc. All Rights Reserved.\n*\n*Use of this source code is governed by an MIT-style license that can be\n*found in the LICENSE file at https://angular.io/license\n*/\nimport { Compiler, Injectable, Injector, NgModuleFactoryLoader, NgModuleRef } from '@angular/core';\nimport { from, of } from 'rxjs';\nimport { catchError, concatMap, filter, map, mergeAll, mergeMap } from 'rxjs/operators';\nimport { NavigationEnd, RouteConfigLoadEnd, RouteConfigLoadStart } from './events';\nimport { Router } from './router';\nimport { RouterConfigLoader } from './router_config_loader';\n/**\n * \\@description\n *\n * Provides a preloading strategy.\n *\n * \\@publicApi\n * @abstract\n */\nvar /**\n * \\@description\n *\n * Provides a preloading strategy.\n *\n * \\@publicApi\n * @abstract\n */\nPreloadingStrategy = /** @class */ (function () {\n    function PreloadingStrategy() {\n    }\n    return PreloadingStrategy;\n}());\n/**\n * \\@description\n *\n * Provides a preloading strategy.\n *\n * \\@publicApi\n * @abstract\n */\nexport { PreloadingStrategy };\nif (false) {\n    /**\n     * @abstract\n     * @param {?} route\n     * @param {?} fn\n     * @return {?}\n     */\n    PreloadingStrategy.prototype.preload = function (route, fn) { };\n}\n/**\n * \\@description\n *\n * Provides a preloading strategy that preloads all modules as quickly as possible.\n *\n * ```\n * RouteModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\n * ```\n *\n * \\@publicApi\n */\nvar /**\n * \\@description\n *\n * Provides a preloading strategy that preloads all modules as quickly as possible.\n *\n * ```\n * RouteModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\n * ```\n *\n * \\@publicApi\n */\nPreloadAllModules = /** @class */ (function () {\n    function PreloadAllModules() {\n    }\n    /**\n     * @param {?} route\n     * @param {?} fn\n     * @return {?}\n     */\n    PreloadAllModules.prototype.preload = /**\n     * @param {?} route\n     * @param {?} fn\n     * @return {?}\n     */\n    function (route, fn) {\n        return fn().pipe(catchError(function () { return of(null); }));\n    };\n    return PreloadAllModules;\n}());\n/**\n * \\@description\n *\n * Provides a preloading strategy that preloads all modules as quickly as possible.\n *\n * ```\n * RouteModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\n * ```\n *\n * \\@publicApi\n */\nexport { PreloadAllModules };\n/**\n * \\@description\n *\n * Provides a preloading strategy that does not preload any modules.\n *\n * This strategy is enabled by default.\n *\n * \\@publicApi\n */\nvar /**\n * \\@description\n *\n * Provides a preloading strategy that does not preload any modules.\n *\n * This strategy is enabled by default.\n *\n * \\@publicApi\n */\nNoPreloading = /** @class */ (function () {\n    function NoPreloading() {\n    }\n    /**\n     * @param {?} route\n     * @param {?} fn\n     * @return {?}\n     */\n    NoPreloading.prototype.preload = /**\n     * @param {?} route\n     * @param {?} fn\n     * @return {?}\n     */\n    function (route, fn) { return of(null); };\n    return NoPreloading;\n}());\n/**\n * \\@description\n *\n * Provides a preloading strategy that does not preload any modules.\n *\n * This strategy is enabled by default.\n *\n * \\@publicApi\n */\nexport { NoPreloading };\n/**\n * The preloader optimistically loads all router configurations to\n * make navigations into lazily-loaded sections of the application faster.\n *\n * The preloader runs in the background. When the router bootstraps, the preloader\n * starts listening to all navigation events. After every such event, the preloader\n * will check if any configurations can be loaded lazily.\n *\n * If a route is protected by `canLoad` guards, the preloaded will not load it.\n *\n * \\@publicApi\n */\nvar RouterPreloader = /** @class */ (function () {\n    function RouterPreloader(router, moduleLoader, compiler, injector, preloadingStrategy) {\n        this.router = router;\n        this.injector = injector;\n        this.preloadingStrategy = preloadingStrategy;\n        /** @type {?} */\n        var onStartLoad = function (r) { return router.triggerEvent(new RouteConfigLoadStart(r)); };\n        /** @type {?} */\n        var onEndLoad = function (r) { return router.triggerEvent(new RouteConfigLoadEnd(r)); };\n        this.loader = new RouterConfigLoader(moduleLoader, compiler, onStartLoad, onEndLoad);\n    }\n    /**\n     * @return {?}\n     */\n    RouterPreloader.prototype.setUpPreloading = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.subscription =\n            this.router.events\n                .pipe(filter(function (e) { return e instanceof NavigationEnd; }), concatMap(function () { return _this.preload(); }))\n                .subscribe(function () { });\n    };\n    /**\n     * @return {?}\n     */\n    RouterPreloader.prototype.preload = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var ngModule = this.injector.get(NgModuleRef);\n        return this.processRoutes(ngModule, this.router.config);\n    };\n    // TODO(jasonaden): This class relies on code external to the class to call setUpPreloading. If\n    // this hasn't been done, ngOnDestroy will fail as this.subscription will be undefined. This\n    // should be refactored.\n    /**\n     * @return {?}\n     */\n    RouterPreloader.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () { this.subscription.unsubscribe(); };\n    /**\n     * @param {?} ngModule\n     * @param {?} routes\n     * @return {?}\n     */\n    RouterPreloader.prototype.processRoutes = /**\n     * @param {?} ngModule\n     * @param {?} routes\n     * @return {?}\n     */\n    function (ngModule, routes) {\n        /** @type {?} */\n        var res = [];\n        for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {\n            var route = routes_1[_i];\n            // we already have the config loaded, just recurse\n            if (route.loadChildren && !route.canLoad && route._loadedConfig) {\n                /** @type {?} */\n                var childConfig = route._loadedConfig;\n                res.push(this.processRoutes(childConfig.module, childConfig.routes));\n                // no config loaded, fetch the config\n            }\n            else if (route.loadChildren && !route.canLoad) {\n                res.push(this.preloadConfig(ngModule, route));\n                // recurse into children\n            }\n            else if (route.children) {\n                res.push(this.processRoutes(ngModule, route.children));\n            }\n        }\n        return from(res).pipe(mergeAll(), map(function (_) { return void 0; }));\n    };\n    /**\n     * @param {?} ngModule\n     * @param {?} route\n     * @return {?}\n     */\n    RouterPreloader.prototype.preloadConfig = /**\n     * @param {?} ngModule\n     * @param {?} route\n     * @return {?}\n     */\n    function (ngModule, route) {\n        var _this = this;\n        return this.preloadingStrategy.preload(route, function () {\n            /** @type {?} */\n            var loaded$ = _this.loader.load(ngModule.injector, route);\n            return loaded$.pipe(mergeMap(function (config) {\n                route._loadedConfig = config;\n                return _this.processRoutes(config.module, config.routes);\n            }));\n        });\n    };\n    RouterPreloader.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    RouterPreloader.ctorParameters = function () { return [\n        { type: Router },\n        { type: NgModuleFactoryLoader },\n        { type: Compiler },\n        { type: Injector },\n        { type: PreloadingStrategy }\n    ]; };\n    return RouterPreloader;\n}());\nexport { RouterPreloader };\nif (false) {\n    /** @type {?} */\n    RouterPreloader.prototype.loader;\n    /** @type {?} */\n    RouterPreloader.prototype.subscription;\n    /** @type {?} */\n    RouterPreloader.prototype.router;\n    /** @type {?} */\n    RouterPreloader.prototype.injector;\n    /** @type {?} */\n    RouterPreloader.prototype.preloadingStrategy;\n}\n//# sourceMappingURL=router_preloader.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NavigationEnd, NavigationStart, Scroll } from './events';\nvar RouterScroller = /** @class */ (function () {\n    function RouterScroller(router, viewportScroller, options) {\n        if (options === void 0) { options = {}; }\n        this.router = router;\n        this.viewportScroller = viewportScroller;\n        this.options = options;\n        this.lastId = 0;\n        this.lastSource = 'imperative';\n        this.restoredId = 0;\n        this.store = {};\n        // Default both options to 'disabled'\n        options.scrollPositionRestoration = options.scrollPositionRestoration || 'disabled';\n        options.anchorScrolling = options.anchorScrolling || 'disabled';\n    }\n    /**\n     * @return {?}\n     */\n    RouterScroller.prototype.init = /**\n     * @return {?}\n     */\n    function () {\n        // we want to disable the automatic scrolling because having two places\n        // responsible for scrolling results race conditions, especially given\n        // that browser don't implement this behavior consistently\n        if (this.options.scrollPositionRestoration !== 'disabled') {\n            this.viewportScroller.setHistoryScrollRestoration('manual');\n        }\n        this.routerEventsSubscription = this.createScrollEvents();\n        this.scrollEventsSubscription = this.consumeScrollEvents();\n    };\n    /**\n     * @return {?}\n     */\n    RouterScroller.prototype.createScrollEvents = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        return this.router.events.subscribe(function (e) {\n            if (e instanceof NavigationStart) {\n                // store the scroll position of the current stable navigations.\n                _this.store[_this.lastId] = _this.viewportScroller.getScrollPosition();\n                _this.lastSource = e.navigationTrigger;\n                _this.restoredId = e.restoredState ? e.restoredState.navigationId : 0;\n            }\n            else if (e instanceof NavigationEnd) {\n                _this.lastId = e.id;\n                _this.scheduleScrollEvent(e, _this.router.parseUrl(e.urlAfterRedirects).fragment);\n            }\n        });\n    };\n    /**\n     * @return {?}\n     */\n    RouterScroller.prototype.consumeScrollEvents = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        return this.router.events.subscribe(function (e) {\n            if (!(e instanceof Scroll))\n                return;\n            // a popstate event. The pop state event will always ignore anchor scrolling.\n            if (e.position) {\n                if (_this.options.scrollPositionRestoration === 'top') {\n                    _this.viewportScroller.scrollToPosition([0, 0]);\n                }\n                else if (_this.options.scrollPositionRestoration === 'enabled') {\n                    _this.viewportScroller.scrollToPosition(e.position);\n                }\n                // imperative navigation \"forward\"\n            }\n            else {\n                if (e.anchor && _this.options.anchorScrolling === 'enabled') {\n                    _this.viewportScroller.scrollToAnchor(e.anchor);\n                }\n                else if (_this.options.scrollPositionRestoration !== 'disabled') {\n                    _this.viewportScroller.scrollToPosition([0, 0]);\n                }\n            }\n        });\n    };\n    /**\n     * @param {?} routerEvent\n     * @param {?} anchor\n     * @return {?}\n     */\n    RouterScroller.prototype.scheduleScrollEvent = /**\n     * @param {?} routerEvent\n     * @param {?} anchor\n     * @return {?}\n     */\n    function (routerEvent, anchor) {\n        this.router.triggerEvent(new Scroll(routerEvent, this.lastSource === 'popstate' ? this.store[this.restoredId] : null, anchor));\n    };\n    /**\n     * @return {?}\n     */\n    RouterScroller.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this.routerEventsSubscription) {\n            this.routerEventsSubscription.unsubscribe();\n        }\n        if (this.scrollEventsSubscription) {\n            this.scrollEventsSubscription.unsubscribe();\n        }\n    };\n    return RouterScroller;\n}());\nexport { RouterScroller };\nif (false) {\n    /** @type {?} */\n    RouterScroller.prototype.routerEventsSubscription;\n    /** @type {?} */\n    RouterScroller.prototype.scrollEventsSubscription;\n    /** @type {?} */\n    RouterScroller.prototype.lastId;\n    /** @type {?} */\n    RouterScroller.prototype.lastSource;\n    /** @type {?} */\n    RouterScroller.prototype.restoredId;\n    /** @type {?} */\n    RouterScroller.prototype.store;\n    /** @type {?} */\n    RouterScroller.prototype.router;\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     */\n    RouterScroller.prototype.viewportScroller;\n    /** @type {?} */\n    RouterScroller.prototype.options;\n}\n//# sourceMappingURL=router_scroller.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { APP_BASE_HREF, HashLocationStrategy, LOCATION_INITIALIZED, Location, LocationStrategy, PathLocationStrategy, PlatformLocation, ViewportScroller } from '@angular/common';\nimport { ANALYZE_FOR_ENTRY_COMPONENTS, APP_BOOTSTRAP_LISTENER, APP_INITIALIZER, ApplicationRef, Compiler, Inject, Injectable, InjectionToken, Injector, NgModule, NgModuleFactoryLoader, NgProbeToken, Optional, SkipSelf, SystemJsNgModuleLoader } from '@angular/core';\nimport { ɵgetDOM as getDOM } from '@angular/platform-browser';\nimport { Subject, of } from 'rxjs';\nimport { EmptyOutletComponent } from './components/empty_outlet';\nimport { RouterLink, RouterLinkWithHref } from './directives/router_link';\nimport { RouterLinkActive } from './directives/router_link_active';\nimport { RouterOutlet } from './directives/router_outlet';\nimport { RouteReuseStrategy } from './route_reuse_strategy';\nimport { Router } from './router';\nimport { ROUTES } from './router_config_loader';\nimport { ChildrenOutletContexts } from './router_outlet_context';\nimport { NoPreloading, PreloadAllModules, PreloadingStrategy, RouterPreloader } from './router_preloader';\nimport { RouterScroller } from './router_scroller';\nimport { ActivatedRoute } from './router_state';\nimport { UrlHandlingStrategy } from './url_handling_strategy';\nimport { DefaultUrlSerializer, UrlSerializer } from './url_tree';\nimport { flatten } from './utils/collection';\n/** *\n * \\@description\n *\n * Contains a list of directives\n *\n *\n  @type {?} */\nvar ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive, EmptyOutletComponent];\n/** *\n * \\@description\n *\n * Is used in DI to configure the router.\n *\n * \\@publicApi\n  @type {?} */\nexport var ROUTER_CONFIGURATION = new InjectionToken('ROUTER_CONFIGURATION');\n/** *\n * \\@docsNotRequired\n  @type {?} */\nexport var ROUTER_FORROOT_GUARD = new InjectionToken('ROUTER_FORROOT_GUARD');\n/** @type {?} */\nexport var ROUTER_PROVIDERS = [\n    Location,\n    { provide: UrlSerializer, useClass: DefaultUrlSerializer },\n    {\n        provide: Router,\n        useFactory: setupRouter,\n        deps: [\n            ApplicationRef, UrlSerializer, ChildrenOutletContexts, Location, Injector,\n            NgModuleFactoryLoader, Compiler, ROUTES, ROUTER_CONFIGURATION,\n            [UrlHandlingStrategy, new Optional()], [RouteReuseStrategy, new Optional()]\n        ]\n    },\n    ChildrenOutletContexts,\n    { provide: ActivatedRoute, useFactory: rootRoute, deps: [Router] },\n    { provide: NgModuleFactoryLoader, useClass: SystemJsNgModuleLoader },\n    RouterPreloader,\n    NoPreloading,\n    PreloadAllModules,\n    { provide: ROUTER_CONFIGURATION, useValue: { enableTracing: false } },\n];\n/**\n * @return {?}\n */\nexport function routerNgProbeToken() {\n    return new NgProbeToken('Router', Router);\n}\n/**\n * \\@usageNotes\n *\n * RouterModule can be imported multiple times: once per lazily-loaded bundle.\n * Since the router deals with a global shared resource--location, we cannot have\n * more than one router service active.\n *\n * That is why there are two ways to create the module: `RouterModule.forRoot` and\n * `RouterModule.forChild`.\n *\n * * `forRoot` creates a module that contains all the directives, the given routes, and the router\n *   service itself.\n * * `forChild` creates a module that contains all the directives and the given routes, but does not\n *   include the router service.\n *\n * When registered at the root, the module should be used as follows\n *\n * ```\n * \\@NgModule({\n *   imports: [RouterModule.forRoot(ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n *\n * For submodules and lazy loaded submodules the module should be used as follows:\n *\n * ```\n * \\@NgModule({\n *   imports: [RouterModule.forChild(ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n *\n * \\@description\n *\n * Adds router directives and providers.\n *\n * Managing state transitions is one of the hardest parts of building applications. This is\n * especially true on the web, where you also need to ensure that the state is reflected in the URL.\n * In addition, we often want to split applications into multiple bundles and load them on demand.\n * Doing this transparently is not trivial.\n *\n * The Angular router solves these problems. Using the router, you can declaratively specify\n * application states, manage state transitions while taking care of the URL, and load bundles on\n * demand.\n *\n * [Read this developer guide](https://angular.io/docs/ts/latest/guide/router.html) to get an\n * overview of how the router should be used.\n *\n * \\@publicApi\n */\nvar RouterModule = /** @class */ (function () {\n    // Note: We are injecting the Router so it gets created eagerly...\n    function RouterModule(guard, router) {\n    }\n    /**\n     * Creates a module with all the router providers and directives. It also optionally sets up an\n     * application listener to perform an initial navigation.\n     *\n     * Options (see `ExtraOptions`):\n     * * `enableTracing` makes the router log all its internal events to the console.\n     * * `useHash` enables the location strategy that uses the URL fragment instead of the history\n     * API.\n     * * `initialNavigation` disables the initial navigation.\n     * * `errorHandler` provides a custom error handler.\n     * * `preloadingStrategy` configures a preloading strategy (see `PreloadAllModules`).\n     * * `onSameUrlNavigation` configures how the router handles navigation to the current URL. See\n     * `ExtraOptions` for more details.\n     * * `paramsInheritanceStrategy` defines how the router merges params, data and resolved data\n     * from parent to child routes.\n     */\n    /**\n     * Creates a module with all the router providers and directives. It also optionally sets up an\n     * application listener to perform an initial navigation.\n     *\n     * Options (see `ExtraOptions`):\n     * * `enableTracing` makes the router log all its internal events to the console.\n     * * `useHash` enables the location strategy that uses the URL fragment instead of the history\n     * API.\n     * * `initialNavigation` disables the initial navigation.\n     * * `errorHandler` provides a custom error handler.\n     * * `preloadingStrategy` configures a preloading strategy (see `PreloadAllModules`).\n     * * `onSameUrlNavigation` configures how the router handles navigation to the current URL. See\n     * `ExtraOptions` for more details.\n     * * `paramsInheritanceStrategy` defines how the router merges params, data and resolved data\n     * from parent to child routes.\n     * @param {?} routes\n     * @param {?=} config\n     * @return {?}\n     */\n    RouterModule.forRoot = /**\n     * Creates a module with all the router providers and directives. It also optionally sets up an\n     * application listener to perform an initial navigation.\n     *\n     * Options (see `ExtraOptions`):\n     * * `enableTracing` makes the router log all its internal events to the console.\n     * * `useHash` enables the location strategy that uses the URL fragment instead of the history\n     * API.\n     * * `initialNavigation` disables the initial navigation.\n     * * `errorHandler` provides a custom error handler.\n     * * `preloadingStrategy` configures a preloading strategy (see `PreloadAllModules`).\n     * * `onSameUrlNavigation` configures how the router handles navigation to the current URL. See\n     * `ExtraOptions` for more details.\n     * * `paramsInheritanceStrategy` defines how the router merges params, data and resolved data\n     * from parent to child routes.\n     * @param {?} routes\n     * @param {?=} config\n     * @return {?}\n     */\n    function (routes, config) {\n        return {\n            ngModule: RouterModule,\n            providers: [\n                ROUTER_PROVIDERS,\n                provideRoutes(routes),\n                {\n                    provide: ROUTER_FORROOT_GUARD,\n                    useFactory: provideForRootGuard,\n                    deps: [[Router, new Optional(), new SkipSelf()]]\n                },\n                { provide: ROUTER_CONFIGURATION, useValue: config ? config : {} },\n                {\n                    provide: LocationStrategy,\n                    useFactory: provideLocationStrategy,\n                    deps: [\n                        PlatformLocation, [new Inject(APP_BASE_HREF), new Optional()], ROUTER_CONFIGURATION\n                    ]\n                },\n                {\n                    provide: RouterScroller,\n                    useFactory: createRouterScroller,\n                    deps: [Router, ViewportScroller, ROUTER_CONFIGURATION]\n                },\n                {\n                    provide: PreloadingStrategy,\n                    useExisting: config && config.preloadingStrategy ? config.preloadingStrategy :\n                        NoPreloading\n                },\n                { provide: NgProbeToken, multi: true, useFactory: routerNgProbeToken },\n                provideRouterInitializer(),\n            ],\n        };\n    };\n    /**\n     * Creates a module with all the router directives and a provider registering routes.\n     */\n    /**\n     * Creates a module with all the router directives and a provider registering routes.\n     * @param {?} routes\n     * @return {?}\n     */\n    RouterModule.forChild = /**\n     * Creates a module with all the router directives and a provider registering routes.\n     * @param {?} routes\n     * @return {?}\n     */\n    function (routes) {\n        return { ngModule: RouterModule, providers: [provideRoutes(routes)] };\n    };\n    RouterModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: ROUTER_DIRECTIVES,\n                    exports: ROUTER_DIRECTIVES,\n                    entryComponents: [EmptyOutletComponent]\n                },] },\n    ];\n    /** @nocollapse */\n    RouterModule.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ROUTER_FORROOT_GUARD,] }] },\n        { type: Router, decorators: [{ type: Optional }] }\n    ]; };\n    return RouterModule;\n}());\nexport { RouterModule };\n/**\n * @param {?} router\n * @param {?} viewportScroller\n * @param {?} config\n * @return {?}\n */\nexport function createRouterScroller(router, viewportScroller, config) {\n    if (config.scrollOffset) {\n        viewportScroller.setOffset(config.scrollOffset);\n    }\n    return new RouterScroller(router, viewportScroller, config);\n}\n/**\n * @param {?} platformLocationStrategy\n * @param {?} baseHref\n * @param {?=} options\n * @return {?}\n */\nexport function provideLocationStrategy(platformLocationStrategy, baseHref, options) {\n    if (options === void 0) { options = {}; }\n    return options.useHash ? new HashLocationStrategy(platformLocationStrategy, baseHref) :\n        new PathLocationStrategy(platformLocationStrategy, baseHref);\n}\n/**\n * @param {?} router\n * @return {?}\n */\nexport function provideForRootGuard(router) {\n    if (router) {\n        throw new Error(\"RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.\");\n    }\n    return 'guarded';\n}\n/**\n * \\@description\n *\n * Registers routes.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * \\@NgModule({\n *   imports: [RouterModule.forChild(ROUTES)],\n *   providers: [provideRoutes(EXTRA_ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n *\n * \\@publicApi\n * @param {?} routes\n * @return {?}\n */\nexport function provideRoutes(routes) {\n    return [\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, multi: true, useValue: routes },\n        { provide: ROUTES, multi: true, useValue: routes },\n    ];\n}\n/** @typedef {?} */\nvar InitialNavigation;\nexport { InitialNavigation };\n/**\n * \\@description\n *\n * Represents options to configure the router.\n *\n * \\@publicApi\n * @record\n */\nexport function ExtraOptions() { }\n/**\n * Makes the router log all its internal events to the console.\n * @type {?|undefined}\n */\nExtraOptions.prototype.enableTracing;\n/**\n * Enables the location strategy that uses the URL fragment instead of the history API.\n * @type {?|undefined}\n */\nExtraOptions.prototype.useHash;\n/**\n * Disables the initial navigation.\n * @type {?|undefined}\n */\nExtraOptions.prototype.initialNavigation;\n/**\n * A custom error handler.\n * @type {?|undefined}\n */\nExtraOptions.prototype.errorHandler;\n/**\n * Configures a preloading strategy. See `PreloadAllModules`.\n * @type {?|undefined}\n */\nExtraOptions.prototype.preloadingStrategy;\n/**\n * Define what the router should do if it receives a navigation request to the current URL.\n * By default, the router will ignore this navigation. However, this prevents features such\n * as a \"refresh\" button. Use this option to configure the behavior when navigating to the\n * current URL. Default is 'ignore'.\n * @type {?|undefined}\n */\nExtraOptions.prototype.onSameUrlNavigation;\n/**\n * Configures if the scroll position needs to be restored when navigating back.\n *\n * * 'disabled'--does nothing (default).\n * * 'top'--set the scroll position to 0,0..\n * * 'enabled'--set the scroll position to the stored position. This option will be the default in\n * the future.\n *\n * When enabled, the router stores and restores scroll positions during navigation.\n * When navigating forward, the scroll position will be set to [0, 0], or to the anchor\n * if one is provided.\n *\n * You can implement custom scroll restoration behavior as follows.\n * ```typescript\n * class AppModule {\n *  constructor(router: Router, viewportScroller: ViewportScroller, store: Store<AppState>) {\n *    router.events.pipe(filter(e => e instanceof Scroll), switchMap(e => {\n *      return store.pipe(first(), timeout(200), map(() => e));\n *    }).subscribe(e => {\n *      if (e.position) {\n *        viewportScroller.scrollToPosition(e.position);\n *      } else if (e.anchor) {\n *        viewportScroller.scrollToAnchor(e.anchor);\n *      } else {\n *        viewportScroller.scrollToPosition([0, 0]);\n *      }\n *    });\n *  }\n * }\n * ```\n *\n * You can also implement component-specific scrolling like this:\n *\n * ```typescript\n * class ListComponent {\n *   list: any[];\n *   constructor(router: Router, viewportScroller: ViewportScroller, fetcher: ListFetcher) {\n *     const scrollEvents = router.events.filter(e => e instanceof Scroll);\n *     listFetcher.fetch().pipe(withLatestFrom(scrollEvents)).subscribe(([list, e]) => {\n *       this.list = list;\n *       if (e.position) {\n *         viewportScroller.scrollToPosition(e.position);\n *       } else {\n *         viewportScroller.scrollToPosition([0, 0]);\n *       }\n *     });\n *   }\n * }\n * @type {?|undefined}\n */\nExtraOptions.prototype.scrollPositionRestoration;\n/**\n * Configures if the router should scroll to the element when the url has a fragment.\n *\n * * 'disabled'--does nothing (default).\n * * 'enabled'--scrolls to the element. This option will be the default in the future.\n *\n * Anchor scrolling does not happen on 'popstate'. Instead, we restore the position\n * that we stored or scroll to the top.\n * @type {?|undefined}\n */\nExtraOptions.prototype.anchorScrolling;\n/**\n * Configures the scroll offset the router will use when scrolling to an element.\n *\n * When given a tuple with two numbers, the router will always use the numbers.\n * When given a function, the router will invoke the function every time it restores scroll\n * position.\n * @type {?|undefined}\n */\nExtraOptions.prototype.scrollOffset;\n/**\n * Defines how the router merges params, data and resolved data from parent to child\n * routes. Available options are:\n *\n * - `'emptyOnly'`, the default, only inherits parent params for path-less or component-less\n *   routes.\n * - `'always'`, enables unconditional inheritance of parent params.\n * @type {?|undefined}\n */\nExtraOptions.prototype.paramsInheritanceStrategy;\n/**\n * A custom malformed uri error handler function. This handler is invoked when encodedURI contains\n * invalid character sequences. The default implementation is to redirect to the root url dropping\n * any path or param info. This function passes three parameters:\n *\n * - `'URIError'` - Error thrown when parsing a bad URL\n * - `'UrlSerializer'` - UrlSerializer that’s configured with the router.\n * - `'url'` -  The malformed URL that caused the URIError\n *\n * @type {?|undefined}\n */\nExtraOptions.prototype.malformedUriErrorHandler;\n/**\n * Defines when the router updates the browser URL. The default behavior is to update after\n * successful navigation. However, some applications may prefer a mode where the URL gets\n * updated at the beginning of navigation. The most common use case would be updating the\n * URL early so if navigation fails, you can show an error message with the URL that failed.\n * Available options are:\n *\n * - `'deferred'`, the default, updates the browser URL after navigation has finished.\n * - `'eager'`, updates browser URL at the beginning of navigation.\n * @type {?|undefined}\n */\nExtraOptions.prototype.urlUpdateStrategy;\n/**\n * Enables a bug fix that corrects relative link resolution in components with empty paths.\n * Example:\n *\n * ```\n * const routes = [\n *   {\n *     path: '',\n *     component: ContainerComponent,\n *     children: [\n *       { path: 'a', component: AComponent },\n *       { path: 'b', component: BComponent },\n *     ]\n *   }\n * ];\n * ```\n *\n * From the `ContainerComponent`, this will not work:\n *\n * `<a [routerLink]=\"['./a']\">Link to A</a>`\n *\n * However, this will work:\n *\n * `<a [routerLink]=\"['../a']\">Link to A</a>`\n *\n * In other words, you're required to use `../` rather than `./`. The current default in v6\n * is `legacy`, and this option will be removed in v7 to default to the corrected behavior.\n * @type {?|undefined}\n */\nExtraOptions.prototype.relativeLinkResolution;\n/**\n * @param {?} ref\n * @param {?} urlSerializer\n * @param {?} contexts\n * @param {?} location\n * @param {?} injector\n * @param {?} loader\n * @param {?} compiler\n * @param {?} config\n * @param {?=} opts\n * @param {?=} urlHandlingStrategy\n * @param {?=} routeReuseStrategy\n * @return {?}\n */\nexport function setupRouter(ref, urlSerializer, contexts, location, injector, loader, compiler, config, opts, urlHandlingStrategy, routeReuseStrategy) {\n    if (opts === void 0) { opts = {}; }\n    /** @type {?} */\n    var router = new Router(null, urlSerializer, contexts, location, injector, loader, compiler, flatten(config));\n    if (urlHandlingStrategy) {\n        router.urlHandlingStrategy = urlHandlingStrategy;\n    }\n    if (routeReuseStrategy) {\n        router.routeReuseStrategy = routeReuseStrategy;\n    }\n    if (opts.errorHandler) {\n        router.errorHandler = opts.errorHandler;\n    }\n    if (opts.malformedUriErrorHandler) {\n        router.malformedUriErrorHandler = opts.malformedUriErrorHandler;\n    }\n    if (opts.enableTracing) {\n        /** @type {?} */\n        var dom_1 = getDOM();\n        router.events.subscribe(function (e) {\n            dom_1.logGroup(\"Router Event: \" + ((/** @type {?} */ (e.constructor))).name);\n            dom_1.log(e.toString());\n            dom_1.log(e);\n            dom_1.logGroupEnd();\n        });\n    }\n    if (opts.onSameUrlNavigation) {\n        router.onSameUrlNavigation = opts.onSameUrlNavigation;\n    }\n    if (opts.paramsInheritanceStrategy) {\n        router.paramsInheritanceStrategy = opts.paramsInheritanceStrategy;\n    }\n    if (opts.urlUpdateStrategy) {\n        router.urlUpdateStrategy = opts.urlUpdateStrategy;\n    }\n    if (opts.relativeLinkResolution) {\n        router.relativeLinkResolution = opts.relativeLinkResolution;\n    }\n    return router;\n}\n/**\n * @param {?} router\n * @return {?}\n */\nexport function rootRoute(router) {\n    return router.routerState.root;\n}\n/**\n * To initialize the router properly we need to do in two steps:\n *\n * We need to start the navigation in a APP_INITIALIZER to block the bootstrap if\n * a resolver or a guards executes asynchronously. Second, we need to actually run\n * activation in a BOOTSTRAP_LISTENER. We utilize the afterPreactivation\n * hook provided by the router to do that.\n *\n * The router navigation starts, reaches the point when preactivation is done, and then\n * pauses. It waits for the hook to be resolved. We then resolve it only in a bootstrap listener.\n */\nvar RouterInitializer = /** @class */ (function () {\n    function RouterInitializer(injector) {\n        this.injector = injector;\n        this.initNavigation = false;\n        this.resultOfPreactivationDone = new Subject();\n    }\n    /**\n     * @return {?}\n     */\n    RouterInitializer.prototype.appInitializer = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var p = this.injector.get(LOCATION_INITIALIZED, Promise.resolve(null));\n        return p.then(function () {\n            /** @type {?} */\n            var resolve = /** @type {?} */ ((null));\n            /** @type {?} */\n            var res = new Promise(function (r) { return resolve = r; });\n            /** @type {?} */\n            var router = _this.injector.get(Router);\n            /** @type {?} */\n            var opts = _this.injector.get(ROUTER_CONFIGURATION);\n            if (_this.isLegacyDisabled(opts) || _this.isLegacyEnabled(opts)) {\n                resolve(true);\n            }\n            else if (opts.initialNavigation === 'disabled') {\n                router.setUpLocationChangeListener();\n                resolve(true);\n            }\n            else if (opts.initialNavigation === 'enabled') {\n                router.hooks.afterPreactivation = function () {\n                    // only the initial navigation should be delayed\n                    if (!_this.initNavigation) {\n                        _this.initNavigation = true;\n                        resolve(true);\n                        return _this.resultOfPreactivationDone;\n                        // subsequent navigations should not be delayed\n                    }\n                    else {\n                        return /** @type {?} */ (of(null));\n                    }\n                };\n                router.initialNavigation();\n            }\n            else {\n                throw new Error(\"Invalid initialNavigation options: '\" + opts.initialNavigation + \"'\");\n            }\n            return res;\n        });\n    };\n    /**\n     * @param {?} bootstrappedComponentRef\n     * @return {?}\n     */\n    RouterInitializer.prototype.bootstrapListener = /**\n     * @param {?} bootstrappedComponentRef\n     * @return {?}\n     */\n    function (bootstrappedComponentRef) {\n        /** @type {?} */\n        var opts = this.injector.get(ROUTER_CONFIGURATION);\n        /** @type {?} */\n        var preloader = this.injector.get(RouterPreloader);\n        /** @type {?} */\n        var routerScroller = this.injector.get(RouterScroller);\n        /** @type {?} */\n        var router = this.injector.get(Router);\n        /** @type {?} */\n        var ref = this.injector.get(ApplicationRef);\n        if (bootstrappedComponentRef !== ref.components[0]) {\n            return;\n        }\n        if (this.isLegacyEnabled(opts)) {\n            router.initialNavigation();\n        }\n        else if (this.isLegacyDisabled(opts)) {\n            router.setUpLocationChangeListener();\n        }\n        preloader.setUpPreloading();\n        routerScroller.init();\n        router.resetRootComponentType(ref.componentTypes[0]);\n        this.resultOfPreactivationDone.next(/** @type {?} */ ((null)));\n        this.resultOfPreactivationDone.complete();\n    };\n    /**\n     * @param {?} opts\n     * @return {?}\n     */\n    RouterInitializer.prototype.isLegacyEnabled = /**\n     * @param {?} opts\n     * @return {?}\n     */\n    function (opts) {\n        return opts.initialNavigation === 'legacy_enabled' || opts.initialNavigation === true ||\n            opts.initialNavigation === undefined;\n    };\n    /**\n     * @param {?} opts\n     * @return {?}\n     */\n    RouterInitializer.prototype.isLegacyDisabled = /**\n     * @param {?} opts\n     * @return {?}\n     */\n    function (opts) {\n        return opts.initialNavigation === 'legacy_disabled' || opts.initialNavigation === false;\n    };\n    RouterInitializer.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    RouterInitializer.ctorParameters = function () { return [\n        { type: Injector }\n    ]; };\n    return RouterInitializer;\n}());\nexport { RouterInitializer };\nif (false) {\n    /** @type {?} */\n    RouterInitializer.prototype.initNavigation;\n    /** @type {?} */\n    RouterInitializer.prototype.resultOfPreactivationDone;\n    /** @type {?} */\n    RouterInitializer.prototype.injector;\n}\n/**\n * @param {?} r\n * @return {?}\n */\nexport function getAppInitializer(r) {\n    return r.appInitializer.bind(r);\n}\n/**\n * @param {?} r\n * @return {?}\n */\nexport function getBootstrapListener(r) {\n    return r.bootstrapListener.bind(r);\n}\n/** *\n * A token for the router initializer that will be called after the app is bootstrapped.\n *\n * \\@publicApi\n  @type {?} */\nexport var ROUTER_INITIALIZER = new InjectionToken('Router Initializer');\n/**\n * @return {?}\n */\nexport function provideRouterInitializer() {\n    return [\n        RouterInitializer,\n        {\n            provide: APP_INITIALIZER,\n            multi: true,\n            useFactory: getAppInitializer,\n            deps: [RouterInitializer]\n        },\n        { provide: ROUTER_INITIALIZER, useFactory: getBootstrapListener, deps: [RouterInitializer] },\n        { provide: APP_BOOTSTRAP_LISTENER, multi: true, useExisting: ROUTER_INITIALIZER },\n    ];\n}\n//# sourceMappingURL=router_module.js.map"]}