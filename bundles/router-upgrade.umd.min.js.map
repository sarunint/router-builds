{"version":3,"sources":["../../../packages/router/esm5/upgrade/src/upgrade.js"],"names":["anchor","RouterUpgradeInitializer","setUpLocationSync","ngUpgrade","Error","$injector","get","$on","_","next","__","url","setAttribute","href","resolveUrl"],"mappings":";;;;;;;;;;;;;;;;;OAwGAA,OA7DEC,kRA0BMC,kBAAmBC,mCAEnB,MAAA,IAAQC,MAAG,+UAMPC,UAAOC,IAAS,cACpBC,IAAA,uBAA4B,SAAUC,EAAGC,KAAIC,IAEpD,IAAAC,aA6BUA,KACPX,2DAGIY,aAAe,OAAMD,YACrBC,aAAa,OAAIZ,OAAAa,6FAlCxBC,CAAAL","file":"/mnt/c/Users/Sarun/dev/angular/dist/packages-dist/router/bundles/router-upgrade.umd.min.js.map","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Location } from '@angular/common';\nimport { APP_BOOTSTRAP_LISTENER } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UpgradeModule } from '@angular/upgrade/static';\n/** *\n * \\@description\n *\n * Creates an initializer that in addition to setting up the Angular\n * router sets up the ngRoute integration.\n *\n * ```\n * \\@NgModule({\n *  imports: [\n *   RouterModule.forRoot(SOME_ROUTES),\n *   UpgradeModule\n * ],\n * providers: [\n *   RouterUpgradeInitializer\n * ]\n * })\n * export class AppModule {\n *   ngDoBootstrap() {}\n * }\n * ```\n *\n * \\@publicApi\n  @type {?} */\nexport var RouterUpgradeInitializer = {\n    provide: APP_BOOTSTRAP_LISTENER,\n    multi: true,\n    useFactory: /** @type {?} */ (locationSyncBootstrapListener),\n    deps: [UpgradeModule]\n};\n/**\n * \\@internal\n * @param {?} ngUpgrade\n * @return {?}\n */\nexport function locationSyncBootstrapListener(ngUpgrade) {\n    return function () { setUpLocationSync(ngUpgrade); };\n}\n/**\n * \\@description\n *\n * Sets up a location synchronization.\n *\n * History.pushState does not fire onPopState, so the Angular location\n * doesn't detect it. The workaround is to attach a location change listener\n *\n * \\@publicApi\n * @param {?} ngUpgrade\n * @return {?}\n */\nexport function setUpLocationSync(ngUpgrade) {\n    if (!ngUpgrade.$injector) {\n        throw new Error(\"\\n        RouterUpgradeInitializer can be used only after UpgradeModule.bootstrap has been called.\\n        Remove RouterUpgradeInitializer and call setUpLocationSync after UpgradeModule.bootstrap.\\n      \");\n    }\n    /** @type {?} */\n    var router = ngUpgrade.injector.get(Router);\n    /** @type {?} */\n    var location = ngUpgrade.injector.get(Location);\n    ngUpgrade.$injector.get('$rootScope')\n        .$on('$locationChangeStart', function (_, next, __) {\n        /** @type {?} */\n        var url = resolveUrl(next);\n        /** @type {?} */\n        var path = location.normalize(url.pathname);\n        router.navigateByUrl(path + url.search + url.hash);\n    });\n}\n/** *\n * Normalize and parse a URL.\n *\n * - Normalizing means that a relative URL will be resolved into an absolute URL in the context of\n *   the application document.\n * - Parsing means that the anchor's `protocol`, `hostname`, `port`, `pathname` and related\n *   properties are all populated to reflect the normalized URL.\n *\n * While this approach has wide compatibility, it doesn't work as expected on IE. On IE, normalizing\n * happens similar to other browsers, but the parsed components will not be set. (E.g. if you assign\n * `a.href = 'foo'`, then `a.protocol`, `a.host`, etc. will not be correctly updated.)\n * We work around that by performing the parsing in a 2nd step by taking a previously normalized URL\n * and assigning it again. This correctly populates all properties.\n *\n * See\n * https://github.com/angular/angular.js/blob/2c7400e7d07b0f6cec1817dab40b9250ce8ebce6/src/ng/urlUtils.js#L26-L33\n * for more info.\n  @type {?} */\nvar anchor;\n/**\n * @param {?} url\n * @return {?}\n */\nfunction resolveUrl(url) {\n    if (!anchor) {\n        anchor = document.createElement('a');\n    }\n    anchor.setAttribute('href', url);\n    anchor.setAttribute('href', anchor.href);\n    return {\n        // IE does not start `pathname` with `/` like other browsers.\n        pathname: \"/\" + anchor.pathname.replace(/^\\//, ''),\n        search: anchor.search,\n        hash: anchor.hash\n    };\n}\n//# sourceMappingURL=upgrade.js.map"]}